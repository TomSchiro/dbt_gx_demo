{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.8", "generated_at": "2023-09-22T00:11:12.013071Z", "invocation_id": "3b9cc178-e74c-422f-bc10-66b71e019247", "env": {}, "project_id": "b9a27db538cb3d08ee12e819e5a4b817", "user_id": "db6aa799-97ff-4e79-b7bf-5d46d52070ef", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.dbt_gx_demo.metricflow_time_spine": {"database": "BRONZE", "schema": "LANDING", "name": "metricflow_time_spine", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "metricflow_time_spine.sql", "original_file_path": "models/metricflow_time_spine.sql", "unique_id": "model.dbt_gx_demo.metricflow_time_spine", "fqn": ["dbt_gx_demo", "metricflow_time_spine"], "alias": "metricflow_time_spine", "checksum": {"name": "sha256", "checksum": "47914e17fe314e27f22878b413a03b264ce1eaecf2cfa09ecf9a309155f25e0c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1695341476.1699865, "relation_name": "BRONZE.LANDING.metricflow_time_spine", "raw_code": "{{\n    config(\n        materialized = 'table',\n    )\n}}\n\nwith days as (\n\n    {{\n        dbt_utils.date_spine(\n            'day',\n            \"to_date('01/01/2000','mm/dd/yyyy')\",\n            \"to_date('01/01/2027','mm/dd/yyyy')\"\n        )\n    }}\n\n),\n\nfinal as (\n    select cast(date_day as date) as date_day\n    from days\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "compiled_path": null}, "model.dbt_gx_demo.processed_orders": {"database": "BRONZE", "schema": "processed", "name": "processed_orders", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/sales_demo/processed_orders.sql", "original_file_path": "models/bronze/processed/sales_demo/processed_orders.sql", "unique_id": "model.dbt_gx_demo.processed_orders", "fqn": ["dbt_gx_demo", "bronze", "processed", "sales_demo", "processed_orders"], "alias": "processed_orders", "checksum": {"name": "sha256", "checksum": "82768d4a0c9470b361ef1cb89d774d2a91dfad198771a05e1454d3633f77a7d1"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "sales_demo", "processed_sales_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "sales_demo", "processed_sales_demo"], "description": "", "columns": {"ORDERKEY": {"name": "ORDERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARTKEY": {"name": "PARTKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIERKEY": {"name": "SUPPLIERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINENUMBER": {"name": "LINENUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QUANTITY": {"name": "QUANTITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTENDEDPRICE": {"name": "EXTENDEDPRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DISCOUNT": {"name": "DISCOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAX": {"name": "TAX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RETURNFLAG": {"name": "RETURNFLAG", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINESTATUS": {"name": "LINESTATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPDATE": {"name": "SHIPDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMMITDATE": {"name": "COMMITDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTDATE": {"name": "RECEIPTDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPINSTRUCT": {"name": "SHIPINSTRUCT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPMODE": {"name": "SHIPMODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINE_COMMENT": {"name": "LINE_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMERKEY": {"name": "CUSTOMERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDERSTATUS": {"name": "ORDERSTATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTALPRICE": {"name": "TOTALPRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDERDATE": {"name": "ORDERDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDERPRIORITY": {"name": "ORDERPRIORITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLERK": {"name": "CLERK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPPRIORITY": {"name": "SHIPPRIORITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDER_COMMENT": {"name": "ORDER_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NAME": {"name": "CUSTOMER_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_ADDRESS": {"name": "CUSTOMER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NATION_KEY": {"name": "CUSTOMER_NATION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_PHONE": {"name": "CUSTOMER_PHONE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_ACCBAL": {"name": "CUSTOMER_ACCBAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_MKTSEGMENT": {"name": "CUSTOMER_MKTSEGMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_COMMENT": {"name": "CUSTOMER_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NATION_NAME": {"name": "CUSTOMER_NATION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_REGION_KEY": {"name": "CUSTOMER_REGION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NATION_COMMENT": {"name": "CUSTOMER_NATION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_REGION_NAME": {"name": "CUSTOMER_REGION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_REGION_COMMENT": {"name": "CUSTOMER_REGION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["sales_demo", "processed_sales_demo"]}, "created_at": 1695341478.4825704, "relation_name": "BRONZE.processed.processed_orders", "raw_code": "SELECT\n    ORDERKEY,\n    PARTKEY ,\n    SUPPLIERKEY,\n    LINENUMBER,\n    QUANTITY,\n    EXTENDEDPRICE,\n    DISCOUNT,\n    TAX,\n    RETURNFLAG,\n    LINESTATUS,\n    SHIPDATE,\n    COMMITDATE,\n    RECEIPTDATE,\n    SHIPINSTRUCT,\n    SHIPMODE,\n    LINE_COMMENT,\n    CUSTOMERKEY,\n    ORDERSTATUS,\n    TOTALPRICE,\n    ORDERDATE,\n    ORDERPRIORITY,\n    CLERK,\n    SHIPPRIORITY,\n    ORDER_COMMENT,\n    CUSTOMER_NAME,\n    CUSTOMER_ADDRESS,\n    CUSTOMER_NATION_KEY,\n    CUSTOMER_PHONE,\n    CUSTOMER_ACCBAL,\n    CUSTOMER_MKTSEGMENT,\n    CUSTOMER_COMMENT,\n    CUSTOMER_NATION_NAME,\n    CUSTOMER_REGION_KEY,\n    CUSTOMER_NATION_COMMENT,\n    CUSTOMER_REGION_NAME,\n    CUSTOMER_REGION_COMMENT,\n    LOAD_DATE_TIMESTAMP\nFROM {{ ref('raw_orders') }} AS b", "language": "sql", "refs": [["raw_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_customer_info": {"database": "BRONZE", "schema": "processed", "name": "processed_customer_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/sales_demo/processed_customer_info.sql", "original_file_path": "models/bronze/processed/sales_demo/processed_customer_info.sql", "unique_id": "model.dbt_gx_demo.processed_customer_info", "fqn": ["dbt_gx_demo", "bronze", "processed", "sales_demo", "processed_customer_info"], "alias": "processed_customer_info", "checksum": {"name": "sha256", "checksum": "d593214ea520f48b6cec183f5a6b3fb4653193c2338f8c24e1c8bab5c2d589fc"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "sales_demo", "processed_sales_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "sales_demo", "processed_sales_demo"], "description": "", "columns": {"C_CUSTOMER_SK": {"name": "C_CUSTOMER_SK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_CUSTOMER_ID": {"name": "C_CUSTOMER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_SALUTATION": {"name": "C_SALUTATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_FIRST_NAME": {"name": "C_FIRST_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_LAST_NAME": {"name": "C_LAST_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_BIRTH_DAY": {"name": "C_BIRTH_DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_BIRTH_YEAR": {"name": "C_BIRTH_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_EMAIL_ADDRESS": {"name": "C_EMAIL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_LOGIN": {"name": "C_LOGIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_ADDRESS_ID": {"name": "CA_ADDRESS_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_STREET_NUMBER": {"name": "CA_STREET_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_STREET_TYPE": {"name": "CA_STREET_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_SUITE_NUMBER": {"name": "CA_SUITE_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_CITY": {"name": "CA_CITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_COUNTY": {"name": "CA_COUNTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_STATE": {"name": "CA_STATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_ZIP": {"name": "CA_ZIP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_COUNTRY": {"name": "CA_COUNTRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_GMT_OFFSET": {"name": "CA_GMT_OFFSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_LOCATION_TYPE": {"name": "CA_LOCATION_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_GENDER": {"name": "CD_GENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_MARITAL_STATUS": {"name": "CD_MARITAL_STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_EDUCATION_STATUS": {"name": "CD_EDUCATION_STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_PURCHASE_ESTIMATE": {"name": "CD_PURCHASE_ESTIMATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_CREDIT_RATING": {"name": "CD_CREDIT_RATING", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_DEP_COUNT": {"name": "CD_DEP_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["sales_demo", "processed_sales_demo"]}, "created_at": 1695341478.4573958, "relation_name": "BRONZE.processed.processed_customer_info", "raw_code": "SELECT \n    C_CUSTOMER_SK,\n    C_CUSTOMER_ID,\n    C_SALUTATION,\n    C_FIRST_NAME,\n    C_LAST_NAME,\n    C_BIRTH_DAY,\n    C_BIRTH_YEAR,\n    C_EMAIL_ADDRESS,\n    C_LOGIN,\n    CA_ADDRESS_ID,\n    CA_STREET_NUMBER,\n    CA_STREET_TYPE,\n    CA_SUITE_NUMBER,\n    CA_CITY,\n    CA_COUNTY,\n    CA_STATE,\n    CA_ZIP,\n    CA_COUNTRY,\n    CA_GMT_OFFSET,\n    CA_LOCATION_TYPE,\n    CD_GENDER,\n    CD_MARITAL_STATUS,\n    CD_EDUCATION_STATUS,\n    CD_PURCHASE_ESTIMATE,\n    CD_CREDIT_RATING,\n    CD_DEP_COUNT,\n    LOAD_DATE_TIMESTAMP\nFROM {{ ref('raw_customer_info') }}", "language": "sql", "refs": [["raw_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_customer_info"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_transactions": {"database": "BRONZE", "schema": "processed", "name": "processed_transactions", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/sales_demo/processed_transactions.sql", "original_file_path": "models/bronze/processed/sales_demo/processed_transactions.sql", "unique_id": "model.dbt_gx_demo.processed_transactions", "fqn": ["dbt_gx_demo", "bronze", "processed", "sales_demo", "processed_transactions"], "alias": "processed_transactions", "checksum": {"name": "sha256", "checksum": "1fe96afa0cfd3b628ac3659552a1462e204f8f021e3efea702f9df702e0fb4c5"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "sales_demo", "processed_sales_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "sales_demo", "processed_sales_demo"], "description": "", "columns": {"ORDER_ID": {"name": "ORDER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_ID": {"name": "CUSTOMER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDER_DATE": {"name": "ORDER_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_DATE": {"name": "TRANSACTION_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_NUMBER": {"name": "TRANSACTION_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["sales_demo", "processed_sales_demo"]}, "created_at": 1695341478.4869294, "relation_name": "BRONZE.processed.processed_transactions", "raw_code": "SELECT\n    ORDER_ID,\n    CUSTOMER_ID,\n    ORDER_DATE,\n    TRANSACTION_DATE,\n    TRANSACTION_NUMBER,\n    AMOUNT,\n    TYPE,\n    LOAD_DATE_TIMESTAMP\nFROM {{ ref('raw_transactions') }}  AS b", "language": "sql", "refs": [["raw_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_transactions"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_inventory": {"database": "BRONZE", "schema": "processed", "name": "processed_inventory", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/sales_demo/processed_inventory.sql", "original_file_path": "models/bronze/processed/sales_demo/processed_inventory.sql", "unique_id": "model.dbt_gx_demo.processed_inventory", "fqn": ["dbt_gx_demo", "bronze", "processed", "sales_demo", "processed_inventory"], "alias": "processed_inventory", "checksum": {"name": "sha256", "checksum": "86697a6189750c018b92fa53ba4c7c7aa569d47c4d6c17682fafdef589bd33f4"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "sales_demo", "processed_sales_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "sales_demo", "processed_sales_demo"], "description": "", "columns": {"PARTKEY": {"name": "PARTKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIERKEY": {"name": "SUPPLIERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVAILQTY": {"name": "AVAILQTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLYCOST": {"name": "SUPPLYCOST", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_SUPPLY_COMMENT": {"name": "PART_SUPPLY_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NAME": {"name": "SUPPLIER_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_ADDRESS": {"name": "SUPPLIER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NATION_KEY": {"name": "SUPPLIER_NATION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_PHONE": {"name": "SUPPLIER_PHONE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_ACCTBAL": {"name": "SUPPLIER_ACCTBAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_COMMENT": {"name": "SUPPLIER_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_NAME": {"name": "PART_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_MFGR": {"name": "PART_MFGR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_BRAND": {"name": "PART_BRAND", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_TYPE": {"name": "PART_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_SIZE": {"name": "PART_SIZE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_CONTAINER": {"name": "PART_CONTAINER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_RETAILPRICE": {"name": "PART_RETAILPRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_COMMENT": {"name": "PART_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NATION_NAME": {"name": "SUPPLIER_NATION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NATION_COMMENT": {"name": "SUPPLIER_NATION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_REGION_KEY": {"name": "SUPPLIER_REGION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_REGION_NAME": {"name": "SUPPLIER_REGION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_REGION_COMMENT": {"name": "SUPPLIER_REGION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["sales_demo", "processed_sales_demo"]}, "created_at": 1695341478.4676356, "relation_name": "BRONZE.processed.processed_inventory", "raw_code": "SELECT\n    PARTKEY,\n    SUPPLIERKEY,\n    AVAILQTY,\n    SUPPLYCOST,\n    PART_SUPPLY_COMMENT,\n    SUPPLIER_NAME,\n    SUPPLIER_ADDRESS,\n    SUPPLIER_NATION_KEY,\n    SUPPLIER_PHONE,\n    SUPPLIER_ACCTBAL,\n    SUPPLIER_COMMENT,\n    PART_NAME,\n    PART_MFGR,\n    PART_BRAND,\n    PART_TYPE,\n    PART_SIZE,\n    PART_CONTAINER,\n    PART_RETAILPRICE,\n    PART_COMMENT,\n    SUPPLIER_NATION_NAME,\n    SUPPLIER_NATION_COMMENT,\n    SUPPLIER_REGION_KEY,\n    SUPPLIER_REGION_NAME,\n    SUPPLIER_REGION_COMMENT,\n    LOAD_DATE_TIMESTAMP\nFROM {{ ref('raw_inventory') }}", "language": "sql", "refs": [["raw_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_airline_info": {"database": "BRONZE", "schema": "processed", "name": "processed_airline_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/flight_demo/processed_airline_info.sql", "original_file_path": "models/bronze/processed/flight_demo/processed_airline_info.sql", "unique_id": "model.dbt_gx_demo.processed_airline_info", "fqn": ["dbt_gx_demo", "bronze", "processed", "flight_demo", "processed_airline_info"], "alias": "processed_airline_info", "checksum": {"name": "sha256", "checksum": "e929ecf8368f7fa1b3a9d4c2920a816baa046465215322860317b74cabf7c88c"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "flight_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "flight_demo"], "description": "", "columns": {"IATA_CODE": {"name": "IATA_CODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRLINE": {"name": "AIRLINE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": "target/run/dbt_gx_demo/models/bronze/processed/flight_demo/processed_airline_info.sql", "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["flight_demo"]}, "created_at": 1695341478.5206273, "relation_name": "BRONZE.processed.processed_airline_info", "raw_code": "SELECT *, cast('test' as datetime) as 'tst'\n FROM {{ ref('raw_airline_info') }}   AIRLINE", "language": "sql", "refs": [["raw_airline_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_airline_info"]}, "compiled_path": "target/compiled/dbt_gx_demo/models/bronze/processed/flight_demo/processed_airline_info.sql", "compiled": true, "compiled_code": "SELECT *, cast('test' as datetime) as 'tst'\n FROM BRONZE.raw.raw_airline_info   AIRLINE", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbt_gx_demo.processed_flight_info": {"database": "BRONZE", "schema": "processed", "name": "processed_flight_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/flight_demo/processed_flight_info.sql", "original_file_path": "models/bronze/processed/flight_demo/processed_flight_info.sql", "unique_id": "model.dbt_gx_demo.processed_flight_info", "fqn": ["dbt_gx_demo", "bronze", "processed", "flight_demo", "processed_flight_info"], "alias": "processed_flight_info", "checksum": {"name": "sha256", "checksum": "660f9063a46a6c57844919608f1de0da03227dc6c1e3e4e6f0e855aa83edd2df"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "flight_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "flight_demo"], "description": "", "columns": {"YEAR": {"name": "YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH": {"name": "MONTH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY_OF_WEEK": {"name": "DAY_OF_WEEK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRLINE": {"name": "AIRLINE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FLIGHT_NUMBER": {"name": "FLIGHT_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAIL_NUMBER": {"name": "TAIL_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_AIRPORT": {"name": "ORIGIN_AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESTINATION_AIRPORT": {"name": "DESTINATION_AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_DEPARTURE": {"name": "SCHEDULE_DEPARTURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPARTURE_TIME": {"name": "DEPARTURE_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPARTURE_DELAY": {"name": "DEPARTURE_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAXI_OUT": {"name": "TAXI_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WHEELS_OFF": {"name": "WHEELS_OFF", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_TIME": {"name": "SCHEDULE_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ELAPSED_TIME": {"name": "ELAPSED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIR_TIME": {"name": "AIR_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DISTANCE": {"name": "DISTANCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WHEELS_ON": {"name": "WHEELS_ON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAXI_IN": {"name": "TAXI_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_ARRIVAL": {"name": "SCHEDULE_ARRIVAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARRIVAL_TIME": {"name": "ARRIVAL_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARRIVAL_DELAY": {"name": "ARRIVAL_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIVERTED": {"name": "DIVERTED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CANCELLED": {"name": "CANCELLED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CANCELLATION_REASON": {"name": "CANCELLATION_REASON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIR_SYSTEM_DELAY": {"name": "AIR_SYSTEM_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SECURITY_DELAY": {"name": "SECURITY_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRLINE_DELAY": {"name": "AIRLINE_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LATE_AIRCRAFT_DELAY": {"name": "LATE_AIRCRAFT_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEATHER_DELAY": {"name": "WEATHER_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["flight_demo"]}, "created_at": 1695341478.5363286, "relation_name": "BRONZE.processed.processed_flight_info", "raw_code": "SELECT *\n FROM {{ ref('raw_flight_info') }}  FLIGHT", "language": "sql", "refs": [["raw_flight_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_flight_info"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_airport_info": {"database": "BRONZE", "schema": "processed", "name": "processed_airport_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/flight_demo/processed_airport_info.sql", "original_file_path": "models/bronze/processed/flight_demo/processed_airport_info.sql", "unique_id": "model.dbt_gx_demo.processed_airport_info", "fqn": ["dbt_gx_demo", "bronze", "processed", "flight_demo", "processed_airport_info"], "alias": "processed_airport_info", "checksum": {"name": "sha256", "checksum": "6abc689ed4b0a6465e97476dc1b227dc34a6a8ffee4b424fa3a8613292c584fb"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "flight_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "flight_demo"], "description": "", "columns": {"AIRPORT": {"name": "AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CITY": {"name": "CITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATE": {"name": "STATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY": {"name": "COUNTRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LATITUDE": {"name": "LATITUDE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["flight_demo"]}, "created_at": 1695341478.523974, "relation_name": "BRONZE.processed.processed_airport_info", "raw_code": "SELECT *\n FROM {{ ref('raw_airport_info') }}  AIRPORT", "language": "sql", "refs": [["raw_airport_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_airport_info"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_netflix_dataset_rating": {"database": "BRONZE", "schema": "processed", "name": "processed_netflix_dataset_rating", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/netflix_demo/processed_netflix_dataset_rating.sql", "original_file_path": "models/bronze/processed/netflix_demo/processed_netflix_dataset_rating.sql", "unique_id": "model.dbt_gx_demo.processed_netflix_dataset_rating", "fqn": ["dbt_gx_demo", "bronze", "processed", "netflix_demo", "processed_netflix_dataset_rating"], "alias": "processed_netflix_dataset_rating", "checksum": {"name": "sha256", "checksum": "cc35baa99f83a39f76facbdf299701fe677b52edcb6690972824b87228090b9f"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "netflix_demo"], "description": "", "columns": {"USER_ID": {"name": "USER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATING": {"name": "RATING", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOVIE_ID": {"name": "MOVIE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.5115464, "relation_name": "BRONZE.processed.processed_netflix_dataset_rating", "raw_code": "SELECT *\n FROM {{ ref('raw_netflix_dataset_rating') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["raw_netflix_dataset_rating"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_netflix_dataset_rating"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_netflix_credits": {"database": "BRONZE", "schema": "processed", "name": "processed_netflix_credits", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/netflix_demo/processed_netflix_credits.sql", "original_file_path": "models/bronze/processed/netflix_demo/processed_netflix_credits.sql", "unique_id": "model.dbt_gx_demo.processed_netflix_credits", "fqn": ["dbt_gx_demo", "bronze", "processed", "netflix_demo", "processed_netflix_credits"], "alias": "processed_netflix_credits", "checksum": {"name": "sha256", "checksum": "49cd298a5712d2f69a7e92d955a27dcd0239b5985ee789ae5fd71fe14581cb87"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PERSON_ID": {"name": "PERSON_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHARACTER": {"name": "CHARACTER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.5066695, "relation_name": "BRONZE.processed.processed_netflix_credits", "raw_code": "SELECT *\n FROM {{ ref('raw_netflix_credits') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["raw_netflix_credits"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_netflix_credits"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_netflix_best_show": {"database": "BRONZE", "schema": "processed", "name": "processed_netflix_best_show", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/netflix_demo/processed_netflix_best_show.sql", "original_file_path": "models/bronze/processed/netflix_demo/processed_netflix_best_show.sql", "unique_id": "model.dbt_gx_demo.processed_netflix_best_show", "fqn": ["dbt_gx_demo", "bronze", "processed", "netflix_demo", "processed_netflix_best_show"], "alias": "processed_netflix_best_show", "checksum": {"name": "sha256", "checksum": "105c5024fb93e82f9e1241e80daeb6b89a219d3c63c5010dfd84b990ccedba63"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_VOTES": {"name": "NUMBER_OF_VOTES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DURATION": {"name": "DURATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_SEASONS": {"name": "NUMBER_OF_SEASONS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.5000951, "relation_name": "BRONZE.processed.processed_netflix_best_show", "raw_code": "SELECT *\n FROM {{ ref('raw_netflix_best_show') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["raw_netflix_best_show"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_netflix_best_show"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_netflix_best_show_by_year": {"database": "BRONZE", "schema": "processed", "name": "processed_netflix_best_show_by_year", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/netflix_demo/processed_netflix_best_show_by_year.sql", "original_file_path": "models/bronze/processed/netflix_demo/processed_netflix_best_show_by_year.sql", "unique_id": "model.dbt_gx_demo.processed_netflix_best_show_by_year", "fqn": ["dbt_gx_demo", "bronze", "processed", "netflix_demo", "processed_netflix_best_show_by_year"], "alias": "processed_netflix_best_show_by_year", "checksum": {"name": "sha256", "checksum": "f5b21e48b3f1a95f4d4a63c744f330915ae0c8045d02d32b242fbdfda0171dc5"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_SEASONS": {"name": "NUMBER_OF_SEASONS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.5038147, "relation_name": "BRONZE.processed.processed_netflix_best_show_by_year", "raw_code": "SELECT *\n FROM {{ ref('raw_netflix_best_show_by_year') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["raw_netflix_best_show_by_year"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_netflix_best_show_by_year"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_netflix_originals": {"database": "BRONZE", "schema": "processed", "name": "processed_netflix_originals", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/netflix_demo/processed_netflix_originals.sql", "original_file_path": "models/bronze/processed/netflix_demo/processed_netflix_originals.sql", "unique_id": "model.dbt_gx_demo.processed_netflix_originals", "fqn": ["dbt_gx_demo", "bronze", "processed", "netflix_demo", "processed_netflix_originals"], "alias": "processed_netflix_originals", "checksum": {"name": "sha256", "checksum": "46df4562103b2fc87bd7dbe9d019d608d6b3ddd98cbe8ad10dff217fea89e42b"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "netflix_demo"], "description": "", "columns": {"TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GENRE": {"name": "GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREMIERE": {"name": "PREMIERE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNTIME": {"name": "RUNTIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMDBSCORE": {"name": "IMDBSCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LANGUAGE": {"name": "LANGUAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.5147548, "relation_name": "BRONZE.processed.processed_netflix_originals", "raw_code": "SELECT *\n FROM {{ ref('raw_netflix_originals') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["raw_netflix_originals"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_netflix_originals"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_netflix_best_movie_by_year": {"database": "BRONZE", "schema": "processed", "name": "processed_netflix_best_movie_by_year", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/netflix_demo/processed_netflix_best_movie_by_year.sql", "original_file_path": "models/bronze/processed/netflix_demo/processed_netflix_best_movie_by_year.sql", "unique_id": "model.dbt_gx_demo.processed_netflix_best_movie_by_year", "fqn": ["dbt_gx_demo", "bronze", "processed", "netflix_demo", "processed_netflix_best_movie_by_year"], "alias": "processed_netflix_best_movie_by_year", "checksum": {"name": "sha256", "checksum": "336a7ad24bd5bd05af09b4bb3d62bb2f5964ad5add1e821e34a63899258ff50c"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOVIE_BUDGET": {"name": "MOVIE_BUDGET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCTION_START_DATE": {"name": "PRODUCTION_START_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.4957454, "relation_name": "BRONZE.processed.processed_netflix_best_movie_by_year", "raw_code": "SELECT *\n FROM {{ ref('raw_netflix_best_movie_by_year') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["raw_netflix_best_movie_by_year"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_netflix_best_movie_by_year"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_netflix_titles": {"database": "BRONZE", "schema": "processed", "name": "processed_netflix_titles", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/netflix_demo/processed_netflix_titles.sql", "original_file_path": "models/bronze/processed/netflix_demo/processed_netflix_titles.sql", "unique_id": "model.dbt_gx_demo.processed_netflix_titles", "fqn": ["dbt_gx_demo", "bronze", "processed", "netflix_demo", "processed_netflix_titles"], "alias": "processed_netflix_titles", "checksum": {"name": "sha256", "checksum": "cd654898b4eacafd23f4bba2457808213643a1e1df46b95b8d2e556b5e01c016"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AGE_CERTIFICATION": {"name": "AGE_CERTIFICATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNTIME": {"name": "RUNTIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GENRES": {"name": "GENRES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.5188515, "relation_name": "BRONZE.processed.processed_netflix_titles", "raw_code": "SELECT *\n FROM {{ ref('raw_netflix_titles') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["raw_netflix_titles"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_netflix_titles"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_netflix_dataset_movie": {"database": "BRONZE", "schema": "processed", "name": "processed_netflix_dataset_movie", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/netflix_demo/processed_netflix_dataset_movie.sql", "original_file_path": "models/bronze/processed/netflix_demo/processed_netflix_dataset_movie.sql", "unique_id": "model.dbt_gx_demo.processed_netflix_dataset_movie", "fqn": ["dbt_gx_demo", "bronze", "processed", "netflix_demo", "processed_netflix_dataset_movie"], "alias": "processed_netflix_dataset_movie", "checksum": {"name": "sha256", "checksum": "615cc6c6ea4a11e49a97b6ce21375177e163ba2d12794beab4e16a6e137732c6"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "netflix_demo"], "description": "", "columns": {"MOVIE_ID": {"name": "MOVIE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "YEAR": {"name": "YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.509416, "relation_name": "BRONZE.processed.processed_netflix_dataset_movie", "raw_code": "SELECT *\n FROM  {{ ref('raw_netflix_dataset_movie') }}  NETFLIX_DATASET_MOVIE", "language": "sql", "refs": [["raw_netflix_dataset_movie"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_netflix_dataset_movie"]}, "compiled_path": null}, "model.dbt_gx_demo.processed_netflix_best_movie": {"database": "BRONZE", "schema": "processed", "name": "processed_netflix_best_movie", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/processed/netflix_demo/processed_netflix_best_movie.sql", "original_file_path": "models/bronze/processed/netflix_demo/processed_netflix_best_movie.sql", "unique_id": "model.dbt_gx_demo.processed_netflix_best_movie", "fqn": ["dbt_gx_demo", "bronze", "processed", "netflix_demo", "processed_netflix_best_movie"], "alias": "processed_netflix_best_movie", "checksum": {"name": "sha256", "checksum": "c1be8d8c800b3d5ddeec19ce414a31a65d6dac02398ee87c4489a5fa025fdc41"}, "config": {"enabled": true, "alias": null, "schema": "processed", "database": null, "tags": ["processed", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["processed", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_VOTES": {"name": "NUMBER_OF_VOTES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DURATION": {"name": "DURATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/processed/processed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "processed", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.4914007, "relation_name": "BRONZE.processed.processed_netflix_best_movie", "raw_code": "SELECT *\n FROM {{ ref('raw_netflix_best_movie') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["raw_netflix_best_movie"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_netflix_best_movie"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_transactions": {"database": "BRONZE", "schema": "raw", "name": "raw_transactions", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/sales_demo/raw_transactions.sql", "original_file_path": "models/bronze/demo_build/sales_demo/raw_transactions.sql", "unique_id": "model.dbt_gx_demo.raw_transactions", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "sales_demo", "raw_transactions"], "alias": "raw_transactions", "checksum": {"name": "sha256", "checksum": "4fe23d76d50f66d001eba397b3a2803b13b93c6c73bbe561b9d101772802ec30"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3334801, "relation_name": "BRONZE.raw.raw_transactions", "raw_code": "SELECT\n    b.O_ORDERKEY AS ORDER_ID,\n    b.O_CUSTKEY AS CUSTOMER_ID,\n    b.O_ORDERDATE AS ORDER_DATE,\n    DATEADD(DAY, 20, b.O_ORDERDATE) AS TRANSACTION_DATE,\n    TO_NUMBER(RPAD(CONCAT(b.O_ORDERKEY, b.O_CUSTKEY, TO_CHAR(b.O_ORDERDATE, 'YYYYMMDD')),  24, '0')) AS TRANSACTION_NUMBER,\n    b.O_TOTALPRICE AS AMOUNT,\n    CAST(\n    CASE ABS(MOD(RANDOM(1), 2)) + 1\n        WHEN 1 THEN 'DR'\n        WHEN 2 THEN 'CR'\n    END AS VARCHAR(2)) AS TYPE,\n    CURRENT_TIMESTAMP() AS LOAD_DATE_TIMESTAMP\nFROM {{ source('tpch_sample', 'ORDERS') }}  AS b\nLEFT JOIN {{ source('tpch_sample', 'CUSTOMER') }} AS c\n    ON b.O_CUSTKEY = c.C_CUSTKEY\nWHERE b.O_ORDERDATE = TO_DATE('{{ var('load_date') }}')", "language": "sql", "refs": [], "sources": [["tpch_sample", "ORDERS"], ["tpch_sample", "CUSTOMER"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.tpch_sample.ORDERS", "source.dbt_gx_demo.tpch_sample.CUSTOMER"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_customer_info": {"database": "BRONZE", "schema": "raw", "name": "raw_customer_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/sales_demo/raw_customer_info.sql", "original_file_path": "models/bronze/demo_build/sales_demo/raw_customer_info.sql", "unique_id": "model.dbt_gx_demo.raw_customer_info", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "sales_demo", "raw_customer_info"], "alias": "raw_customer_info", "checksum": {"name": "sha256", "checksum": "ebb45fb483d1f68634d5c7d628f4129656c26dd83ec4d6dbae65bdeea8244b25"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3404737, "relation_name": "BRONZE.raw.raw_customer_info", "raw_code": "SELECT \n    cust.C_CUSTOMER_SK,\n    cust.C_CUSTOMER_ID,\n    cust.C_SALUTATION,\n    cust.C_FIRST_NAME,\n    cust.C_LAST_NAME,\n    cust.C_BIRTH_DAY,\n    cust.C_BIRTH_YEAR,\n    cust.C_EMAIL_ADDRESS,\n    cust.C_LOGIN,\n    addr.CA_ADDRESS_ID,\n    addr.CA_STREET_NUMBER,\n    addr.CA_STREET_TYPE,\n    addr.CA_SUITE_NUMBER,\n    addr.CA_CITY,\n    addr.CA_COUNTY,\n    addr.CA_STATE,\n    addr.CA_ZIP,\n    addr.CA_COUNTRY,\n    addr.CA_GMT_OFFSET,\n    addr.CA_LOCATION_TYPE,\n    demo.CD_GENDER,\n    demo.CD_MARITAL_STATUS,\n    demo.CD_EDUCATION_STATUS,\n    demo.CD_PURCHASE_ESTIMATE,\n    demo.CD_CREDIT_RATING,\n    demo.CD_DEP_COUNT,\n    CURRENT_TIMESTAMP() AS LOAD_DATE_TIMESTAMP\n FROM {{ source('tpcds_sample', 'CUSTOMER') }}  cust\n INNER JOIN {{ source('tpcds_sample', 'CUSTOMER_ADDRESS') }}  addr\nON cust.C_CURRENT_ADDR_SK = CA_ADDRESS_SK\nINNER JOIN {{ source('tpcds_sample', 'CUSTOMER_DEMOGRAPHICS') }}  demo\nON cust.C_CURRENT_CDEMO_SK = CD_DEMO_SK", "language": "sql", "refs": [], "sources": [["tpcds_sample", "CUSTOMER_ADDRESS"], ["tpcds_sample", "CUSTOMER_DEMOGRAPHICS"], ["tpcds_sample", "CUSTOMER"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.tpcds_sample.CUSTOMER_ADDRESS", "source.dbt_gx_demo.tpcds_sample.CUSTOMER_DEMOGRAPHICS", "source.dbt_gx_demo.tpcds_sample.CUSTOMER"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_orders": {"database": "BRONZE", "schema": "raw", "name": "raw_orders", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/sales_demo/raw_orders.sql", "original_file_path": "models/bronze/demo_build/sales_demo/raw_orders.sql", "unique_id": "model.dbt_gx_demo.raw_orders", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "sales_demo", "raw_orders"], "alias": "raw_orders", "checksum": {"name": "sha256", "checksum": "42b47d9d3b13192d29e7126ca9782fb102e751c33d0718405d443adfbf1ef273"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3435428, "relation_name": "BRONZE.raw.raw_orders", "raw_code": "SELECT\n    a.L_ORDERKEY AS ORDERKEY,\n    a.L_PARTKEY AS PARTKEY ,\n    a.L_SUPPKEY AS SUPPLIERKEY,\n    a.L_LINENUMBER AS LINENUMBER,\n    a.L_QUANTITY AS QUANTITY,\n    a.L_EXTENDEDPRICE AS EXTENDEDPRICE,\n    a.L_DISCOUNT AS DISCOUNT,\n    a.L_TAX AS TAX,\n    a.L_RETURNFLAG AS RETURNFLAG,\n    a.L_LINESTATUS AS LINESTATUS,\n    a.L_SHIPDATE AS SHIPDATE,\n    a.L_COMMITDATE AS COMMITDATE,\n    a.L_RECEIPTDATE AS RECEIPTDATE,\n    a.L_SHIPINSTRUCT AS SHIPINSTRUCT,\n    a.L_SHIPMODE AS SHIPMODE,\n    a.L_COMMENT AS LINE_COMMENT,\n    b.O_CUSTKEY AS CUSTOMERKEY,\n    b.O_ORDERSTATUS AS ORDERSTATUS,\n    b.O_TOTALPRICE AS TOTALPRICE,\n    b.O_ORDERDATE AS ORDERDATE,\n    b.O_ORDERPRIORITY AS ORDERPRIORITY,\n    b.O_CLERK AS CLERK,\n    b.O_SHIPPRIORITY AS SHIPPRIORITY,\n    b.O_COMMENT AS ORDER_COMMENT,\n    c.C_NAME AS CUSTOMER_NAME,\n    c.C_ADDRESS AS CUSTOMER_ADDRESS,\n    c.C_NATIONKEY AS CUSTOMER_NATION_KEY,\n    c.C_PHONE AS CUSTOMER_PHONE,\n    c.C_ACCTBAL AS CUSTOMER_ACCBAL,\n    c.C_MKTSEGMENT AS CUSTOMER_MKTSEGMENT,\n    c.C_COMMENT AS CUSTOMER_COMMENT,\n    d.N_NAME AS CUSTOMER_NATION_NAME,\n    d.N_REGIONKEY AS CUSTOMER_REGION_KEY,\n    d.N_COMMENT AS CUSTOMER_NATION_COMMENT,\n    e.R_NAME AS CUSTOMER_REGION_NAME,\n    e.R_COMMENT AS CUSTOMER_REGION_COMMENT,\n    CURRENT_TIMESTAMP() AS LOAD_DATE_TIMESTAMP\nFROM {{ source('tpch_sample', 'ORDERS') }} AS b\nLEFT JOIN {{ source('tpch_sample', 'LINEITEM') }} AS a\n    ON a.L_ORDERKEY = b.O_ORDERKEY\nLEFT JOIN {{ source('tpch_sample', 'CUSTOMER') }} AS c\n    ON b.O_CUSTKEY  = c.C_CUSTKEY\nLEFT JOIN {{ source('tpch_sample', 'NATION') }} AS d\n    ON c.C_NATIONKEY  = d.N_NATIONKEY\nLEFT JOIN {{ source('tpch_sample', 'REGION') }} AS e\n    ON d.N_REGIONKEY  = e.R_REGIONKEY\nLEFT JOIN {{ source('tpch_sample', 'PART') }} AS g\n    ON a.L_PARTKEY = g.P_PARTKEY\nLEFT JOIN {{ source('tpch_sample', 'SUPPLIER') }} AS h\n    ON a.L_SUPPKEY = h.S_SUPPKEY\nLEFT JOIN {{ source('tpch_sample', 'NATION') }} AS j\n    ON h.S_NATIONKEY = j.N_NATIONKEY\nLEFT JOIN {{ source('tpch_sample', 'REGION') }} AS k\n    ON j.N_REGIONKEY = k.R_REGIONKEY\nWHERE b.O_ORDERDATE = TO_DATE('{{ var('load_date') }}')", "language": "sql", "refs": [], "sources": [["tpch_sample", "ORDERS"], ["tpch_sample", "LINEITEM"], ["tpch_sample", "CUSTOMER"], ["tpch_sample", "NATION"], ["tpch_sample", "REGION"], ["tpch_sample", "PART"], ["tpch_sample", "SUPPLIER"], ["tpch_sample", "NATION"], ["tpch_sample", "REGION"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.tpch_sample.ORDERS", "source.dbt_gx_demo.tpch_sample.LINEITEM", "source.dbt_gx_demo.tpch_sample.CUSTOMER", "source.dbt_gx_demo.tpch_sample.NATION", "source.dbt_gx_demo.tpch_sample.REGION", "source.dbt_gx_demo.tpch_sample.PART", "source.dbt_gx_demo.tpch_sample.SUPPLIER", "source.dbt_gx_demo.tpch_sample.NATION", "source.dbt_gx_demo.tpch_sample.REGION"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_inventory": {"database": "BRONZE", "schema": "raw", "name": "raw_inventory", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/sales_demo/raw_inventory.sql", "original_file_path": "models/bronze/demo_build/sales_demo/raw_inventory.sql", "unique_id": "model.dbt_gx_demo.raw_inventory", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "sales_demo", "raw_inventory"], "alias": "raw_inventory", "checksum": {"name": "sha256", "checksum": "73d87e992d96beac124620db0e18140e3028cef7920ee46debe7dfdf198acd3f"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3528097, "relation_name": "BRONZE.raw.raw_inventory", "raw_code": "SELECT\n    a.PS_PARTKEY AS PARTKEY,\n    a.PS_SUPPKEY AS SUPPLIERKEY,\n    a.PS_AVAILQTY AS AVAILQTY,\n    a.PS_SUPPLYCOST AS SUPPLYCOST,\n    a.PS_COMMENT AS PART_SUPPLY_COMMENT,\n    b.S_NAME AS SUPPLIER_NAME,\n    b.S_ADDRESS AS SUPPLIER_ADDRESS,\n    b.S_NATIONKEY AS SUPPLIER_NATION_KEY,\n    b.S_PHONE AS SUPPLIER_PHONE,\n    b.S_ACCTBAL AS SUPPLIER_ACCTBAL,\n    b.S_COMMENT AS SUPPLIER_COMMENT,\n    c.P_NAME AS PART_NAME,\n    c.P_MFGR AS PART_MFGR,\n    c.P_BRAND AS PART_BRAND,\n    c.P_TYPE AS PART_TYPE,\n    c.P_SIZE AS PART_SIZE,\n    c.P_CONTAINER AS PART_CONTAINER,\n    c.P_RETAILPRICE AS PART_RETAILPRICE,\n    c.P_COMMENT AS PART_COMMENT,\n    d.N_NAME AS SUPPLIER_NATION_NAME,\n    d.N_COMMENT AS SUPPLIER_NATION_COMMENT,\n    d.N_REGIONKEY AS SUPPLIER_REGION_KEY,\n    e.R_NAME AS SUPPLIER_REGION_NAME,\n    e.R_COMMENT AS SUPPLIER_REGION_COMMENT,\n    CURRENT_TIMESTAMP() AS LOAD_DATE_TIMESTAMP\nFROM {{ source('tpch_sample', 'PARTSUPP') }} AS a\nLEFT JOIN {{ source('tpch_sample', 'SUPPLIER') }} AS b\n    ON a.PS_SUPPKEY = b.S_SUPPKEY\nLEFT JOIN {{ source('tpch_sample', 'PART') }} AS c\n    ON a.PS_PARTKEY = c.P_PARTKEY\nLEFT JOIN {{ source('tpch_sample', 'NATION') }} AS d\n    ON b.S_NATIONKEY = d.N_NATIONKEY\nLEFT JOIN {{ source('tpch_sample', 'REGION') }} AS e\n    ON d.N_REGIONKEY = e.R_REGIONKEY\nJOIN {{ ref('raw_orders') }} AS f\n    ON a.PS_PARTKEY = f.PARTKEY AND a.PS_SUPPKEY=f.SUPPLIERKEY\nORDER BY a.PS_PARTKEY, a.PS_SUPPKEY", "language": "sql", "refs": [["raw_orders"]], "sources": [["tpch_sample", "SUPPLIER"], ["tpch_sample", "NATION"], ["tpch_sample", "PART"], ["tpch_sample", "REGION"], ["tpch_sample", "PARTSUPP"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.tpch_sample.SUPPLIER", "source.dbt_gx_demo.tpch_sample.NATION", "source.dbt_gx_demo.tpch_sample.PART", "source.dbt_gx_demo.tpch_sample.REGION", "source.dbt_gx_demo.tpch_sample.PARTSUPP", "model.dbt_gx_demo.raw_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_flight_info": {"database": "BRONZE", "schema": "raw", "name": "raw_flight_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/flight_demo/raw_flight_info.sql", "original_file_path": "models/bronze/demo_build/flight_demo/raw_flight_info.sql", "unique_id": "model.dbt_gx_demo.raw_flight_info", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "flight_demo", "raw_flight_info"], "alias": "raw_flight_info", "checksum": {"name": "sha256", "checksum": "48d550fae6e35b342c19950e2a95432150975c97e952083c9efb96d932e94cae"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3561556, "relation_name": "BRONZE.raw.raw_flight_info", "raw_code": "SELECT *\n FROM {{ source('DEMO', 'FLIGHT') }}  FLIGHT", "language": "sql", "refs": [], "sources": [["DEMO", "FLIGHT"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.DEMO.FLIGHT"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_airline_info": {"database": "BRONZE", "schema": "raw", "name": "raw_airline_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/flight_demo/raw_airline_info.sql", "original_file_path": "models/bronze/demo_build/flight_demo/raw_airline_info.sql", "unique_id": "model.dbt_gx_demo.raw_airline_info", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "flight_demo", "raw_airline_info"], "alias": "raw_airline_info", "checksum": {"name": "sha256", "checksum": "334aae25b087f820a3a35e82117027ea514f3ad88e319cdd7cfa2b48967adabb"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3591056, "relation_name": "BRONZE.raw.raw_airline_info", "raw_code": "SELECT *\n FROM {{ source('DEMO', 'AIRLINE') }}  AIRLINE", "language": "sql", "refs": [], "sources": [["DEMO", "AIRLINE"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.DEMO.AIRLINE"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_airport_info": {"database": "BRONZE", "schema": "raw", "name": "raw_airport_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/flight_demo/raw_airport_info.sql", "original_file_path": "models/bronze/demo_build/flight_demo/raw_airport_info.sql", "unique_id": "model.dbt_gx_demo.raw_airport_info", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "flight_demo", "raw_airport_info"], "alias": "raw_airport_info", "checksum": {"name": "sha256", "checksum": "92984f0a74b1069d262334348c858dcf408b3daa2c1661f1e0452db08fa60e92"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.362032, "relation_name": "BRONZE.raw.raw_airport_info", "raw_code": "SELECT *\n FROM {{ source('DEMO', 'AIRPORT') }}  AIRPORT", "language": "sql", "refs": [], "sources": [["DEMO", "AIRPORT"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.DEMO.AIRPORT"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_netflix_best_show_by_year": {"database": "BRONZE", "schema": "raw", "name": "raw_netflix_best_show_by_year", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/netflix_demo/raw_netflix_best_show_by_year.sql", "original_file_path": "models/bronze/demo_build/netflix_demo/raw_netflix_best_show_by_year.sql", "unique_id": "model.dbt_gx_demo.raw_netflix_best_show_by_year", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "netflix_demo", "raw_netflix_best_show_by_year"], "alias": "raw_netflix_best_show_by_year", "checksum": {"name": "sha256", "checksum": "aeb53149a9bb47c676fd890f61a7ffa35dc50f39c1e4e71f5e67fd42c3568726"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3648365, "relation_name": "BRONZE.raw.raw_netflix_best_show_by_year", "raw_code": "SELECT *\n FROM {{ source('NETFLIX', 'NETFLIX_BEST_SHOW_BY_YEAR') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [], "sources": [["NETFLIX", "NETFLIX_BEST_SHOW_BY_YEAR"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW_BY_YEAR"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_netflix_originals": {"database": "BRONZE", "schema": "raw", "name": "raw_netflix_originals", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/netflix_demo/raw_netflix_originals.sql", "original_file_path": "models/bronze/demo_build/netflix_demo/raw_netflix_originals.sql", "unique_id": "model.dbt_gx_demo.raw_netflix_originals", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "netflix_demo", "raw_netflix_originals"], "alias": "raw_netflix_originals", "checksum": {"name": "sha256", "checksum": "884f80f29c68cd6934b968ad3fb4a68c5de1ed119cc7995bc46cd6a96d15d6be"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3677292, "relation_name": "BRONZE.raw.raw_netflix_originals", "raw_code": "SELECT *\n FROM {{ source('NETFLIX', 'NETFLIX_ORIGINALS') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [], "sources": [["NETFLIX", "NETFLIX_ORIGINALS"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.NETFLIX.NETFLIX_ORIGINALS"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_netflix_dataset_rating": {"database": "BRONZE", "schema": "raw", "name": "raw_netflix_dataset_rating", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/netflix_demo/raw_netflix_dataset_rating.sql", "original_file_path": "models/bronze/demo_build/netflix_demo/raw_netflix_dataset_rating.sql", "unique_id": "model.dbt_gx_demo.raw_netflix_dataset_rating", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "netflix_demo", "raw_netflix_dataset_rating"], "alias": "raw_netflix_dataset_rating", "checksum": {"name": "sha256", "checksum": "af304474ed445279ea9f8f3f24fc79f69d02728ad434f5c632a79bbdd1c4811a"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.370565, "relation_name": "BRONZE.raw.raw_netflix_dataset_rating", "raw_code": "SELECT *\n FROM {{ source('NETFLIX', 'NETFLIX_DATASET_RATING') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [], "sources": [["NETFLIX", "NETFLIX_DATASET_RATING"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_RATING"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_netflix_credits": {"database": "BRONZE", "schema": "raw", "name": "raw_netflix_credits", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/netflix_demo/raw_netflix_credits.sql", "original_file_path": "models/bronze/demo_build/netflix_demo/raw_netflix_credits.sql", "unique_id": "model.dbt_gx_demo.raw_netflix_credits", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "netflix_demo", "raw_netflix_credits"], "alias": "raw_netflix_credits", "checksum": {"name": "sha256", "checksum": "2b9ed29424e59bef70cab49b1d459f34ca613e9871b57be157cee3c668691e81"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3736334, "relation_name": "BRONZE.raw.raw_netflix_credits", "raw_code": "SELECT *\n FROM {{ source('NETFLIX', 'NETFLIX_RAW_CREDITS') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [], "sources": [["NETFLIX", "NETFLIX_RAW_CREDITS"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_CREDITS"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_netflix_best_show": {"database": "BRONZE", "schema": "raw", "name": "raw_netflix_best_show", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/netflix_demo/raw_netflix_best_show.sql", "original_file_path": "models/bronze/demo_build/netflix_demo/raw_netflix_best_show.sql", "unique_id": "model.dbt_gx_demo.raw_netflix_best_show", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "netflix_demo", "raw_netflix_best_show"], "alias": "raw_netflix_best_show", "checksum": {"name": "sha256", "checksum": "cdb6e371a75aefdb43fa5f70fddb333ad141542ce3451e2fdfd0b1cce8ba1f76"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3763976, "relation_name": "BRONZE.raw.raw_netflix_best_show", "raw_code": "SELECT *\n FROM {{ source('NETFLIX', 'NETFLIX_BEST_SHOW') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [], "sources": [["NETFLIX", "NETFLIX_BEST_SHOW"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_netflix_titles": {"database": "BRONZE", "schema": "raw", "name": "raw_netflix_titles", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/netflix_demo/raw_netflix_titles.sql", "original_file_path": "models/bronze/demo_build/netflix_demo/raw_netflix_titles.sql", "unique_id": "model.dbt_gx_demo.raw_netflix_titles", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "netflix_demo", "raw_netflix_titles"], "alias": "raw_netflix_titles", "checksum": {"name": "sha256", "checksum": "dbde10a05b98b08464262d8eaf5454155b4df6f49e1ed4f05096e5d213a886a4"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.379241, "relation_name": "BRONZE.raw.raw_netflix_titles", "raw_code": "SELECT *\n FROM {{ source('NETFLIX', 'NETFLIX_RAW_TITLES') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [], "sources": [["NETFLIX", "NETFLIX_RAW_TITLES"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_TITLES"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_netflix_dataset_movie": {"database": "BRONZE", "schema": "raw", "name": "raw_netflix_dataset_movie", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/netflix_demo/raw_netflix_dataset_movie.sql", "original_file_path": "models/bronze/demo_build/netflix_demo/raw_netflix_dataset_movie.sql", "unique_id": "model.dbt_gx_demo.raw_netflix_dataset_movie", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "netflix_demo", "raw_netflix_dataset_movie"], "alias": "raw_netflix_dataset_movie", "checksum": {"name": "sha256", "checksum": "817ebe15f49dc8097be8bbeb4918e9b2e7f7d6f4fd5f7e2ff0a66c7e487a28b9"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3820105, "relation_name": "BRONZE.raw.raw_netflix_dataset_movie", "raw_code": "SELECT *\n FROM  {{ source('NETFLIX', 'NETFLIX_DATASET_MOVIE') }}  NETFLIX_DATASET_MOVIE", "language": "sql", "refs": [], "sources": [["NETFLIX", "NETFLIX_DATASET_MOVIE"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_MOVIE"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_netflix_best_movie": {"database": "BRONZE", "schema": "raw", "name": "raw_netflix_best_movie", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/netflix_demo/raw_netflix_best_movie.sql", "original_file_path": "models/bronze/demo_build/netflix_demo/raw_netflix_best_movie.sql", "unique_id": "model.dbt_gx_demo.raw_netflix_best_movie", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "netflix_demo", "raw_netflix_best_movie"], "alias": "raw_netflix_best_movie", "checksum": {"name": "sha256", "checksum": "856c1c568b4d65b0f5392d401a223a6a18a8761694aa63b3baac5ede98fd5bd0"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.384837, "relation_name": "BRONZE.raw.raw_netflix_best_movie", "raw_code": "SELECT *\n FROM {{ source('NETFLIX', 'NETFLIX_BEST_MOVIE') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [], "sources": [["NETFLIX", "NETFLIX_BEST_MOVIE"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE"]}, "compiled_path": null}, "model.dbt_gx_demo.raw_netflix_best_movie_by_year": {"database": "BRONZE", "schema": "raw", "name": "raw_netflix_best_movie_by_year", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/demo_build/netflix_demo/raw_netflix_best_movie_by_year.sql", "original_file_path": "models/bronze/demo_build/netflix_demo/raw_netflix_best_movie_by_year.sql", "unique_id": "model.dbt_gx_demo.raw_netflix_best_movie_by_year", "fqn": ["dbt_gx_demo", "bronze", "demo_build", "netflix_demo", "raw_netflix_best_movie_by_year"], "alias": "raw_netflix_best_movie_by_year", "checksum": {"name": "sha256", "checksum": "ffea88f32f4b3debfa6fd5341468b011c622862adce7b9e27176117a2245428f"}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": ["demo_build"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["demo_build"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "materialized": "table", "tags": ["demo_build"]}, "created_at": 1695341476.3878894, "relation_name": "BRONZE.raw.raw_netflix_best_movie_by_year", "raw_code": "SELECT *\n FROM {{ source('NETFLIX', 'NETFLIX_BEST_MOVIE_BY_YEAR') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [], "sources": [["NETFLIX", "NETFLIX_BEST_MOVIE_BY_YEAR"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE_BY_YEAR"]}, "compiled_path": null}, "model.dbt_gx_demo.get_order": {"database": "BRONZE", "schema": "LANDING", "name": "get_order", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/poc/get_order.sql", "original_file_path": "models/bronze/poc/get_order.sql", "unique_id": "model.dbt_gx_demo.get_order", "fqn": ["dbt_gx_demo", "bronze", "poc", "get_order"], "alias": "get_order", "checksum": {"name": "sha256", "checksum": "b9989b37528183e662f9a1cc2a19982cab670eecf6da14f366883b772a94f35b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341476.3906357, "relation_name": "BRONZE.LANDING.get_order", "raw_code": "SELECT\n    ORDERKEY\n\nFROM {{ ref('raw_orders') }} AS b", "language": "sql", "refs": [["raw_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_gx_demo.raw_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.failures": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "failures", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/dbt/failures.sql", "original_file_path": "models/bronze/dbt/failures.sql", "unique_id": "model.dbt_gx_demo.failures", "fqn": ["dbt_gx_demo", "bronze", "dbt", "failures"], "alias": "failures", "checksum": {"name": "sha256", "checksum": "3d381055ec33e86ff9474974a47167e88d88a007002dbee283f2798fcf93acb5"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": "BRONZE", "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "result_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "result_id", "database": "BRONZE", "schema": "OBSERVABILITY"}, "created_at": 1695341476.3931835, "relation_name": "BRONZE.OBSERVABILITY.failures", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    transient = False,\n    unique_key = 'result_id',\n    database = 'BRONZE',\n    schema = 'OBSERVABILITY'\n  )\n}}\n\nwith empty_table as (\n    select\n        null as result_id,\n        null as invocation_id,\n        null as unique_id,\n        null as database_name,\n        null as schema_name,\n        null as name,\n        null as resource_type,\n        null as status,\n        cast(null as float) as execution_time,\n        cast(null as int) as rows_affected,\n        null as error_message\n)\n\nselect * from empty_table\n-- This is a filter so we will never actually insert these values\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.dbt_gx_demo.stg_customer_info": {"database": "BRONZE", "schema": "stage", "name": "stg_customer_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/sales_demo/stg_customer_info.sql", "original_file_path": "models/bronze/staging/sales_demo/stg_customer_info.sql", "unique_id": "model.dbt_gx_demo.stg_customer_info", "fqn": ["dbt_gx_demo", "bronze", "staging", "sales_demo", "stg_customer_info"], "alias": "stg_customer_info", "checksum": {"name": "sha256", "checksum": "9a83d054d4ada289541b60d3faa36fab5ce5f4cb2b2dbc2f9a1c5b66415038ab"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "sales_demo", "staging_sales_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "sales_demo", "staging_sales_demo"], "description": "", "columns": {"C_CUSTOMER_SK": {"name": "C_CUSTOMER_SK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_CUSTOMER_ID": {"name": "C_CUSTOMER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_SALUTATION": {"name": "C_SALUTATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_FIRST_NAME": {"name": "C_FIRST_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_LAST_NAME": {"name": "C_LAST_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_BIRTH_DAY": {"name": "C_BIRTH_DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_BIRTH_YEAR": {"name": "C_BIRTH_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_EMAIL_ADDRESS": {"name": "C_EMAIL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_LOGIN": {"name": "C_LOGIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_ADDRESS_ID": {"name": "CA_ADDRESS_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_STREET_NUMBER": {"name": "CA_STREET_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_STREET_TYPE": {"name": "CA_STREET_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_SUITE_NUMBER": {"name": "CA_SUITE_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_CITY": {"name": "CA_CITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_COUNTY": {"name": "CA_COUNTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_STATE": {"name": "CA_STATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_ZIP": {"name": "CA_ZIP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_COUNTRY": {"name": "CA_COUNTRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_GMT_OFFSET": {"name": "CA_GMT_OFFSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_LOCATION_TYPE": {"name": "CA_LOCATION_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_GENDER": {"name": "CD_GENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_MARITAL_STATUS": {"name": "CD_MARITAL_STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_EDUCATION_STATUS": {"name": "CD_EDUCATION_STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_PURCHASE_ESTIMATE": {"name": "CD_PURCHASE_ESTIMATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_CREDIT_RATING": {"name": "CD_CREDIT_RATING", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_DEP_COUNT": {"name": "CD_DEP_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["sales_demo", "staging_sales_demo"]}, "created_at": 1695341478.8329675, "relation_name": "BRONZE.stage.stg_customer_info", "raw_code": "SELECT \n    C_CUSTOMER_SK,\n    C_CUSTOMER_ID,\n    C_SALUTATION,\n    C_FIRST_NAME,\n    C_LAST_NAME,\n    C_BIRTH_DAY,\n    C_BIRTH_YEAR,\n    C_EMAIL_ADDRESS,\n    C_LOGIN,\n    CA_ADDRESS_ID,\n    CA_STREET_NUMBER,\n    CA_STREET_TYPE,\n    CA_SUITE_NUMBER,\n    CA_CITY,\n    CA_COUNTY,\n    CA_STATE,\n    CA_ZIP,\n    CA_COUNTRY,\n    CA_GMT_OFFSET,\n    CA_LOCATION_TYPE,\n    CD_GENDER,\n    CD_MARITAL_STATUS,\n    CD_EDUCATION_STATUS,\n    CD_PURCHASE_ESTIMATE,\n    CD_CREDIT_RATING,\n    CD_DEP_COUNT,\n    LOAD_DATE_TIMESTAMP\nFROM {{ ref('processed_customer_info') }}", "language": "sql", "refs": [["processed_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_customer_info"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_transactions": {"database": "BRONZE", "schema": "stage", "name": "stg_transactions", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/sales_demo/stg_transactions.sql", "original_file_path": "models/bronze/staging/sales_demo/stg_transactions.sql", "unique_id": "model.dbt_gx_demo.stg_transactions", "fqn": ["dbt_gx_demo", "bronze", "staging", "sales_demo", "stg_transactions"], "alias": "stg_transactions", "checksum": {"name": "sha256", "checksum": "d12b277542f16dfa700a834e63824e0f50d75b3e6dea5aa81fef3416fcba0d04"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "sales_demo", "staging_sales_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "sales_demo", "staging_sales_demo"], "description": "", "columns": {"ORDER_ID": {"name": "ORDER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_ID": {"name": "CUSTOMER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDER_DATE": {"name": "ORDER_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_DATE": {"name": "TRANSACTION_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_NUMBER": {"name": "TRANSACTION_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["sales_demo", "staging_sales_demo"]}, "created_at": 1695341478.8613033, "relation_name": "BRONZE.stage.stg_transactions", "raw_code": "SELECT\n    ORDER_ID,\n    CUSTOMER_ID,\n    ORDER_DATE,\n    TRANSACTION_DATE,\n    TRANSACTION_NUMBER,\n    AMOUNT,\n    TYPE,\n    LOAD_DATE_TIMESTAMP\nFROM {{ ref('processed_transactions') }}  AS b", "language": "sql", "refs": [["processed_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_transactions"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_orders": {"database": "BRONZE", "schema": "stage", "name": "stg_orders", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/sales_demo/stg_orders.sql", "original_file_path": "models/bronze/staging/sales_demo/stg_orders.sql", "unique_id": "model.dbt_gx_demo.stg_orders", "fqn": ["dbt_gx_demo", "bronze", "staging", "sales_demo", "stg_orders"], "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "d51b72f993165ea803bc84b27d19c341e520c7d28b4201ddb0f4d40f18b4e5fb"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "sales_demo", "staging_sales_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "sales_demo", "staging_sales_demo"], "description": "", "columns": {"ORDERKEY": {"name": "ORDERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARTKEY": {"name": "PARTKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIERKEY": {"name": "SUPPLIERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINENUMBER": {"name": "LINENUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QUANTITY": {"name": "QUANTITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTENDEDPRICE": {"name": "EXTENDEDPRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DISCOUNT": {"name": "DISCOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAX": {"name": "TAX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RETURNFLAG": {"name": "RETURNFLAG", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINESTATUS": {"name": "LINESTATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPDATE": {"name": "SHIPDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMMITDATE": {"name": "COMMITDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTDATE": {"name": "RECEIPTDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPINSTRUCT": {"name": "SHIPINSTRUCT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPMODE": {"name": "SHIPMODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINE_COMMENT": {"name": "LINE_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMERKEY": {"name": "CUSTOMERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDERSTATUS": {"name": "ORDERSTATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTALPRICE": {"name": "TOTALPRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDERDATE": {"name": "ORDERDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDERPRIORITY": {"name": "ORDERPRIORITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLERK": {"name": "CLERK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPPRIORITY": {"name": "SHIPPRIORITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDER_COMMENT": {"name": "ORDER_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NAME": {"name": "CUSTOMER_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_ADDRESS": {"name": "CUSTOMER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NATION_KEY": {"name": "CUSTOMER_NATION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_PHONE": {"name": "CUSTOMER_PHONE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_ACCBAL": {"name": "CUSTOMER_ACCBAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_MKTSEGMENT": {"name": "CUSTOMER_MKTSEGMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_COMMENT": {"name": "CUSTOMER_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NATION_NAME": {"name": "CUSTOMER_NATION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_REGION_KEY": {"name": "CUSTOMER_REGION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NATION_COMMENT": {"name": "CUSTOMER_NATION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_REGION_NAME": {"name": "CUSTOMER_REGION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_REGION_COMMENT": {"name": "CUSTOMER_REGION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["sales_demo", "staging_sales_demo"]}, "created_at": 1695341478.8576894, "relation_name": "BRONZE.stage.stg_orders", "raw_code": "SELECT\n    ORDERKEY,\n    PARTKEY ,\n    SUPPLIERKEY,\n    LINENUMBER,\n    QUANTITY,\n    EXTENDEDPRICE,\n    DISCOUNT,\n    TAX,\n    RETURNFLAG,\n    LINESTATUS,\n    SHIPDATE,\n    COMMITDATE,\n    RECEIPTDATE,\n    SHIPINSTRUCT,\n    SHIPMODE,\n    LINE_COMMENT,\n    CUSTOMERKEY,\n    ORDERSTATUS,\n    TOTALPRICE,\n    ORDERDATE,\n    ORDERPRIORITY,\n    CLERK,\n    SHIPPRIORITY,\n    ORDER_COMMENT,\n    CUSTOMER_NAME,\n    CUSTOMER_ADDRESS,\n    CUSTOMER_NATION_KEY,\n    CUSTOMER_PHONE,\n    CUSTOMER_ACCBAL,\n    CUSTOMER_MKTSEGMENT,\n    CUSTOMER_COMMENT,\n    CUSTOMER_NATION_NAME,\n    CUSTOMER_REGION_KEY,\n    CUSTOMER_NATION_COMMENT,\n    CUSTOMER_REGION_NAME,\n    CUSTOMER_REGION_COMMENT,\n    LOAD_DATE_TIMESTAMP\nFROM {{ ref('processed_orders') }} AS b", "language": "sql", "refs": [["processed_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_inventory": {"database": "BRONZE", "schema": "stage", "name": "stg_inventory", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/sales_demo/stg_inventory.sql", "original_file_path": "models/bronze/staging/sales_demo/stg_inventory.sql", "unique_id": "model.dbt_gx_demo.stg_inventory", "fqn": ["dbt_gx_demo", "bronze", "staging", "sales_demo", "stg_inventory"], "alias": "stg_inventory", "checksum": {"name": "sha256", "checksum": "52f1da8f39c476d4fe21f4167333ea73469fa5c2e4788581f97ce467e8769efa"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "sales_demo", "staging_sales_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "sales_demo", "staging_sales_demo"], "description": "", "columns": {"PARTKEY": {"name": "PARTKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIERKEY": {"name": "SUPPLIERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVAILQTY": {"name": "AVAILQTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLYCOST": {"name": "SUPPLYCOST", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_SUPPLY_COMMENT": {"name": "PART_SUPPLY_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NAME": {"name": "SUPPLIER_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_ADDRESS": {"name": "SUPPLIER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NATION_KEY": {"name": "SUPPLIER_NATION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_PHONE": {"name": "SUPPLIER_PHONE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_ACCTBAL": {"name": "SUPPLIER_ACCTBAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_COMMENT": {"name": "SUPPLIER_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_NAME": {"name": "PART_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_MFGR": {"name": "PART_MFGR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_BRAND": {"name": "PART_BRAND", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_TYPE": {"name": "PART_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_SIZE": {"name": "PART_SIZE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_CONTAINER": {"name": "PART_CONTAINER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_RETAILPRICE": {"name": "PART_RETAILPRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_COMMENT": {"name": "PART_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NATION_NAME": {"name": "SUPPLIER_NATION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NATION_COMMENT": {"name": "SUPPLIER_NATION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_REGION_KEY": {"name": "SUPPLIER_REGION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_REGION_NAME": {"name": "SUPPLIER_REGION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_REGION_COMMENT": {"name": "SUPPLIER_REGION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["sales_demo", "staging_sales_demo"]}, "created_at": 1695341478.843384, "relation_name": "BRONZE.stage.stg_inventory", "raw_code": "SELECT\n    PARTKEY,\n    SUPPLIERKEY,\n    AVAILQTY,\n    SUPPLYCOST,\n    PART_SUPPLY_COMMENT,\n    SUPPLIER_NAME,\n    SUPPLIER_ADDRESS,\n    SUPPLIER_NATION_KEY,\n    SUPPLIER_PHONE,\n    SUPPLIER_ACCTBAL,\n    SUPPLIER_COMMENT,\n    PART_NAME,\n    PART_MFGR,\n    PART_BRAND,\n    PART_TYPE,\n    PART_SIZE,\n    PART_CONTAINER,\n    PART_RETAILPRICE,\n    PART_COMMENT,\n    SUPPLIER_NATION_NAME,\n    SUPPLIER_NATION_COMMENT,\n    SUPPLIER_REGION_KEY,\n    SUPPLIER_REGION_NAME,\n    SUPPLIER_REGION_COMMENT,\n    LOAD_DATE_TIMESTAMP\nFROM {{ ref('processed_inventory') }}", "language": "sql", "refs": [["processed_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_flight_info": {"database": "BRONZE", "schema": "stage", "name": "stg_flight_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/flight_demo/stg_flight_info.sql", "original_file_path": "models/bronze/staging/flight_demo/stg_flight_info.sql", "unique_id": "model.dbt_gx_demo.stg_flight_info", "fqn": ["dbt_gx_demo", "bronze", "staging", "flight_demo", "stg_flight_info"], "alias": "stg_flight_info", "checksum": {"name": "sha256", "checksum": "4eccb1dfcd72440f8d52040e97995ebeaded2a9de91179a193eaf9d75817ebea"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "flight_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "flight_demo"], "description": "", "columns": {"YEAR": {"name": "YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH": {"name": "MONTH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY_OF_WEEK": {"name": "DAY_OF_WEEK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRLINE": {"name": "AIRLINE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FLIGHT_NUMBER": {"name": "FLIGHT_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAIL_NUMBER": {"name": "TAIL_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_AIRPORT": {"name": "ORIGIN_AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESTINATION_AIRPORT": {"name": "DESTINATION_AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_DEPARTURE": {"name": "SCHEDULE_DEPARTURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPARTURE_TIME": {"name": "DEPARTURE_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPARTURE_DELAY": {"name": "DEPARTURE_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAXI_OUT": {"name": "TAXI_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WHEELS_OFF": {"name": "WHEELS_OFF", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_TIME": {"name": "SCHEDULE_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ELAPSED_TIME": {"name": "ELAPSED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIR_TIME": {"name": "AIR_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DISTANCE": {"name": "DISTANCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WHEELS_ON": {"name": "WHEELS_ON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAXI_IN": {"name": "TAXI_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_ARRIVAL": {"name": "SCHEDULE_ARRIVAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARRIVAL_TIME": {"name": "ARRIVAL_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARRIVAL_DELAY": {"name": "ARRIVAL_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIVERTED": {"name": "DIVERTED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CANCELLED": {"name": "CANCELLED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CANCELLATION_REASON": {"name": "CANCELLATION_REASON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIR_SYSTEM_DELAY": {"name": "AIR_SYSTEM_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SECURITY_DELAY": {"name": "SECURITY_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRLINE_DELAY": {"name": "AIRLINE_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LATE_AIRCRAFT_DELAY": {"name": "LATE_AIRCRAFT_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEATHER_DELAY": {"name": "WEATHER_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["flight_demo"]}, "created_at": 1695341478.9089315, "relation_name": "BRONZE.stage.stg_flight_info", "raw_code": "SELECT *\n FROM {{ ref('processed_flight_info') }}  FLIGHT", "language": "sql", "refs": [["processed_flight_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_flight_info"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_airline_info": {"database": "BRONZE", "schema": "stage", "name": "stg_airline_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/flight_demo/stg_airline_info.sql", "original_file_path": "models/bronze/staging/flight_demo/stg_airline_info.sql", "unique_id": "model.dbt_gx_demo.stg_airline_info", "fqn": ["dbt_gx_demo", "bronze", "staging", "flight_demo", "stg_airline_info"], "alias": "stg_airline_info", "checksum": {"name": "sha256", "checksum": "8cbaf5b292823b3368a3a789a2db73d8c0d64dbc1d855ab85787a1cf8ff798e0"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "flight_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "flight_demo"], "description": "", "columns": {"IATA_CODE": {"name": "IATA_CODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRLINE": {"name": "AIRLINE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["flight_demo"]}, "created_at": 1695341478.8932784, "relation_name": "BRONZE.stage.stg_airline_info", "raw_code": "SELECT *\n FROM {{ ref('processed_airline_info') }}   AIRLINE", "language": "sql", "refs": [["processed_airline_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_airline_info"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_airport_info": {"database": "BRONZE", "schema": "stage", "name": "stg_airport_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/flight_demo/stg_airport_info.sql", "original_file_path": "models/bronze/staging/flight_demo/stg_airport_info.sql", "unique_id": "model.dbt_gx_demo.stg_airport_info", "fqn": ["dbt_gx_demo", "bronze", "staging", "flight_demo", "stg_airport_info"], "alias": "stg_airport_info", "checksum": {"name": "sha256", "checksum": "d967909d3b7dc0ab4590a3f71c48d66f721935db00c65bc59ffa0fcc79644932"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "flight_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "flight_demo"], "description": "", "columns": {"AIRPORT": {"name": "AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CITY": {"name": "CITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATE": {"name": "STATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY": {"name": "COUNTRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LATITUDE": {"name": "LATITUDE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["flight_demo"]}, "created_at": 1695341478.8963954, "relation_name": "BRONZE.stage.stg_airport_info", "raw_code": "SELECT *\n FROM {{ ref('processed_airport_info') }}  AIRPORT", "language": "sql", "refs": [["processed_airport_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_airport_info"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_netflix_originals": {"database": "BRONZE", "schema": "stage", "name": "stg_netflix_originals", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/netflix_demo/stg_netflix_originals.sql", "original_file_path": "models/bronze/staging/netflix_demo/stg_netflix_originals.sql", "unique_id": "model.dbt_gx_demo.stg_netflix_originals", "fqn": ["dbt_gx_demo", "bronze", "staging", "netflix_demo", "stg_netflix_originals"], "alias": "stg_netflix_originals", "checksum": {"name": "sha256", "checksum": "1a8a29f3971239299e9e23c1e030afcf8e9e7e81cc81206b7a7b56b26ba49368"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "netflix_demo"], "description": "", "columns": {"TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GENRE": {"name": "GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREMIERE": {"name": "PREMIERE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNTIME": {"name": "RUNTIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMDBSCORE": {"name": "IMDBSCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LANGUAGE": {"name": "LANGUAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.887532, "relation_name": "BRONZE.stage.stg_netflix_originals", "raw_code": "SELECT *\n FROM {{ ref('processed_netflix_originals') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["processed_netflix_originals"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_netflix_originals"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_netflix_best_show_by_year": {"database": "BRONZE", "schema": "stage", "name": "stg_netflix_best_show_by_year", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/netflix_demo/stg_netflix_best_show_by_year.sql", "original_file_path": "models/bronze/staging/netflix_demo/stg_netflix_best_show_by_year.sql", "unique_id": "model.dbt_gx_demo.stg_netflix_best_show_by_year", "fqn": ["dbt_gx_demo", "bronze", "staging", "netflix_demo", "stg_netflix_best_show_by_year"], "alias": "stg_netflix_best_show_by_year", "checksum": {"name": "sha256", "checksum": "2452aca241e2f85a9abe1e7178e7f5c5aee311603f02c50cca07953c0e186433"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_SEASONS": {"name": "NUMBER_OF_SEASONS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.87735, "relation_name": "BRONZE.stage.stg_netflix_best_show_by_year", "raw_code": "SELECT *\n FROM {{ ref('processed_netflix_best_show_by_year') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["processed_netflix_best_show_by_year"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_netflix_best_show_by_year"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_netflix_credits": {"database": "BRONZE", "schema": "stage", "name": "stg_netflix_credits", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/netflix_demo/stg_netflix_credits.sql", "original_file_path": "models/bronze/staging/netflix_demo/stg_netflix_credits.sql", "unique_id": "model.dbt_gx_demo.stg_netflix_credits", "fqn": ["dbt_gx_demo", "bronze", "staging", "netflix_demo", "stg_netflix_credits"], "alias": "stg_netflix_credits", "checksum": {"name": "sha256", "checksum": "46db63434bc1117090c2d01b4c7c9035ed4b6d3ef331905d9e7d173cd9df87a5"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PERSON_ID": {"name": "PERSON_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHARACTER": {"name": "CHARACTER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.880124, "relation_name": "BRONZE.stage.stg_netflix_credits", "raw_code": "SELECT *\n FROM {{ ref('processed_netflix_credits') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["processed_netflix_credits"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_netflix_credits"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_netflix_best_show": {"database": "BRONZE", "schema": "stage", "name": "stg_netflix_best_show", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/netflix_demo/stg_netflix_best_show.sql", "original_file_path": "models/bronze/staging/netflix_demo/stg_netflix_best_show.sql", "unique_id": "model.dbt_gx_demo.stg_netflix_best_show", "fqn": ["dbt_gx_demo", "bronze", "staging", "netflix_demo", "stg_netflix_best_show"], "alias": "stg_netflix_best_show", "checksum": {"name": "sha256", "checksum": "ce64095cbd842bd9fad4d1126575203ca17864059716e736c3164b5940ccf756"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_VOTES": {"name": "NUMBER_OF_VOTES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DURATION": {"name": "DURATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_SEASONS": {"name": "NUMBER_OF_SEASONS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.8736968, "relation_name": "BRONZE.stage.stg_netflix_best_show", "raw_code": "SELECT *\n FROM {{ ref('processed_netflix_best_show') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["processed_netflix_best_show"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_netflix_best_show"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_netflix_dataset_rating": {"database": "BRONZE", "schema": "stage", "name": "stg_netflix_dataset_rating", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/netflix_demo/stg_netflix_dataset_rating.sql", "original_file_path": "models/bronze/staging/netflix_demo/stg_netflix_dataset_rating.sql", "unique_id": "model.dbt_gx_demo.stg_netflix_dataset_rating", "fqn": ["dbt_gx_demo", "bronze", "staging", "netflix_demo", "stg_netflix_dataset_rating"], "alias": "stg_netflix_dataset_rating", "checksum": {"name": "sha256", "checksum": "fea171e46d50ca2a8a2f6a4ddf3c6ea3f97e4d19fba36c08ecc4a1feb91ff08b"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "netflix_demo"], "description": "", "columns": {"USER_ID": {"name": "USER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATING": {"name": "RATING", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOVIE_ID": {"name": "MOVIE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.8843796, "relation_name": "BRONZE.stage.stg_netflix_dataset_rating", "raw_code": "SELECT *\n FROM {{ ref('processed_netflix_dataset_rating') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["processed_netflix_dataset_rating"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_netflix_dataset_rating"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_netflix_best_movie": {"database": "BRONZE", "schema": "stage", "name": "stg_netflix_best_movie", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/netflix_demo/stg_netflix_best_movie.sql", "original_file_path": "models/bronze/staging/netflix_demo/stg_netflix_best_movie.sql", "unique_id": "model.dbt_gx_demo.stg_netflix_best_movie", "fqn": ["dbt_gx_demo", "bronze", "staging", "netflix_demo", "stg_netflix_best_movie"], "alias": "stg_netflix_best_movie", "checksum": {"name": "sha256", "checksum": "3beb48b9b768bc9dbff4454ed4674579314e578565cabc5411137142666646d0"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_VOTES": {"name": "NUMBER_OF_VOTES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DURATION": {"name": "DURATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.8655055, "relation_name": "BRONZE.stage.stg_netflix_best_movie", "raw_code": "SELECT *\n FROM {{ ref('processed_netflix_best_movie') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["processed_netflix_best_movie"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_netflix_best_movie"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_netflix_titles": {"database": "BRONZE", "schema": "stage", "name": "stg_netflix_titles", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/netflix_demo/stg_netflix_titles.sql", "original_file_path": "models/bronze/staging/netflix_demo/stg_netflix_titles.sql", "unique_id": "model.dbt_gx_demo.stg_netflix_titles", "fqn": ["dbt_gx_demo", "bronze", "staging", "netflix_demo", "stg_netflix_titles"], "alias": "stg_netflix_titles", "checksum": {"name": "sha256", "checksum": "76c5ac5906b1d4d4b33099d45cb4d506bec554dece4fa09e423360f7d01687de"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AGE_CERTIFICATION": {"name": "AGE_CERTIFICATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNTIME": {"name": "RUNTIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GENRES": {"name": "GENRES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.891582, "relation_name": "BRONZE.stage.stg_netflix_titles", "raw_code": "SELECT *\n FROM {{ ref('processed_netflix_titles') }}  NETFLIX_BEST_MOVIE", "language": "sql", "refs": [["processed_netflix_titles"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_netflix_titles"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_netflix_dataset_movie": {"database": "BRONZE", "schema": "stage", "name": "stg_netflix_dataset_movie", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/netflix_demo/stg_netflix_dataset_movie.sql", "original_file_path": "models/bronze/staging/netflix_demo/stg_netflix_dataset_movie.sql", "unique_id": "model.dbt_gx_demo.stg_netflix_dataset_movie", "fqn": ["dbt_gx_demo", "bronze", "staging", "netflix_demo", "stg_netflix_dataset_movie"], "alias": "stg_netflix_dataset_movie", "checksum": {"name": "sha256", "checksum": "8602ceb087726085f7a0f0244d99168c46e9f33563aae84e064685a52482aa65"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "netflix_demo"], "description": "", "columns": {"MOVIE_ID": {"name": "MOVIE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "YEAR": {"name": "YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.8821425, "relation_name": "BRONZE.stage.stg_netflix_dataset_movie", "raw_code": "SELECT *\n FROM  {{ ref('processed_netflix_dataset_movie') }}  NETFLIX_DATASET_MOVIE", "language": "sql", "refs": [["processed_netflix_dataset_movie"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.processed_netflix_dataset_movie"]}, "compiled_path": null}, "model.dbt_gx_demo.stg_netflix_best_movie_by_year": {"database": "BRONZE", "schema": "stage", "name": "stg_netflix_best_movie_by_year", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/staging/netflix_demo/stg_netflix_best_movie_by_year.sql", "original_file_path": "models/bronze/staging/netflix_demo/stg_netflix_best_movie_by_year.sql", "unique_id": "model.dbt_gx_demo.stg_netflix_best_movie_by_year", "fqn": ["dbt_gx_demo", "bronze", "staging", "netflix_demo", "stg_netflix_best_movie_by_year"], "alias": "stg_netflix_best_movie_by_year", "checksum": {"name": "sha256", "checksum": "7edc9b111a958a8f548398426b40f9dfd7fa755721e8ee2b7897fcb478170d1b"}, "config": {"enabled": true, "alias": null, "schema": "stage", "database": null, "tags": ["staging", "netflix_demo"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["staging", "netflix_demo"], "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOVIE_BUDGET": {"name": "MOVIE_BUDGET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCTION_START_DATE": {"name": "PRODUCTION_START_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/staging/stage_schemal.yml", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ project_governance_check() }}", "schema": "stage", "materialized": "table", "tags": ["netflix_demo"]}, "created_at": 1695341478.8694882, "relation_name": "BRONZE.stage.stg_netflix_best_movie_by_year", "raw_code": "SELECT\n{{get_column_name('NETFLIX_BEST_MOVIE_BY_YEAR')}}\n FROM {{source('NETFLIX','NETFLIX_BEST_MOVIE_BY_YEAR')}}", "language": "sql", "refs": [], "sources": [["NETFLIX", "NETFLIX_BEST_MOVIE_BY_YEAR"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.get_column_name", "macro.dbt_gx_demo.project_governance_check"], "nodes": ["source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE_BY_YEAR"]}, "compiled_path": null}, "model.dbt_gx_demo.v_stg_inventory": {"database": "BRONZE", "schema": "audit", "name": "v_stg_inventory", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/stage/sales_demo/v_stg_inventory.sql", "original_file_path": "models/bronze/audit/stage/sales_demo/v_stg_inventory.sql", "unique_id": "model.dbt_gx_demo.v_stg_inventory", "fqn": ["dbt_gx_demo", "bronze", "audit", "stage", "sales_demo", "v_stg_inventory"], "alias": "v_stg_inventory", "checksum": {"name": "sha256", "checksum": "a33b7acd5c616fa85a4d86970fc462a89d3e175b96436c5c25073eb913a3ef8c"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit", "governance"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["audit", "governance"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["governance"], "pre-hook": "{{ project_governance_check() }}", "materialized": "view"}, "created_at": 1695341476.5929074, "relation_name": "BRONZE.audit.v_stg_inventory", "raw_code": "{%- set yaml_metadata -%}\nsource_model: 'raw_inventory'\nderived_columns:\n  NATION_KEY: 'SUPPLIER_NATION_KEY'\n  REGION_KEY: 'SUPPLIER_REGION_KEY'\n  RECORD_SOURCE: '!TPCH-INVENTORY'\nhashed_columns:\n  SUPPLIER_PK: 'SUPPLIERKEY'\n  SUPPLIER_NATION_PK: 'SUPPLIER_NATION_KEY'\n  SUPPLIER_REGION_PK: 'SUPPLIER_REGION_KEY'\n  REGION_PK: 'SUPPLIER_REGION_KEY'\n  NATION_PK: 'SUPPLIER_NATION_KEY'\n  NATION_REGION_PK:\n    - 'SUPPLIER_NATION_KEY'\n    - 'SUPPLIER_REGION_KEY'\n  LINK_SUPPLIER_NATION_PK:\n    - 'SUPPLIERKEY'\n    - 'SUPPLIER_NATION_KEY'\n  PART_PK: 'PARTKEY'\n  INVENTORY_PK:\n    - 'PARTKEY'\n    - 'SUPPLIERKEY'\n  SUPPLIER_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'SUPPLIERKEY'\n      - 'SUPPLIER_ACCTBAL'\n      - 'SUPPLIER_ADDRESS'\n      - 'SUPPLIER_PHONE'\n      - 'SUPPLIER_COMMENT'\n      - 'SUPPLIER_NAME'\n  PART_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'PARTKEY'\n      - 'PART_BRAND'\n      - 'PART_COMMENT'\n      - 'PART_CONTAINER'\n      - 'PART_MFGR'\n      - 'PART_NAME'\n      - 'PART_RETAILPRICE'\n      - 'PART_SIZE'\n      - 'PART_TYPE'\n  SUPPLIER_REGION_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'SUPPLIER_REGION_KEY'\n      - 'SUPPLIER_REGION_COMMENT'\n      - 'SUPPLIER_REGION_NAME'\n  SUPPLIER_NATION_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'SUPPLIER_NATION_KEY'\n      - 'SUPPLIER_NATION_COMMENT'\n      - 'SUPPLIER_NATION_NAME'\n  INVENTORY_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'PARTKEY'\n      - 'SUPPLIERKEY'\n      - 'AVAILQTY'\n      - 'SUPPLYCOST'\n      - 'PART_SUPPLY_COMMENT'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{% set source_model = metadata_dict['source_model'] %}\n\n{% set derived_columns = metadata_dict['derived_columns'] %}\n\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n\nWITH staging AS (\n{{ dbtvault.stage(include_source_columns=true,\n                  source_model=source_model,\n                  derived_columns=derived_columns,\n                  hashed_columns=hashed_columns,\n                  ranked_columns=none) }}\n)\n\nSELECT *, \n       CURRENT_TIMESTAMP() AS LOAD_DATE,\n       CURRENT_TIMESTAMP() AS EFFECTIVE_FROM      \nFROM staging", "language": "sql", "refs": [["raw_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.v_stg_transactions": {"database": "BRONZE", "schema": "audit", "name": "v_stg_transactions", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/stage/sales_demo/v_stg_transactions.sql", "original_file_path": "models/bronze/audit/stage/sales_demo/v_stg_transactions.sql", "unique_id": "model.dbt_gx_demo.v_stg_transactions", "fqn": ["dbt_gx_demo", "bronze", "audit", "stage", "sales_demo", "v_stg_transactions"], "alias": "v_stg_transactions", "checksum": {"name": "sha256", "checksum": "dba0ac25cbc569d29dcb7aa6e1213f6cb647452e73a47b91768f4a63d9abe210"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit", "governance"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["audit", "governance"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["governance"], "pre-hook": "{{ project_governance_check() }}", "materialized": "view"}, "created_at": 1695341476.7822053, "relation_name": "BRONZE.audit.v_stg_transactions", "raw_code": "{%- set yaml_metadata -%}\nsource_model: 'raw_transactions'\nderived_columns:\n  RECORD_SOURCE: '!RAW_TRANSACTIONS'\n  LOAD_DATE: DATEADD(DAY, 1, TRANSACTION_DATE)\n  EFFECTIVE_FROM: 'TRANSACTION_DATE'\nhashed_columns:\n  TRANSACTION_PK:\n    - 'CUSTOMER_ID'\n    - 'TRANSACTION_NUMBER'\n  CUSTOMER_PK: 'CUSTOMER_ID'\n  ORDER_PK: 'ORDER_ID'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{% set source_model = metadata_dict['source_model'] %}\n\n{% set derived_columns = metadata_dict['derived_columns'] %}\n\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n{{ dbtvault.stage(include_source_columns=true,\n                  source_model=source_model,\n                  derived_columns=derived_columns,\n                  hashed_columns=hashed_columns,\n                  ranked_columns=none) }}", "language": "sql", "refs": [["raw_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_transactions"]}, "compiled_path": null}, "model.dbt_gx_demo.v_stg_customer_info": {"database": "BRONZE", "schema": "audit", "name": "v_stg_customer_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/stage/sales_demo/v_stg_customer_info.sql", "original_file_path": "models/bronze/audit/stage/sales_demo/v_stg_customer_info.sql", "unique_id": "model.dbt_gx_demo.v_stg_customer_info", "fqn": ["dbt_gx_demo", "bronze", "audit", "stage", "sales_demo", "v_stg_customer_info"], "alias": "v_stg_customer_info", "checksum": {"name": "sha256", "checksum": "5acd53002607e5799f17866c008c89a498be730b3dd84b369252f328a3713b14"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit", "governance"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["audit", "governance"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["governance"], "pre-hook": "{{ project_governance_check() }}", "materialized": "view"}, "created_at": 1695341476.802113, "relation_name": "BRONZE.audit.v_stg_customer_info", "raw_code": "{%- set yaml_metadata -%}\nsource_model: 'raw_customer_info'\nderived_columns:\n  CUSTOMERKEY: 'C_CUSTOMER_SK'\n  ADDRESSKEY: 'CA_ADDRESS_ID'\n  ADDRESS_TYPE: '!CUSTOMER'\n  RECORD_SOURCE: '!TPCDS-CUSTOMER'\nhashed_columns:\n  CUSTOMER_PK: 'CUSTOMERKEY'\n  ADDRESS_PK: 'ADDRESSKEY'\n  LINK_CUSTOMER_ADDRESS_PK:\n    - 'CUSTOMERKEY'\n    - 'ADDRESSKEY'\n  CUSTOMER_ADDRESS_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'CUSTOMERKEY'\n      - 'ADDRESSKEY'\n      - 'CA_STREET_NUMBER'\n      - 'CA_STREET_TYPE'\n      - 'CA_SUITE_NUMBER'\n      - 'CA_CITY'\n      - 'CA_COUNTY'\n      - 'CA_STATE'\n      - 'CA_COUNTRY'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{% set source_model = metadata_dict['source_model'] %}\n\n{% set derived_columns = metadata_dict['derived_columns'] %}\n\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n\nWITH staging AS (\n{{ dbtvault.stage(include_source_columns=true,\n                  source_model=source_model,\n                  derived_columns=derived_columns,\n                  hashed_columns=hashed_columns,\n                  ranked_columns=none) }}\n)\n\nSELECT *, \n       CURRENT_TIMESTAMP() AS LOAD_DATE,\n       CURRENT_TIMESTAMP() AS EFFECTIVE_FROM      \nFROM staging", "language": "sql", "refs": [["raw_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_customer_info"]}, "compiled_path": null}, "model.dbt_gx_demo.v_stg_orders": {"database": "BRONZE", "schema": "audit", "name": "v_stg_orders", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/stage/sales_demo/v_stg_orders.sql", "original_file_path": "models/bronze/audit/stage/sales_demo/v_stg_orders.sql", "unique_id": "model.dbt_gx_demo.v_stg_orders", "fqn": ["dbt_gx_demo", "bronze", "audit", "stage", "sales_demo", "v_stg_orders"], "alias": "v_stg_orders", "checksum": {"name": "sha256", "checksum": "75e287081066b54ee1cde0a5a61c5f5dc34068c224cb798da9046c78000bc038"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit", "governance"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["audit", "governance"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["governance"], "pre-hook": "{{ project_governance_check() }}", "materialized": "view"}, "created_at": 1695341476.8302927, "relation_name": "BRONZE.audit.v_stg_orders", "raw_code": "{%- set yaml_metadata -%}\nsource_model: 'raw_orders'\nderived_columns:\n  NATION_KEY: 'CUSTOMER_NATION_KEY'\n  REGION_KEY: 'CUSTOMER_REGION_KEY'\n  RECORD_SOURCE: '!TPCH-ORDERS'\n  EFFECTIVE_FROM: 'ORDERDATE'\nhashed_columns:\n  CUSTOMER_PK: 'CUSTOMERKEY'\n  LINK_CUSTOMER_NATION_PK:\n    - 'CUSTOMERKEY'\n    - 'CUSTOMER_NATION_KEY'\n  CUSTOMER_NATION_PK: 'CUSTOMER_NATION_KEY'\n  CUSTOMER_REGION_PK: 'CUSTOMER_REGION_KEY'\n  NATION_PK: 'CUSTOMER_NATION_KEY'\n  REGION_PK: 'CUSTOMER_REGION_KEY'\n  NATION_REGION_PK:\n    - 'CUSTOMER_NATION_KEY'\n    - 'CUSTOMER_REGION_KEY'\n  ORDER_PK: 'ORDERKEY'\n  ORDER_CUSTOMER_PK:\n    - 'CUSTOMERKEY'\n    - 'ORDERKEY'\n  LINEITEM_PK:\n    - 'ORDERKEY'\n    - 'LINENUMBER'\n  LINK_LINEITEM_ORDER_PK:\n    - 'ORDERKEY'\n    - 'ORDERKEY'\n    - 'LINENUMBER'\n  PART_PK: 'PARTKEY'\n  SUPPLIER_PK: 'SUPPLIERKEY'\n  INVENTORY_PK:\n    - 'PARTKEY'\n    - 'SUPPLIERKEY'\n  INVENTORY_ALLOCATION_PK:\n    - 'LINENUMBER'\n    - 'PARTKEY'\n    - 'SUPPLIERKEY'\n  CUSTOMER_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'CUSTOMERKEY'\n      - 'CUSTOMER_NAME'\n      - 'CUSTOMER_ADDRESS'\n      - 'CUSTOMER_PHONE'\n      - 'CUSTOMER_ACCBAL'\n      - 'CUSTOMER_MKTSEGMENT'\n      - 'CUSTOMER_COMMENT'\n  CUSTOMER_NATION_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'CUSTOMER_NATION_NAME'\n      - 'CUSTOMER_NATION_COMMENT'\n      - 'CUSTOMER_NATION_KEY'\n  CUSTOMER_REGION_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'CUSTOMER_REGION_NAME'\n      - 'CUSTOMER_REGION_COMMENT'\n      - 'CUSTOMER_REGION_KEY'\n  LINEITEM_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'ORDERKEY'\n      - 'LINENUMBER'\n      - 'COMMITDATE'\n      - 'DISCOUNT'\n      - 'EXTENDEDPRICE'\n      - 'LINESTATUS'\n      - 'LINE_COMMENT'\n      - 'QUANTITY'\n      - 'RECEIPTDATE'\n      - 'RETURNFLAG'\n      - 'SHIPDATE'\n      - 'SHIPINSTRUCT'\n      - 'SHIPMODE'\n      - 'TAX'\n  MA_LINEITEM_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'ORDERKEY'\n      - 'LINENUMBER'\n      - 'COMMITDATE'\n      - 'DISCOUNT'\n      - 'EXTENDEDPRICE'\n      - 'LINESTATUS'\n      - 'LINE_COMMENT'\n      - 'QUANTITY'\n      - 'RECEIPTDATE'\n      - 'RETURNFLAG'\n      - 'SHIPDATE'\n      - 'SHIPINSTRUCT'\n      - 'SHIPMODE'\n      - 'TAX'\n  ORDER_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'ORDERKEY'\n      - 'CLERK'\n      - 'ORDERDATE'\n      - 'ORDERPRIORITY'\n      - 'ORDERSTATUS'\n      - 'ORDER_COMMENT'\n      - 'SHIPPRIORITY'\n      - 'TOTALPRICE'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{% set source_model = metadata_dict['source_model'] %}\n\n{% set derived_columns = metadata_dict['derived_columns'] %}\n\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\nWITH staging AS (\n{{ dbtvault.stage(include_source_columns=true,\n                  source_model=source_model,\n                  derived_columns=derived_columns,\n                  hashed_columns=hashed_columns,\n                  ranked_columns=none) }}\n)\n\nSELECT *, \n       CURRENT_TIMESTAMP() AS LOAD_DATE   \nFROM staging", "language": "sql", "refs": [["raw_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.v_stg_airport_info": {"database": "BRONZE", "schema": "audit", "name": "v_stg_airport_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/stage/flight_demo/v_stg_airport_info.sql", "original_file_path": "models/bronze/audit/stage/flight_demo/v_stg_airport_info.sql", "unique_id": "model.dbt_gx_demo.v_stg_airport_info", "fqn": ["dbt_gx_demo", "bronze", "audit", "stage", "flight_demo", "v_stg_airport_info"], "alias": "v_stg_airport_info", "checksum": {"name": "sha256", "checksum": "424e0b6a4328ef47e6f1bdbcfd0e55c5746382a2219a894750454b86716fc11a"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit", "governance"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["audit", "governance"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["governance"], "pre-hook": "{{ project_governance_check() }}", "materialized": "view"}, "created_at": 1695341476.9186673, "relation_name": "BRONZE.audit.v_stg_airport_info", "raw_code": "{%- set yaml_metadata -%}\nsource_model: 'raw_airport_info'\nderived_columns:\n  AIRPORT_CD: 'IATA_CODE'\n  AIRPORT_NM: 'AIRPORT'\n  RECORD_SOURCE: '!FLIGHT_DATASET'\nhashed_columns:\n  AIRPORT_PK: 'AIRPORT_CD'\n  AIRPORT_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'AIRPORT_CD'\n      - 'CITY'\n      - 'STATE'\n      - 'COUNTRY'\n  AIRPORT_LOCATION_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'AIRPORT_CD'\n      - 'LATITUDE'\n      - 'LONGITUDE'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{% set source_model = metadata_dict['source_model'] %}\n\n{% set derived_columns = metadata_dict['derived_columns'] %}\n\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n\nWITH staging AS (\n{{ dbtvault.stage(include_source_columns=true,\n                  source_model=source_model,\n                  derived_columns=derived_columns,\n                  hashed_columns=hashed_columns,\n                  ranked_columns=none) }}\n)\n\nSELECT *, \n       CURRENT_TIMESTAMP() AS LOAD_DATE,\n       CURRENT_TIMESTAMP() AS EFFECTIVE_FROM      \nFROM staging", "language": "sql", "refs": [["raw_airport_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_airport_info"]}, "compiled_path": null}, "model.dbt_gx_demo.v_stg_flight_info": {"database": "BRONZE", "schema": "audit", "name": "v_stg_flight_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/stage/flight_demo/v_stg_flight_info.sql", "original_file_path": "models/bronze/audit/stage/flight_demo/v_stg_flight_info.sql", "unique_id": "model.dbt_gx_demo.v_stg_flight_info", "fqn": ["dbt_gx_demo", "bronze", "audit", "stage", "flight_demo", "v_stg_flight_info"], "alias": "v_stg_flight_info", "checksum": {"name": "sha256", "checksum": "f65e65dd42e12e8fac2ae694410d5da00841bd4b775144dfb6bc65dced9b972c"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit", "governance"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["audit", "governance"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["governance"], "pre-hook": "{{ project_governance_check() }}", "materialized": "view"}, "created_at": 1695341476.9430344, "relation_name": "BRONZE.audit.v_stg_flight_info", "raw_code": "{%- set yaml_metadata -%}\nsource_model: 'raw_flight_info'\nderived_columns:\n  AIRLINE_CD: 'AIRLINE'\n  ORIGIN_AIRPORT: 'ORIGIN_AIRPORT'\n  AIRPORT_CD: 'ORIGIN_AIRPORT'\n  DESTINATION_AIRPORT: 'DESTINATION_AIRPORT'\n  RECORD_SOURCE: '!FLIGHT_DATASET'\nhashed_columns:\n  AIRLINE_PK: 'AIRLINE_CD'\n  AIRPORT_PK: 'ORIGIN_AIRPORT'\n  FLIGHT_PK: 'FLIGHT_NUMBER'\n  AIRPLANE_PK: 'TAIL_NUMBER'\n  LINK_AIRPORT_AIRLINE_PK:\n    - 'AIRLINE_CD'\n    - 'ORIGIN_AIRPORT'\n  LINK_AIRPORT_AIRLINE_FLIGHT_PK:\n    - 'AIRLINE_CD'\n    - 'ORIGIN_AIRPORT'\n    - 'FLIGHT_NUMBER'\n  LINK_AIRPORT_AIRLINE_AIRPLANE_FLIGHT_PK:\n    - 'AIRLINE_CD'\n    - 'ORIGIN_AIRPORT'\n    - 'FLIGHT_NUMBER'\n    - 'TAIL_NUMBER'\n  FLIGHT_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'AIRPORT_CD'\n      - 'AIRLINE_CD'\n      - 'FLIGHT_NUMBER'\n      - 'TAIL_NUMBER'\n      - 'ORIGIN_AIRPORT'\n      - 'DESTINATION_AIRPORT'\n      - 'YEAR'\n      - 'MONTH'\n      - 'DAY'\n      - 'DAY_OF_WEEK'\n      - 'SCHEDULE_DEPARTURE'\n      - 'DEPARTURE_TIME'\n      - 'DEPARTURE_DELAY'\n      - 'TAXI_OUT'\n      - 'WHEELS_OFF'\n      - 'SCHEDULE_TIME'\n      - 'ELAPSED_TIME'\n      - 'AIR_TIME'\n      - 'DISTANCE'\n      - 'WHEELS_ON'\n      - 'TAXI_IN'\n      - 'SCHEDULE_ARRIVAL'\n      - 'ARRIVAL_TIME'\n      - 'ARRIVAL_DELAY'\n      - 'DIVERTED'\n      - 'CANCELLED'\n      - 'CANCELLATION_REASON'\n      - 'AIR_SYSTEM_DELAY'\n      - 'SECURITY_DELAY'\n      - 'LATE_AIRCRAFT_DELAY'\n      - 'WEATHER_DELAY'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{% set source_model = metadata_dict['source_model'] %}\n\n{% set derived_columns = metadata_dict['derived_columns'] %}\n\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n\nWITH staging AS (\n{{ dbtvault.stage(include_source_columns=true,\n                  source_model=source_model,\n                  derived_columns=derived_columns,\n                  hashed_columns=hashed_columns,\n                  ranked_columns=none) }}\n)\n\nSELECT *, \n       CURRENT_TIMESTAMP() AS LOAD_DATE,\n       CURRENT_TIMESTAMP() AS EFFECTIVE_FROM      \nFROM staging", "language": "sql", "refs": [["raw_flight_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_flight_info"]}, "compiled_path": null}, "model.dbt_gx_demo.v_stg_airline_info": {"database": "BRONZE", "schema": "audit", "name": "v_stg_airline_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/stage/flight_demo/v_stg_airline_info.sql", "original_file_path": "models/bronze/audit/stage/flight_demo/v_stg_airline_info.sql", "unique_id": "model.dbt_gx_demo.v_stg_airline_info", "fqn": ["dbt_gx_demo", "bronze", "audit", "stage", "flight_demo", "v_stg_airline_info"], "alias": "v_stg_airline_info", "checksum": {"name": "sha256", "checksum": "a5973c26da3828aea7935e865bc7ccd9137f28307c757a2194eae61e9d3e18d0"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit", "governance"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ project_governance_check() }}", "transaction": true, "index": null}]}, "tags": ["audit", "governance"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["governance"], "pre-hook": "{{ project_governance_check() }}", "materialized": "view"}, "created_at": 1695341476.9961104, "relation_name": "BRONZE.audit.v_stg_airline_info", "raw_code": "{%- set yaml_metadata -%}\nsource_model: 'raw_airline_info'\nderived_columns:\n  AIRLINE_CD: 'IATA_CODE'\n  AIRLINE_NM: 'AIRLINE'\n  RECORD_SOURCE: '!FLIGHT_DATASET'\nhashed_columns:\n  AIRLINE_PK: 'AIRLINE_CD'\n  AIRLINE_HASHDIFF:\n    is_hashdiff: true\n    columns:\n      - 'AIRLINE_CD'\n      - 'AIRLINE_NM'\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{% set source_model = metadata_dict['source_model'] %}\n\n{% set derived_columns = metadata_dict['derived_columns'] %}\n\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n\nWITH staging AS (\n{{ dbtvault.stage(include_source_columns=true,\n                  source_model=source_model,\n                  derived_columns=derived_columns,\n                  hashed_columns=hashed_columns,\n                  ranked_columns=none) }}\n)\n\nSELECT *, \n       CURRENT_TIMESTAMP() AS LOAD_DATE,\n       CURRENT_TIMESTAMP() AS EFFECTIVE_FROM      \nFROM staging", "language": "sql", "refs": [["raw_airline_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.stage", "macro.dbt_gx_demo.project_governance_check"], "nodes": ["model.dbt_gx_demo.raw_airline_info"]}, "compiled_path": null}, "model.dbt_gx_demo.t_link_transactions": {"database": "BRONZE", "schema": "audit", "name": "t_link_transactions", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/t_links/t_link_transactions.sql", "original_file_path": "models/bronze/audit/raw_vault/t_links/t_link_transactions.sql", "unique_id": "model.dbt_gx_demo.t_link_transactions", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "t_links", "t_link_transactions"], "alias": "t_link_transactions", "checksum": {"name": "sha256", "checksum": "cd495827a966d5039a76e7806c444917ec4efa431a1faa6c4b59a3225bb7a2ff"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.0147989, "relation_name": "BRONZE.audit.t_link_transactions", "raw_code": "{%- set source_model = \"v_stg_transactions\" -%}\n{%- set src_pk = \"TRANSACTION_PK\" -%}\n{%- set src_fk = [\"CUSTOMER_PK\", \"ORDER_PK\"] -%}\n{%- set src_payload = [\"TRANSACTION_NUMBER\", \"TRANSACTION_DATE\", \"TYPE\", \"AMOUNT\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.t_link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                   src_payload=src_payload, src_eff=src_eff,\n                   src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.t_link"], "nodes": ["model.dbt_gx_demo.v_stg_transactions"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_supplier": {"database": "BRONZE", "schema": "audit", "name": "hub_supplier", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/sales_demo/hub_supplier.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/sales_demo/hub_supplier.sql", "unique_id": "model.dbt_gx_demo.hub_supplier", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "sales_demo", "hub_supplier"], "alias": "hub_supplier", "checksum": {"name": "sha256", "checksum": "7c78343cb2f33777752de9a1391f3a0a9caec4d4175937e7b230aedcb5001c6f"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {"SUPPLIER_PK": {"name": "SUPPLIER_PK", "description": "Primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/audit/raw_vault/data_vault_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341479.1135523, "relation_name": "BRONZE.audit.hub_supplier", "raw_code": "{%- set source_model = [\"v_stg_orders\", \"v_stg_inventory\"] -%}\n{%- set src_pk = \"SUPPLIER_PK\" -%}\n{%- set src_nk = \"SUPPLIERKEY\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"], ["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_orders", "model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_region": {"database": "BRONZE", "schema": "audit", "name": "hub_region", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/sales_demo/hub_region.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/sales_demo/hub_region.sql", "unique_id": "model.dbt_gx_demo.hub_region", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "sales_demo", "hub_region"], "alias": "hub_region", "checksum": {"name": "sha256", "checksum": "2a4dfa6d43a8711ff86944f4d68bef78f1f9f84d8918959dc8c1c2299687adf5"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {"REGION_PK": {"name": "REGION_PK", "description": "Primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/audit/raw_vault/data_vault_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341479.1125016, "relation_name": "BRONZE.audit.hub_region", "raw_code": "{%- set source_model = [\"v_stg_orders\", \"v_stg_inventory\"] -%}\n{%- set src_pk = \"REGION_PK\" -%}\n{%- set src_nk = \"REGION_KEY\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"], ["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_orders", "model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_order": {"database": "BRONZE", "schema": "audit", "name": "hub_order", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/sales_demo/hub_order.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/sales_demo/hub_order.sql", "unique_id": "model.dbt_gx_demo.hub_order", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "sales_demo", "hub_order"], "alias": "hub_order", "checksum": {"name": "sha256", "checksum": "d60282df3c5c644ba3e9b20dcfd20f9fd766a959ebdea27f7ca9d09de97b17d7"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {"ORDER_PK": {"name": "ORDER_PK", "description": "Primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/audit/raw_vault/data_vault_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341479.1100862, "relation_name": "BRONZE.audit.hub_order", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"ORDER_PK\" -%}\n{%- set src_nk = \"ORDERKEY\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_customer": {"database": "BRONZE", "schema": "audit", "name": "hub_customer", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/sales_demo/hub_customer.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/sales_demo/hub_customer.sql", "unique_id": "model.dbt_gx_demo.hub_customer", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "sales_demo", "hub_customer"], "alias": "hub_customer", "checksum": {"name": "sha256", "checksum": "94b5cd8cb70a54667c6a384ca49421fa0bb45d24e04740b0a71eb744f284e856"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {"CUSTOMER_PK": {"name": "CUSTOMER_PK", "description": "Primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/audit/raw_vault/data_vault_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341479.1066594, "relation_name": "BRONZE.audit.hub_customer", "raw_code": "{%- set source_model = \"v_stg_orders\",\n                        \"v_stg_customer_info\" -%}\n{%- set src_pk = \"CUSTOMER_PK\" -%}\n{%- set src_nk = \"CUSTOMERKEY\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"], ["v_stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_orders", "model.dbt_gx_demo.v_stg_customer_info"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_customer_info": {"database": "BRONZE", "schema": "audit", "name": "hub_customer_info", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/sales_demo/hub_customer_info.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/sales_demo/hub_customer_info.sql", "unique_id": "model.dbt_gx_demo.hub_customer_info", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "sales_demo", "hub_customer_info"], "alias": "hub_customer_info", "checksum": {"name": "sha256", "checksum": "201d1a6f7b0516e24eaf7de5f4e7b76994061020120b225395e61c0a07ecbb10"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {"CUSTOMER_PK": {"name": "CUSTOMER_PK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMERKEY": {"name": "CUSTOMERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE": {"name": "LOAD_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/audit/raw_vault/data_vault_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341479.105487, "relation_name": "BRONZE.audit.hub_customer_info", "raw_code": "{%- set source_model = \"v_stg_customer_info\" -%}\n{%- set src_pk = \"CUSTOMER_PK\" -%}\n{%- set src_nk = \"CUSTOMERKEY\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_customer_info"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_nation": {"database": "BRONZE", "schema": "audit", "name": "hub_nation", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/sales_demo/hub_nation.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/sales_demo/hub_nation.sql", "unique_id": "model.dbt_gx_demo.hub_nation", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "sales_demo", "hub_nation"], "alias": "hub_nation", "checksum": {"name": "sha256", "checksum": "969301e01cfbd1b368f3bd80770fe3b25a5e4ca87b131c66ae8260302aa56011"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {"NATION_PK": {"name": "NATION_PK", "description": "Primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/audit/raw_vault/data_vault_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341479.1089559, "relation_name": "BRONZE.audit.hub_nation", "raw_code": "{%- set source_model = [\"v_stg_orders\", \"v_stg_inventory\"] -%}\n{%- set src_pk = \"NATION_PK\" -%}\n{%- set src_nk = \"NATION_KEY\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"], ["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_orders", "model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_lineitem": {"database": "BRONZE", "schema": "audit", "name": "hub_lineitem", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/sales_demo/hub_lineitem.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/sales_demo/hub_lineitem.sql", "unique_id": "model.dbt_gx_demo.hub_lineitem", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "sales_demo", "hub_lineitem"], "alias": "hub_lineitem", "checksum": {"name": "sha256", "checksum": "112c38a95a99eb6442cfcae59585e13a023f98ab38d205df686895cbb2b1f738"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {"LINEITEM_PK": {"name": "LINEITEM_PK", "description": "Primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/audit/raw_vault/data_vault_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341479.107799, "relation_name": "BRONZE.audit.hub_lineitem", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"LINEITEM_PK\" -%}\n{%- set src_nk = [\"LINENUMBER\", \"ORDERKEY\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_part": {"database": "BRONZE", "schema": "audit", "name": "hub_part", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/sales_demo/hub_part.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/sales_demo/hub_part.sql", "unique_id": "model.dbt_gx_demo.hub_part", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "sales_demo", "hub_part"], "alias": "hub_part", "checksum": {"name": "sha256", "checksum": "580318a2a634bb19b02535ef97ecc8f5eb3fc2bf45e32b630cc3772540d66949"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {"PART_PK": {"name": "PART_PK", "description": "Primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/audit/raw_vault/data_vault_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341479.1114109, "relation_name": "BRONZE.audit.hub_part", "raw_code": "{%- set source_model = [\"v_stg_orders\", \"v_stg_inventory\"] -%}\n{%- set src_pk = \"PART_PK\" -%}\n{%- set src_nk = \"PARTKEY\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"], ["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_orders", "model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_airline": {"database": "BRONZE", "schema": "audit", "name": "hub_airline", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/flight_demo/hub_airline.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/flight_demo/hub_airline.sql", "unique_id": "model.dbt_gx_demo.hub_airline", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "flight_demo", "hub_airline"], "alias": "hub_airline", "checksum": {"name": "sha256", "checksum": "35b0c40ab4d44f49ccc46b7a3eb70d527e68036a36ab0ebfc3146bbaa6763e34"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.1920443, "relation_name": "BRONZE.audit.hub_airline", "raw_code": "{%- set source_model = \"v_stg_airline_info\",\n                        \"v_stg_flight_info\" -%}\n{%- set src_pk = \"AIRLINE_PK\" -%}\n{%- set src_nk = \"AIRLINE_CD\" -%}\n{%- set src_ldts = \"LOAD_DATE_TIMESTAMP\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_airline_info"], ["v_stg_flight_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_airline_info", "model.dbt_gx_demo.v_stg_flight_info"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_airplane": {"database": "BRONZE", "schema": "audit", "name": "hub_airplane", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/flight_demo/hub_airplane.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/flight_demo/hub_airplane.sql", "unique_id": "model.dbt_gx_demo.hub_airplane", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "flight_demo", "hub_airplane"], "alias": "hub_airplane", "checksum": {"name": "sha256", "checksum": "79a73c8b7fcb99168e5a5a812dfc62b53b45895d2490ce396543eed3cc3ac247"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.2043118, "relation_name": "BRONZE.audit.hub_airplane", "raw_code": "{%- set source_model = \"v_stg_flight_info\" -%}\n{%- set src_pk = \"AIRPLANE_PK\" -%}\n{%- set src_nk = \"TAIL_NUMBER\" -%}\n{%- set src_ldts = \"LOAD_DATE_TIMESTAMP\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_flight_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_flight_info"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_flight": {"database": "BRONZE", "schema": "audit", "name": "hub_flight", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/flight_demo/hub_flight.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/flight_demo/hub_flight.sql", "unique_id": "model.dbt_gx_demo.hub_flight", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "flight_demo", "hub_flight"], "alias": "hub_flight", "checksum": {"name": "sha256", "checksum": "afedd58972972d5bca1c859c5b471094ae2e12ce52ca7b390c3590a8df9a599e"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.2139473, "relation_name": "BRONZE.audit.hub_flight", "raw_code": "{%- set source_model = \"v_stg_flight_info\" -%}\n{%- set src_pk = \"FLIGHT_PK\" -%}\n{%- set src_nk = \"FLIGHT_NUMBER\" -%}\n{%- set src_ldts = \"LOAD_DATE_TIMESTAMP\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_flight_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_flight_info"]}, "compiled_path": null}, "model.dbt_gx_demo.hub_airport": {"database": "BRONZE", "schema": "audit", "name": "hub_airport", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/hubs/flight_demo/hub_airport.sql", "original_file_path": "models/bronze/audit/raw_vault/hubs/flight_demo/hub_airport.sql", "unique_id": "model.dbt_gx_demo.hub_airport", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "hubs", "flight_demo", "hub_airport"], "alias": "hub_airport", "checksum": {"name": "sha256", "checksum": "c73398dfb5c277635777b7488a4aea1d8e0aa10cd34f2a289b90cc64df9084be"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.223852, "relation_name": "BRONZE.audit.hub_airport", "raw_code": "{%- set source_model = \"v_stg_airport_info\",\n                        \"v_stg_flight_info\" -%}\n{%- set src_pk = \"AIRPORT_PK\" -%}\n{%- set src_nk = \"AIRPORT_CD\" -%}\n{%- set src_ldts = \"LOAD_DATE_TIMESTAMP\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.hub(src_pk=src_pk, src_nk=src_nk, src_ldts=src_ldts,\n                src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_airport_info"], ["v_stg_flight_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.hub"], "nodes": ["model.dbt_gx_demo.v_stg_airport_info", "model.dbt_gx_demo.v_stg_flight_info"]}, "compiled_path": null}, "model.dbt_gx_demo.link_customer_order": {"database": "BRONZE", "schema": "audit", "name": "link_customer_order", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/links/sales_demo/link_customer_order.sql", "original_file_path": "models/bronze/audit/raw_vault/links/sales_demo/link_customer_order.sql", "unique_id": "model.dbt_gx_demo.link_customer_order", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "links", "sales_demo", "link_customer_order"], "alias": "link_customer_order", "checksum": {"name": "sha256", "checksum": "c082d4daf961d6013544296debde0b24de3573d5cf94328274fc0a39bd11dd1d"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.2359278, "relation_name": "BRONZE.audit.link_customer_order", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"ORDER_CUSTOMER_PK\" -%}\n{%- set src_fk = [\"CUSTOMER_PK\", \"ORDER_PK\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                 src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.link_customer_address": {"database": "BRONZE", "schema": "audit", "name": "link_customer_address", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/links/sales_demo/link_customer_address.sql", "original_file_path": "models/bronze/audit/raw_vault/links/sales_demo/link_customer_address.sql", "unique_id": "model.dbt_gx_demo.link_customer_address", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "links", "sales_demo", "link_customer_address"], "alias": "link_customer_address", "checksum": {"name": "sha256", "checksum": "62edd90bef873c7262c11fd07c76d8f4b5af51a195c85c61d5302226d7f650e5"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.265456, "relation_name": "BRONZE.audit.link_customer_address", "raw_code": "{%- set source_model = \"v_stg_customer_info\" -%}\n{%- set src_pk = \"LINK_CUSTOMER_ADDRESS_PK\" -%}\n{%- set src_fk = [\"CUSTOMER_PK\", \"ADDRESS_PK\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                 src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_gx_demo.v_stg_customer_info"]}, "compiled_path": null}, "model.dbt_gx_demo.link_inventory_allocation": {"database": "BRONZE", "schema": "audit", "name": "link_inventory_allocation", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/links/sales_demo/link_inventory_allocation.sql", "original_file_path": "models/bronze/audit/raw_vault/links/sales_demo/link_inventory_allocation.sql", "unique_id": "model.dbt_gx_demo.link_inventory_allocation", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "links", "sales_demo", "link_inventory_allocation"], "alias": "link_inventory_allocation", "checksum": {"name": "sha256", "checksum": "283a4af782b7b241b844a692957be7ad02acb71e301134d0987925737f2aa4b3"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.277092, "relation_name": "BRONZE.audit.link_inventory_allocation", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"INVENTORY_ALLOCATION_PK\" -%}\n{%- set src_fk = [\"PART_PK\", \"SUPPLIER_PK\", \"LINEITEM_PK\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                 src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.link_inventory": {"database": "BRONZE", "schema": "audit", "name": "link_inventory", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/links/sales_demo/link_inventory.sql", "original_file_path": "models/bronze/audit/raw_vault/links/sales_demo/link_inventory.sql", "unique_id": "model.dbt_gx_demo.link_inventory", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "links", "sales_demo", "link_inventory"], "alias": "link_inventory", "checksum": {"name": "sha256", "checksum": "45b7d3b62d91c7b6c2b8247986b8f948837d8a7f6e15306878298c01368dc00d"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.288364, "relation_name": "BRONZE.audit.link_inventory", "raw_code": "{%- set source_model = \"v_stg_inventory\" -%}\n{%- set src_pk = \"INVENTORY_PK\" -%}\n{%- set src_fk = [\"SUPPLIER_PK\", \"PART_PK\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                 src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.link_customer_nation": {"database": "BRONZE", "schema": "audit", "name": "link_customer_nation", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/links/sales_demo/link_customer_nation.sql", "original_file_path": "models/bronze/audit/raw_vault/links/sales_demo/link_customer_nation.sql", "unique_id": "model.dbt_gx_demo.link_customer_nation", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "links", "sales_demo", "link_customer_nation"], "alias": "link_customer_nation", "checksum": {"name": "sha256", "checksum": "f01488ed6c1ae37599c00e1d391d166dcce6409a07fc247a46dd3d9f6617619b"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.2990434, "relation_name": "BRONZE.audit.link_customer_nation", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"LINK_CUSTOMER_NATION_PK\" -%}\n{%- set src_fk = [\"CUSTOMER_PK\", \"NATION_PK\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                 src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.link_order_lineitem": {"database": "BRONZE", "schema": "audit", "name": "link_order_lineitem", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/links/sales_demo/link_order_lineitem.sql", "original_file_path": "models/bronze/audit/raw_vault/links/sales_demo/link_order_lineitem.sql", "unique_id": "model.dbt_gx_demo.link_order_lineitem", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "links", "sales_demo", "link_order_lineitem"], "alias": "link_order_lineitem", "checksum": {"name": "sha256", "checksum": "6bd270a3540b7b28cd2a1c9963845525115c782f354484db2fa470f18562430d"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.3106477, "relation_name": "BRONZE.audit.link_order_lineitem", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"LINK_LINEITEM_ORDER_PK\" -%}\n{%- set src_fk = [\"ORDER_PK\", \"LINEITEM_PK\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                 src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.link_nation_region": {"database": "BRONZE", "schema": "audit", "name": "link_nation_region", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/links/sales_demo/link_nation_region.sql", "original_file_path": "models/bronze/audit/raw_vault/links/sales_demo/link_nation_region.sql", "unique_id": "model.dbt_gx_demo.link_nation_region", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "links", "sales_demo", "link_nation_region"], "alias": "link_nation_region", "checksum": {"name": "sha256", "checksum": "d70252b98069b85ac85e8da64980df326ae09ce128967bccf55a7a74307970ad"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.321485, "relation_name": "BRONZE.audit.link_nation_region", "raw_code": "{%- set source_model = [\"v_stg_orders\", \"v_stg_inventory\"] -%}\n{%- set src_pk = \"NATION_REGION_PK\" -%}\n{%- set src_fk = [\"NATION_PK\", \"REGION_PK\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                 src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"], ["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_gx_demo.v_stg_orders", "model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.link_supplier_nation": {"database": "BRONZE", "schema": "audit", "name": "link_supplier_nation", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/links/sales_demo/link_supplier_nation.sql", "original_file_path": "models/bronze/audit/raw_vault/links/sales_demo/link_supplier_nation.sql", "unique_id": "model.dbt_gx_demo.link_supplier_nation", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "links", "sales_demo", "link_supplier_nation"], "alias": "link_supplier_nation", "checksum": {"name": "sha256", "checksum": "59bd61651d702d5f1e725579ec4e17dddc33f0dafd7a99562849a5ec50bc6e1a"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.3332524, "relation_name": "BRONZE.audit.link_supplier_nation", "raw_code": "{%- set source_model = \"v_stg_inventory\" -%}\n{%- set src_pk = \"LINK_SUPPLIER_NATION_PK\" -%}\n{%- set src_fk = [\"SUPPLIER_PK\", \"NATION_PK\"] -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                 src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.link_airport_airline_airplane_flight": {"database": "BRONZE", "schema": "audit", "name": "link_airport_airline_airplane_flight", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/links/flight_demo/link_airport_airline_airplane_flight.sql", "original_file_path": "models/bronze/audit/raw_vault/links/flight_demo/link_airport_airline_airplane_flight.sql", "unique_id": "model.dbt_gx_demo.link_airport_airline_airplane_flight", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "links", "flight_demo", "link_airport_airline_airplane_flight"], "alias": "link_airport_airline_airplane_flight", "checksum": {"name": "sha256", "checksum": "0a36eccb57035635aeb046df88201aedeae30a69911d9530dabc6fb7151fb025"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.3447201, "relation_name": "BRONZE.audit.link_airport_airline_airplane_flight", "raw_code": "{%- set source_model = \"v_stg_flight_info\" -%}\n{%- set src_pk = \"LINK_AIRPORT_AIRLINE_AIRPLANE_FLIGHT_PK\" -%}\n{%- set src_fk = [\"AIRPORT_PK\", \"AIRLINE_PK\",\"AIRPLANE_PK\",\"FLIGHT_PK\"] -%}\n{%- set src_ldts = \"LOAD_DATE_TIMESTAMP\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                 src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_flight_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.link"], "nodes": ["model.dbt_gx_demo.v_stg_flight_info"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_inv_inventory_details": {"database": "BRONZE", "schema": "audit", "name": "sat_inv_inventory_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_inv_inventory_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_inv_inventory_details.sql", "unique_id": "model.dbt_gx_demo.sat_inv_inventory_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_inv_inventory_details"], "alias": "sat_inv_inventory_details", "checksum": {"name": "sha256", "checksum": "bf0c877beae09b43f09459ebc103aef02ea95963b889b90231da002866af61ea"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {"INVENTORY_HASHDIFF": {"name": "INVENTORY_HASHDIFF", "description": "Primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_gx_demo://models/bronze/audit/raw_vault/data_vault_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341479.1146193, "relation_name": "BRONZE.audit.sat_inv_inventory_details", "raw_code": "{%- set source_model = \"v_stg_inventory\" -%}\n{%- set src_pk = \"INVENTORY_PK\" -%}\n{%- set src_hashdiff = \"INVENTORY_HASHDIFF\" -%}\n{%- set src_payload = [\"AVAILQTY\", \"SUPPLYCOST\", \"PART_SUPPLY_COMMENT\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }}", "language": "sql", "refs": [["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_order_cust_nation_details": {"database": "BRONZE", "schema": "audit", "name": "sat_order_cust_nation_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_order_cust_nation_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_order_cust_nation_details.sql", "unique_id": "model.dbt_gx_demo.sat_order_cust_nation_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_order_cust_nation_details"], "alias": "sat_order_cust_nation_details", "checksum": {"name": "sha256", "checksum": "280fe09ccbefdf23e8bea5cb7d3a57862560df4d8ddd51d956a8d54f86cf938c"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.408063, "relation_name": "BRONZE.audit.sat_order_cust_nation_details", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"CUSTOMER_PK\" -%}\n{%- set src_hashdiff = \"CUSTOMER_NATION_HASHDIFF\" -%}\n{%- set src_payload = [\"CUSTOMER_NATION_NAME\", \"CUSTOMER_NATION_COMMENT\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_customer_address": {"database": "BRONZE", "schema": "audit", "name": "sat_customer_address", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_customer_address.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_customer_address.sql", "unique_id": "model.dbt_gx_demo.sat_customer_address", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_customer_address"], "alias": "sat_customer_address", "checksum": {"name": "sha256", "checksum": "89875cff232526442afd3a6a6db78aebe9655a88842cbe3ee41ddfe3e9d7e9e1"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.4215744, "relation_name": "BRONZE.audit.sat_customer_address", "raw_code": "{%- set source_model = \"v_stg_customer_info\" -%}\n{%- set src_pk = \"LINK_CUSTOMER_ADDRESS_PK\" -%}\n{%- set src_hashdiff = \"CUSTOMER_ADDRESS_HASHDIFF\" -%}\n{%- set src_payload = [\"CA_STREET_NUMBER\", \"CA_STREET_TYPE\", \"CA_SUITE_NUMBER\", \"CA_CITY\", \"CA_COUNTY\", \"CA_STATE\", \"CA_COUNTRY\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n \n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }} a\n{%- if is_incremental() %}\n LEFT JOIN {{ this }} AS d\n ON a.CUSTOMER_ADDRESS_HASHDIFF = d.CUSTOMER_ADDRESS_HASHDIFF\n WHERE d.CUSTOMER_ADDRESS_HASHDIFF IS NULL\n {%- endif %}", "language": "sql", "refs": [["v_stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat", "macro.dbt.is_incremental"], "nodes": ["model.dbt_gx_demo.v_stg_customer_info"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_order_lineitem_details": {"database": "BRONZE", "schema": "audit", "name": "sat_order_lineitem_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_order_lineitem_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_order_lineitem_details.sql", "unique_id": "model.dbt_gx_demo.sat_order_lineitem_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_order_lineitem_details"], "alias": "sat_order_lineitem_details", "checksum": {"name": "sha256", "checksum": "477ecd6e6b951a468d9599ec65843e7ff1c1df8aec55af602700b35bb8c67dec"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.4381275, "relation_name": "BRONZE.audit.sat_order_lineitem_details", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"LINEITEM_PK\" -%}\n{%- set src_hashdiff = \"LINEITEM_HASHDIFF\" -%}\n{%- set src_payload = [\"COMMITDATE\", \"DISCOUNT\", \"EXTENDEDPRICE\", \"LINE_COMMENT\",\n                       \"QUANTITY\", \"RECEIPTDATE\", \"RETURNFLAG\", \"SHIPDATE\",\n                       \"SHIPINSTRUCT\", \"SHIPMODE\", \"TAX\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_inv_supplier_details": {"database": "BRONZE", "schema": "audit", "name": "sat_inv_supplier_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_inv_supplier_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_inv_supplier_details.sql", "unique_id": "model.dbt_gx_demo.sat_inv_supplier_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_inv_supplier_details"], "alias": "sat_inv_supplier_details", "checksum": {"name": "sha256", "checksum": "8fa2f2ad4c02bc2ab6fa7a74cd68a567be6ad8632785613821de1620a3f9aa67"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.4550507, "relation_name": "BRONZE.audit.sat_inv_supplier_details", "raw_code": "{%- set source_model = \"v_stg_inventory\" -%}\n{%- set src_pk = \"SUPPLIER_PK\" -%}\n{%- set src_hashdiff = \"SUPPLIER_HASHDIFF\" -%}\n{%- set src_payload = [\"SUPPLIER_ADDRESS\", \"SUPPLIER_PHONE\", \"SUPPLIER_ACCTBAL\", \"SUPPLIER_NAME\", \"SUPPLIER_COMMENT\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }}", "language": "sql", "refs": [["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_inv_supp_nation_details": {"database": "BRONZE", "schema": "audit", "name": "sat_inv_supp_nation_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_inv_supp_nation_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_inv_supp_nation_details.sql", "unique_id": "model.dbt_gx_demo.sat_inv_supp_nation_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_inv_supp_nation_details"], "alias": "sat_inv_supp_nation_details", "checksum": {"name": "sha256", "checksum": "bf58b86534d4bc514484d3e9dfe3a4bd73e12f2d0303e596c996cceb633c9829"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.470547, "relation_name": "BRONZE.audit.sat_inv_supp_nation_details", "raw_code": "{%- set source_model = \"v_stg_inventory\" -%}\n{%- set src_pk = \"SUPPLIER_PK\" -%}\n{%- set src_hashdiff = \"SUPPLIER_NATION_HASHDIFF\" -%}\n{%- set src_payload = [\"SUPPLIER_NATION_NAME\", \"SUPPLIER_NATION_COMMENT\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }}", "language": "sql", "refs": [["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_inv_supp_region_details": {"database": "BRONZE", "schema": "audit", "name": "sat_inv_supp_region_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_inv_supp_region_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_inv_supp_region_details.sql", "unique_id": "model.dbt_gx_demo.sat_inv_supp_region_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_inv_supp_region_details"], "alias": "sat_inv_supp_region_details", "checksum": {"name": "sha256", "checksum": "bf58b86534d4bc514484d3e9dfe3a4bd73e12f2d0303e596c996cceb633c9829"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.4835622, "relation_name": "BRONZE.audit.sat_inv_supp_region_details", "raw_code": "{%- set source_model = \"v_stg_inventory\" -%}\n{%- set src_pk = \"SUPPLIER_PK\" -%}\n{%- set src_hashdiff = \"SUPPLIER_NATION_HASHDIFF\" -%}\n{%- set src_payload = [\"SUPPLIER_NATION_NAME\", \"SUPPLIER_NATION_COMMENT\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }}", "language": "sql", "refs": [["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_order_order_details": {"database": "BRONZE", "schema": "audit", "name": "sat_order_order_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_order_order_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_order_order_details.sql", "unique_id": "model.dbt_gx_demo.sat_order_order_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_order_order_details"], "alias": "sat_order_order_details", "checksum": {"name": "sha256", "checksum": "97f2b7785c9e4381b6a7c97896fe553f4508c85ed36e095f6552f3278005b835"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.4966853, "relation_name": "BRONZE.audit.sat_order_order_details", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"ORDER_PK\" -%}\n{%- set src_hashdiff = \"ORDER_HASHDIFF\" -%}\n{%- set src_payload = [\"ORDERSTATUS\", \"TOTALPRICE\", \"ORDERDATE\", \"ORDERPRIORITY\",\n                       \"CLERK\", \"SHIPPRIORITY\", \"ORDER_COMMENT\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_ma_order_lineitem_details": {"database": "BRONZE", "schema": "audit", "name": "sat_ma_order_lineitem_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_ma_order_lineitem_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_ma_order_lineitem_details.sql", "unique_id": "model.dbt_gx_demo.sat_ma_order_lineitem_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_ma_order_lineitem_details"], "alias": "sat_ma_order_lineitem_details", "checksum": {"name": "sha256", "checksum": "1b6caa1ca530a884e152e312997fb4a0d1c662ab002616ab0e5fc97708f72cc5"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.5124078, "relation_name": "BRONZE.audit.sat_ma_order_lineitem_details", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"ORDER_PK\" -%}\n{%- set src_cdk = [\"ORDERKEY\", \"LINENUMBER\"] -%}\n{%- set src_hashdiff = \"MA_LINEITEM_HASHDIFF\" -%}\n{%- set src_payload = [\"COMMITDATE\", \"DISCOUNT\", \"EXTENDEDPRICE\", \"LINE_COMMENT\",\n                       \"QUANTITY\", \"RECEIPTDATE\", \"RETURNFLAG\", \"SHIPDATE\",\n                       \"SHIPINSTRUCT\", \"SHIPMODE\", \"TAX\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n\n                {{ dbtvault.ma_sat(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\n                                   src_payload=src_payload, src_eff=src_eff, src_ldts=src_ldts,\n                                   src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.ma_sat"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_inv_part_details": {"database": "BRONZE", "schema": "audit", "name": "sat_inv_part_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_inv_part_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_inv_part_details.sql", "unique_id": "model.dbt_gx_demo.sat_inv_part_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_inv_part_details"], "alias": "sat_inv_part_details", "checksum": {"name": "sha256", "checksum": "6aa214e32b9067c6ede916fb69edb012e2b0ed08758b8571a7131b7f11598da7"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.55451, "relation_name": "BRONZE.audit.sat_inv_part_details", "raw_code": "{%- set source_model = \"v_stg_inventory\" -%}\n{%- set src_pk = \"PART_PK\" -%}\n{%- set src_hashdiff = \"PART_HASHDIFF\" -%}\n{%- set src_payload = [\"PART_NAME\", \"PART_MFGR\", \"PART_BRAND\", \"PART_TYPE\", \"PART_SIZE\", \"PART_CONTAINER\", \"PART_RETAILPRICE\", \"PART_COMMENT\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }}", "language": "sql", "refs": [["v_stg_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_gx_demo.v_stg_inventory"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_order_customer_details": {"database": "BRONZE", "schema": "audit", "name": "sat_order_customer_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_order_customer_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_order_customer_details.sql", "unique_id": "model.dbt_gx_demo.sat_order_customer_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_order_customer_details"], "alias": "sat_order_customer_details", "checksum": {"name": "sha256", "checksum": "e5ff7d1fb284c501a5c9e18b0b37cc6a00612babb235a5398b7fcb5d31d80312"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.5710866, "relation_name": "BRONZE.audit.sat_order_customer_details", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"CUSTOMER_PK\" -%}\n{%- set src_hashdiff = \"CUSTOMER_HASHDIFF\" -%}\n{%- set src_payload = [\"CUSTOMER_NAME\", \"CUSTOMER_ADDRESS\", \"CUSTOMER_PHONE\",\n                       \"CUSTOMER_ACCBAL\", \"CUSTOMER_MKTSEGMENT\", \"CUSTOMER_COMMENT\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "model.dbt_gx_demo.sat_order_cust_region_details": {"database": "BRONZE", "schema": "audit", "name": "sat_order_cust_region_details", "resource_type": "model", "package_name": "dbt_gx_demo", "path": "bronze/audit/raw_vault/sats/sales_demo/sat_order_cust_region_details.sql", "original_file_path": "models/bronze/audit/raw_vault/sats/sales_demo/sat_order_cust_region_details.sql", "unique_id": "model.dbt_gx_demo.sat_order_cust_region_details", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "sats", "sales_demo", "sat_order_cust_region_details"], "alias": "sat_order_cust_region_details", "checksum": {"name": "sha256", "checksum": "22a8a49c55e6e28d4b37bc2428066afea51c4eb7b46c444a67a84936143313bb"}, "config": {"enabled": true, "alias": null, "schema": "audit", "database": null, "tags": ["audit"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["audit"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "audit", "tags": ["audit"], "materialized": "table"}, "created_at": 1695341477.5862179, "relation_name": "BRONZE.audit.sat_order_cust_region_details", "raw_code": "{%- set source_model = \"v_stg_orders\" -%}\n{%- set src_pk = \"CUSTOMER_PK\" -%}\n{%- set src_hashdiff = \"CUSTOMER_REGION_HASHDIFF\" -%}\n{%- set src_payload = [\"CUSTOMER_REGION_NAME\", \"CUSTOMER_REGION_COMMENT\"] -%}\n{%- set src_eff = \"EFFECTIVE_FROM\" -%}\n{%- set src_ldts = \"LOAD_DATE\" -%}\n{%- set src_source = \"RECORD_SOURCE\" -%}\n\n{{ dbtvault.sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                src_payload=src_payload, src_eff=src_eff,\n                src_ldts=src_ldts, src_source=src_source,\n                source_model=source_model) }}", "language": "sql", "refs": [["v_stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtvault.sat"], "nodes": ["model.dbt_gx_demo.v_stg_orders"]}, "compiled_path": null}, "analysis.dbt_gx_demo.codegen_demo_create_base_model": {"database": "BRONZE", "schema": "LANDING", "name": "codegen_demo_create_base_model", "resource_type": "analysis", "package_name": "dbt_gx_demo", "path": "analysis/codegen_demo_create_base_model.sql", "original_file_path": "analyses/codegen_demo_create_base_model.sql", "unique_id": "analysis.dbt_gx_demo.codegen_demo_create_base_model", "fqn": ["dbt_gx_demo", "analysis", "codegen_demo_create_base_model"], "alias": "codegen_demo_create_base_model", "checksum": {"name": "sha256", "checksum": "4f9056764dad7e16a9e50c2e66628ec8d159b94f5ffe7a69e275144a3adb1d63"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341477.6124697, "relation_name": null, "raw_code": "{{ codegen.generate_base_model(\n    source_name='tpch_sample',\n    table_name='LINEITEM',\n    materialized='table'\n) }}", "language": "sql", "refs": [], "sources": [["tpch_sample", "LINEITEM"]], "metrics": [], "depends_on": {"macros": ["macro.codegen.generate_base_model"], "nodes": ["source.dbt_gx_demo.tpch_sample.LINEITEM"]}, "compiled_path": null}, "analysis.dbt_gx_demo.codegen_demo_create_source": {"database": "BRONZE", "schema": "LANDING", "name": "codegen_demo_create_source", "resource_type": "analysis", "package_name": "dbt_gx_demo", "path": "analysis/codegen_demo_create_source.sql", "original_file_path": "analyses/codegen_demo_create_source.sql", "unique_id": "analysis.dbt_gx_demo.codegen_demo_create_source", "fqn": ["dbt_gx_demo", "analysis", "codegen_demo_create_source"], "alias": "codegen_demo_create_source", "checksum": {"name": "sha256", "checksum": "e0514f66e791c446f754e0c7819bffcbf238a844235ea1b08e63155ecd8a7be8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341477.7128227, "relation_name": null, "raw_code": "{# set models_to_generate = codegen.get_models(directory='flight_demo') #}\n{{ codegen.generate_model_yaml(\n    model_names = ['stg_airline_info']\n) }}", "language": "sql", "refs": [["stg_airline_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.codegen.generate_model_yaml"], "nodes": ["model.dbt_gx_demo.stg_airline_info"]}, "compiled_path": null}, "operation.dbt_gx_demo.dbt_gx_demo-on-run-end-0": {"database": "BRONZE", "schema": "LANDING", "name": "dbt_gx_demo-on-run-end-0", "resource_type": "operation", "package_name": "dbt_gx_demo", "path": "hooks/dbt_gx_demo-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.dbt_gx_demo.dbt_gx_demo-on-run-end-0", "fqn": ["dbt_gx_demo", "hooks", "dbt_gx_demo-on-run-end-0"], "alias": "dbt_gx_demo-on-run-end-0", "checksum": {"name": "sha256", "checksum": "ff0c0bb19c86b3cd87b9b7cbd324e399e9666103009175dfe0171b605d02d421"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341477.7400758, "relation_name": null, "raw_code": "{{ log_dbt_results(results) }}", "language": "sql", "refs": [["failures"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_gx_demo.log_dbt_results"], "nodes": ["model.dbt_gx_demo.failures"]}, "compiled_path": null, "compiled": true, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "index": 0}, "operation.dbt_gx_demo.dbt_gx_demo-on-run-end-1": {"database": "BRONZE", "schema": "LANDING", "name": "dbt_gx_demo-on-run-end-1", "resource_type": "operation", "package_name": "dbt_gx_demo", "path": "hooks/dbt_gx_demo-on-run-end-1.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.dbt_gx_demo.dbt_gx_demo-on-run-end-1", "fqn": ["dbt_gx_demo", "hooks", "dbt_gx_demo-on-run-end-1"], "alias": "dbt_gx_demo-on-run-end-1", "checksum": {"name": "sha256", "checksum": "ff0c0bb19c86b3cd87b9b7cbd324e399e9666103009175dfe0171b605d02d421"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341477.751704, "relation_name": null, "raw_code": "{{ dbt_artifacts.upload_results(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.upload_results"], "nodes": []}, "compiled_path": "target/compiled/dbt_gx_demo/./dbt_project.yml/hooks/dbt_gx_demo-on-run-end-1.sql", "compiled": true, "compiled_code": "\n\n        \n            \n            \n            \n            \n\n    \n\n            \n            \n            \n            \n\n            \n            \n            \n            \n\n            \n            \n            \n            \n\n        \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n    \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n    \n\n        \n        \n        \n        \n\n    \n\n        \n        \n        \n        \n\n        \n        \n        \n        \n\n    \n\n    ", "extra_ctes_injected": true, "extra_ctes": [], "index": 1}, "model.dbt_snowflake_monitoring.warehouses_type2_dimension": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "warehouses_type2_dimension", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "warehouses_type2_dimension.sql", "original_file_path": "models/warehouses_type2_dimension.sql", "unique_id": "model.dbt_snowflake_monitoring.warehouses_type2_dimension", "fqn": ["dbt_snowflake_monitoring", "warehouses_type2_dimension"], "alias": "warehouses_type2_dimension", "checksum": {"name": "sha256", "checksum": "37abb4d4f1283247f544b2b4fadca8231c7e46bfcdd8a1a4d786232ee9917faf"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model tracks the warehouse size and name over time. It contains 1 row per period that the warehouse state applies. The following caveats apply:\n\n- if user changes the warehouse size/name, we won't register the new attributes until the next query runs against it\n- this could also mean that warehouse size changes are not registered if they were changed and then reverted\n", "columns": {"warehouse_id": {"name": "warehouse_id", "description": "The unique warehouse ID (assigned by Snowflake) that corresponds to the warehouse name in your account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "The name of the warehouse during the given period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_size": {"name": "warehouse_size", "description": "The size of the warehouse during the given period", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "Timestamp for the beginning of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "Timestamp for the end of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_current": {"name": "is_current", "description": "Boolean indicator to filter to the most recent state of the warehouse", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/warehouses_type2_dimension.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "table"}, "created_at": 1695341479.4567676, "relation_name": "BRONZE.OBSERVABILITY.warehouses_type2_dimension", "raw_code": "{{ config(materialized='table') }}\n\nwith\nstop_threshold as (\n    select max(start_time) as timestamp\n    from {{ ref('stg_query_history') }}\n),\n\nwarehouse_snapshots_base as (\n    select\n        warehouse_id,\n        warehouse_size,\n        warehouse_name,\n        start_time as timestamp,\n        lag(warehouse_size) over (partition by warehouse_id order by start_time) as prev_warehouse_size,\n        lag(warehouse_name) over (partition by warehouse_id order by start_time) as prev_warehouse_name\n    from {{ ref('stg_query_history') }}\n    where\n        warehouse_size is not null\n),\n\nwarehouse_snapshots as (\n    select\n        warehouse_id,\n        warehouse_name,\n        warehouse_size,\n        timestamp as valid_from,\n        lead(timestamp) over (partition by warehouse_id order by timestamp) as _valid_to\n    from warehouse_snapshots_base\n    where\n        warehouse_size != coalesce(prev_warehouse_size, '')\n        or warehouse_name != coalesce(prev_warehouse_name, '')\n)\n\nselect\n    warehouse_snapshots.warehouse_id,\n    warehouse_snapshots.warehouse_name,\n    warehouse_snapshots.warehouse_size,\n    warehouse_snapshots.valid_from,\n    coalesce(warehouse_snapshots._valid_to, stop_threshold.timestamp) as valid_to,\n    warehouse_snapshots._valid_to is null as is_current\nfrom warehouse_snapshots\ncross join stop_threshold", "language": "sql", "refs": [["stg_query_history"], ["stg_query_history"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.stg_query_history", "model.dbt_snowflake_monitoring.stg_query_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.cost_per_query": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "cost_per_query", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "cost_per_query.sql", "original_file_path": "models/cost_per_query.sql", "unique_id": "model.dbt_snowflake_monitoring.cost_per_query", "fqn": ["dbt_snowflake_monitoring", "cost_per_query"], "alias": "cost_per_query", "checksum": {"name": "sha256", "checksum": "10c7b659a0161568bf38e1444aaf3b3b7b2f8bde0019e244f21fa045e8dc12c7"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A model to help you identify expensive Snowflake queries. It includes 1 row per query, along with the estimated query cost.", "columns": {"query_id": {"name": "query_id", "description": "Primary key. Internal/system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Query statement start time (in the UTC time zone). The table is naturally clustered on this column, meaning your queries will run much faster if you filter records using this column.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "Query statement end time (in the UTC time zone).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_start_time": {"name": "execution_start_time", "description": "When the query began executing on the warehouse (in the UTC time zone). This will always be after the start_time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compute_cost": {"name": "compute_cost", "description": "Compute costs associated with the query, in the primary currency of your account. Can be 0 if the query did not run on a warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloud_services_cost": {"name": "cloud_services_cost", "description": "Cloud service costs associated with the query, in the primary currency of your account. Can be 0 if total cloud services credits consumption was less than 10% of total compute credits consumption on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_cost": {"name": "query_cost", "description": "Total cost associated with the query, calculated as sum of compute_cost and cloud_services_cost, in the primary currency of your account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ran_on_warehouse": {"name": "ran_on_warehouse", "description": "Indicator for whether the query ran on a warehouse. Certain queries, such as metadata queries, can be entirely processed in cloud services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Spend currency, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/cost_per_query.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "table"}, "created_at": 1695341479.3444452, "relation_name": "BRONZE.OBSERVABILITY.cost_per_query", "raw_code": "{{ config(materialized='table') }}\n\nwith\nstop_threshold as (\n    select max(end_time) as latest_ts\n    from {{ ref('stg_warehouse_metering_history') }}\n),\n\nfiltered_queries as (\n    select\n        query_id,\n        query_text as original_query_text,\n        credits_used_cloud_services,\n        warehouse_id,\n        warehouse_size is not null as ran_on_warehouse,\n        timeadd(\n            'millisecond',\n            queued_overload_time + compilation_time\n            + queued_provisioning_time + queued_repair_time\n            + list_external_files_time,\n            start_time\n        ) as execution_start_time,\n        start_time,\n        end_time\n    from {{ ref('stg_query_history') }}\n    where end_time <= (select latest_ts from stop_threshold)\n),\n\nhours_list as (\n    select\n        dateadd(\n            'hour',\n            '-' || row_number() over (order by seq4() asc),\n            dateadd('day', '+1', current_date::timestamp_tz)\n        ) as hour_start,\n        dateadd('hour', '+1', hour_start) as hour_end\n    from table(generator(rowcount => (24 * 730)))\n),\n\n-- 1 row per hour a query ran\nquery_hours as (\n    select\n        hours_list.hour_start,\n        hours_list.hour_end,\n        queries.*\n    from hours_list\n    inner join filtered_queries as queries\n        on hours_list.hour_start >= date_trunc('hour', queries.execution_start_time)\n            and hours_list.hour_start < queries.end_time\n            and queries.ran_on_warehouse\n),\n\nquery_seconds_per_hour as (\n    select\n        *,\n        datediff('millisecond', greatest(execution_start_time, hour_start), least(end_time, hour_end)) as num_milliseconds_query_ran,\n        sum(num_milliseconds_query_ran) over (partition by warehouse_id, hour_start) as total_query_milliseconds_in_hour,\n        div0(num_milliseconds_query_ran, total_query_milliseconds_in_hour) as fraction_of_total_query_time_in_hour,\n        hour_start as hour\n    from query_hours\n),\n\ncredits_billed_hourly as (\n    select\n        start_time as hour,\n        warehouse_id,\n        credits_used_compute,\n        credits_used_cloud_services\n    from {{ ref('stg_warehouse_metering_history') }}\n),\n\nquery_cost as (\n    select\n        query_seconds_per_hour.*,\n        credits_billed_hourly.credits_used_compute * daily_rates.effective_rate as actual_warehouse_cost,\n        credits_billed_hourly.credits_used_compute * query_seconds_per_hour.fraction_of_total_query_time_in_hour * daily_rates.effective_rate as allocated_compute_cost_in_hour\n    from query_seconds_per_hour\n    inner join credits_billed_hourly\n        on query_seconds_per_hour.warehouse_id = credits_billed_hourly.warehouse_id\n            and query_seconds_per_hour.hour = credits_billed_hourly.hour\n    inner join {{ ref('daily_rates') }}\n        on date(query_seconds_per_hour.start_time) = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'compute'\n),\n\ncost_per_query as (\n    select\n        query_id,\n        any_value(start_time) as start_time,\n        any_value(end_time) as end_time,\n        any_value(execution_start_time) as execution_start_time,\n        sum(allocated_compute_cost_in_hour) as compute_cost,\n        any_value(credits_used_cloud_services) as credits_used_cloud_services,\n        any_value(ran_on_warehouse) as ran_on_warehouse\n    from query_cost\n    group by 1\n),\n\ncredits_billed_daily as (\n    select\n        date(hour) as date,\n        sum(credits_used_compute) as daily_credits_used_compute,\n        sum(credits_used_cloud_services) as daily_credits_used_cloud_services,\n        greatest(daily_credits_used_cloud_services - daily_credits_used_compute * 0.1, 0) as daily_billable_cloud_services\n    from credits_billed_hourly\n    group by 1\n),\n\nall_queries as (\n    select\n        query_id,\n        start_time,\n        end_time,\n        execution_start_time,\n        compute_cost,\n        credits_used_cloud_services,\n        ran_on_warehouse\n    from cost_per_query\n\n    union all\n\n    select\n        query_id,\n        start_time,\n        end_time,\n        execution_start_time,\n        0 as compute_cost,\n        credits_used_cloud_services,\n        ran_on_warehouse\n    from filtered_queries\n    where\n        not ran_on_warehouse\n)\n\nselect\n    all_queries.query_id,\n    all_queries.start_time,\n    all_queries.end_time,\n    all_queries.execution_start_time,\n    all_queries.compute_cost,\n    -- For the most recent day, which is not yet complete, this calculation won't be perfect.\n    -- For example, at 12PM on the latest day, it's possible that cloud credits make up <10% of compute cost, so the queries\n    -- from that day are not allocated any cloud_services_cost. The next time the model runs, after we have the full day of data,\n    -- this may change if cloud credits make up >10% of compute cost.\n    (div0(all_queries.credits_used_cloud_services, credits_billed_daily.daily_credits_used_cloud_services) * credits_billed_daily.daily_billable_cloud_services) * coalesce(daily_rates.effective_rate, current_rates.effective_rate) as cloud_services_cost,\n    all_queries.compute_cost + cloud_services_cost as query_cost,\n    all_queries.ran_on_warehouse,\n    coalesce(daily_rates.currency, current_rates.currency) as currency\nfrom all_queries\ninner join credits_billed_daily\n    on date(all_queries.start_time) = credits_billed_daily.date\nleft join {{ ref('daily_rates') }}\n    on date(all_queries.start_time) = daily_rates.date\n        and daily_rates.service_type = 'COMPUTE'\n        and daily_rates.usage_type = 'cloud services'\ninner join {{ ref('daily_rates') }} as current_rates\n    on current_rates.is_latest_rate\n        and current_rates.service_type = 'COMPUTE'\n        and current_rates.usage_type = 'cloud services'\norder by all_queries.start_time asc", "language": "sql", "refs": [["stg_warehouse_metering_history"], ["stg_query_history"], ["stg_warehouse_metering_history"], ["daily_rates"], ["daily_rates"], ["daily_rates"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.stg_warehouse_metering_history", "model.dbt_snowflake_monitoring.stg_query_history", "model.dbt_snowflake_monitoring.stg_warehouse_metering_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.hourly_spend": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "hourly_spend", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "hourly_spend.sql", "original_file_path": "models/hourly_spend.sql", "unique_id": "model.dbt_snowflake_monitoring.hourly_spend", "fqn": ["dbt_snowflake_monitoring", "hourly_spend"], "alias": "hourly_spend", "checksum": {"name": "sha256", "checksum": "13f34df6a6b6f23b38d2310f2b33555f88a13f6fcfcb425f5afffbdd5e35e465"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table of hourly spend broken down by services as listed on the invoice, with additional granularity.", "columns": {"hour": {"name": "hour", "description": "Hour of spend.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service": {"name": "service", "description": "Top level spend category per Snowflake invoice. One of Storage, Compute, Cloud Services, Adj For Incl Cloud Services, Automatic Clustering, Materialized Views, Snowpipe, Query Acceleration, Replication, or Search Optimization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "storage_type": {"name": "storage_type", "description": "Subcategories where service = \"Storage\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "Subcategories where service = \"Compute\" or \"Cloud Services\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "Subcategories where service = \"Serverless Tasks\" or service = \"Storage\" and storage_type = \"Table and Time Travel\" or \"Failsafe\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "Spend in the currency described by the 'currency' column", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_net_cloud_services": {"name": "spend_net_cloud_services", "description": "Spend with cloud service adjustments taken into account. The service 'Adj For Incl Cloud Services' has a value of 0 for this column.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Spend currency, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/hourly_spend.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "table"}, "created_at": 1695341479.4498124, "relation_name": "BRONZE.OBSERVABILITY.hourly_spend", "raw_code": "-- depends_on: {{ ref('stg_metering_history') }}\n{{ config(materialized='table') }}\n\nwith hour_spine as (\n    {% if execute %}\n{% set stg_metering_history_relation = load_relation(ref('stg_metering_history')) %}\n        {% if stg_metering_history_relation %}\n            {% set results = run_query(\"select min(convert_timezone('UTC', start_time)) from \" ~ ref('stg_metering_history')) %}\n            {% set start_date = \"'\" ~ results.columns[0][0] ~ \"'\" %}\n            {% set results = run_query(\"select dateadd(hour, 1, max(convert_timezone('UTC', start_time))) from \" ~ ref('stg_metering_history')) %}\n            {% set end_date = \"'\" ~ results.columns[0][0] ~ \"'\" %}\n        {% else %}\n            {% set start_date = \"'2023-01-01 00:00:00'\" %} {# this is just a dummy date for initial compilations before stg_metering_history exists #}\n            {% set end_date = \"'2023-01-01 01:00:00'\" %} {# this is just a dummy date for initial compilations before stg_metering_history exists #}\n        {% endif %}\n    {% endif %}\n{{ dbt_utils.date_spine(\n            datepart=\"hour\",\n            start_date=start_date,\n            end_date=end_date\n        )\n    }}\n),\n\nhours as (\n    select\n        date_hour as hour,\n        hour::date as date,\n        count(hour) over (partition by date) as hours_thus_far,\n        day(last_day(date)) as days_in_month\n    from hour_spine\n),\n\nstorage_terabytes_daily as (\n    select\n        date,\n        'Table and Time Travel' as storage_type,\n        database_name,\n        sum(average_database_bytes) / power(1024, 4) as storage_terabytes\n    from {{ ref('stg_database_storage_usage_history') }}\n    group by 1, 2, 3\n    union all\n    select\n        date,\n        'Failsafe' as storage_type,\n        database_name,\n        sum(average_failsafe_bytes) / power(1024, 4) as storage_terabytes\n    from {{ ref('stg_database_storage_usage_history') }}\n    group by 1, 2, 3\n    union all\n    select\n        date,\n        'Stage' as storage_type,\n        null as database_name,\n        sum(average_stage_bytes) / power(1024, 4) as storage_terabytes\n    from {{ ref('stg_stage_storage_usage_history') }}\n    group by 1, 2, 3\n),\n\nstorage_spend_hourly as (\n    select\n        hours.hour,\n        'Storage' as service,\n        storage_terabytes_daily.storage_type,\n        null as warehouse_name,\n        storage_terabytes_daily.database_name,\n        coalesce(\n            sum(\n                div0(\n                    storage_terabytes_daily.storage_terabytes,\n                    hours.days_in_month * 24\n                ) * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join storage_terabytes_daily on hours.date = convert_timezone('UTC', storage_terabytes_daily.date)\n    left join {{ ref('daily_rates') }}\n        on storage_terabytes_daily.date = daily_rates.date\n            and daily_rates.service_type = 'STORAGE'\n            and daily_rates.usage_type = 'storage'\n    group by 1, 2, 3, 4, 5\n),\n\ndata_transfer_spend_hourly as (\n    -- Right now we don't have a way of getting this at an hourly grain\n    -- We can get source cloud + region, target cloud + region, and bytes transferred at an hourly grain from DATA_TRANSFER_HISTORY\n    -- But Snowflake doesn't provide data transfer rates programmatically, so we can't get the cost\n    -- We could make a LUT from https://www.snowflake.com/legal-files/CreditConsumptionTable.pdf but it would be a lot of work to maintain and would frequently become out of date\n    -- So for now we just use the daily reported usage and evenly distribute it across the day\n    select\n        hours.hour,\n        'Data Transfer' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(stg_usage_in_currency_daily.usage_in_currency / hours.hours_thus_far, 0) as spend,\n        spend as spend_net_cloud_services,\n        stg_usage_in_currency_daily.currency as currency\n    from hours\n    left join {{ ref('stg_usage_in_currency_daily') }} on\n        stg_usage_in_currency_daily.account_locator = {{ account_locator() }}\n        and stg_usage_in_currency_daily.usage_type = 'data transfer'\n        and hours.hour::date = stg_usage_in_currency_daily.usage_date\n),\n\ncompute_spend_hourly as (\n    select\n        hours.hour,\n        'Compute' as service,\n        null as storage_type,\n        stg_metering_history.name as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used_compute * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_history') }} on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n    left join {{ ref('daily_rates') }}\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'compute'\n    where\n        stg_metering_history.service_type = 'WAREHOUSE_METERING' and stg_metering_history.name != 'CLOUD_SERVICES_ONLY'\n    group by 1, 2, 3, 4\n),\n\nserverless_task_spend_hourly as (\n    select\n        hours.hour,\n        'Serverless Tasks' as service,\n        null as storage_type,\n        null as warehouse_name,\n        stg_serverless_task_history.database_name,\n        coalesce(\n            sum(\n                stg_serverless_task_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_serverless_task_history') }} on\n        hours.hour = date_trunc('hour', stg_serverless_task_history.start_time)\n    left join {{ ref('daily_rates') }}\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'serverless tasks'\n    group by 1, 2, 3, 4, 5\n),\n\nadj_for_incl_cloud_services_hourly as (\n    select\n        hours.hour,\n        'Adj For Incl Cloud Services' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_daily_history.credits_adjustment_cloud_services * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        0 as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_daily_history') }} on\n        hours.hour = stg_metering_daily_history.date\n    left join {{ ref('daily_rates') }}\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'cloud services'\n    group by 1, 2, 3, 4\n),\n\n_cloud_services_usage_hourly as (\n    select\n        hours.hour,\n        hours.date,\n        'Cloud Services' as service,\n        null as storage_type,\n        case\n            when\n                stg_metering_history.name = 'CLOUD_SERVICES_ONLY' then 'Cloud Services Only'\n            else stg_metering_history.name\n        end as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(stg_metering_history.credits_used_cloud_services), 0\n        ) as credits_used_cloud_services\n    from hours\n    left join {{ ref('stg_metering_history') }} on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'WAREHOUSE_METERING'\n    group by 1, 2, 3, 4, 5\n),\n\n_cloud_services_billed_daily as (\n    select\n        date,\n        sum(credits_used_cloud_services) as credits_used_cloud_services,\n        sum(\n            credits_used_cloud_services + credits_adjustment_cloud_services\n        ) as credits_used_cloud_services_billable\n    from {{ ref('stg_metering_daily_history') }}\n    where\n        service_type = 'WAREHOUSE_METERING'\n    group by 1\n),\n\ncloud_services_spend_hourly as (\n    select\n        _cloud_services_usage_hourly.hour,\n        _cloud_services_usage_hourly.service,\n        _cloud_services_usage_hourly.storage_type,\n        _cloud_services_usage_hourly.warehouse_name,\n        _cloud_services_usage_hourly.database_name,\n        _cloud_services_usage_hourly.credits_used_cloud_services * daily_rates.effective_rate as spend,\n\n        (\n            div0(\n                _cloud_services_usage_hourly.credits_used_cloud_services,\n                _cloud_services_billed_daily.credits_used_cloud_services\n            ) * _cloud_services_billed_daily.credits_used_cloud_services_billable\n        ) * daily_rates.effective_rate as spend_net_cloud_services,\n        daily_rates.currency\n    from _cloud_services_usage_hourly\n    inner join _cloud_services_billed_daily on\n        _cloud_services_usage_hourly.date = _cloud_services_billed_daily.date\n    left join {{ ref('daily_rates') }}\n        on _cloud_services_usage_hourly.date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'cloud services'\n\n),\n\nautomatic_clustering_spend_hourly as (\n    select\n        hours.hour,\n        'Automatic Clustering' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_history') }} on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'AUTO_CLUSTERING'\n    left join {{ ref('daily_rates') }}\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'automatic clustering'\n    group by 1, 2, 3, 4\n),\n\nmaterialized_view_spend_hourly as (\n    select\n        hours.hour,\n        'Materialized Views' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_history') }} on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'MATERIALIZED_VIEW'\n    left join {{ ref('daily_rates') }}\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'materialized views'\n    group by 1, 2, 3, 4\n),\n\nsnowpipe_spend_hourly as (\n    select\n        hours.hour,\n        'Snowpipe' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_history') }} on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'PIPE'\n    left join {{ ref('daily_rates') }}\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'snowpipe'\n    group by 1, 2, 3, 4\n),\n\nsnowpipe_streaming_spend_hourly as (\n    select\n        hours.hour,\n        'Snowpipe Streaming' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_history') }} on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'SNOWPIPE_STREAMING'\n    left join {{ ref('daily_rates') }}\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'snowpipe streaming'\n    group by 1, 2, 3, 4\n),\n\nquery_acceleration_spend_hourly as (\n    select\n        hours.hour,\n        'Query Acceleration' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_history') }} on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'QUERY_ACCELERATION'\n    left join {{ ref('daily_rates') }}\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'query acceleration'\n    group by 1, 2, 3, 4\n),\n\nreplication_spend_hourly as (\n    select\n        hours.hour,\n        'Replication' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_history') }} on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'REPLICATION'\n    left join {{ ref('daily_rates') }}\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'replication'\n    group by 1, 2, 3, 4\n),\n\nsearch_optimization_spend_hourly as (\n    select\n        hours.hour,\n        'Search Optimization' as service,\n        null as storage_type,\n        null as warehouse_name,\n        null as database_name,\n        coalesce(\n            sum(\n                stg_metering_history.credits_used * daily_rates.effective_rate\n            ),\n            0\n        ) as spend,\n        spend as spend_net_cloud_services,\n        any_value(daily_rates.currency) as currency\n    from hours\n    left join {{ ref('stg_metering_history') }} on\n        hours.hour = convert_timezone(\n            'UTC', stg_metering_history.start_time\n        )\n        and stg_metering_history.service_type = 'SEARCH_OPTIMIZATION'\n    left join {{ ref('daily_rates') }}\n        on hours.hour::date = daily_rates.date\n            and daily_rates.service_type = 'COMPUTE'\n            and daily_rates.usage_type = 'search optimization'\n    group by 1, 2, 3, 4\n),\n\nunioned as (\n    select * from storage_spend_hourly\n    union all\n    select * from data_transfer_spend_hourly\n    union all\n    select * from compute_spend_hourly\n    union all\n    select * from adj_for_incl_cloud_services_hourly\n    union all\n    select * from cloud_services_spend_hourly\n    union all\n    select * from automatic_clustering_spend_hourly\n    union all\n    select * from materialized_view_spend_hourly\n    union all\n    select * from snowpipe_spend_hourly\n    union all\n    select * from snowpipe_streaming_spend_hourly\n    union all\n    select * from query_acceleration_spend_hourly\n    union all\n    select * from replication_spend_hourly\n    union all\n    select * from search_optimization_spend_hourly\n    union all\n    select * from serverless_task_spend_hourly\n)\n\nselect\n    convert_timezone('UTC', hour)::timestamp_ltz as hour,\n    service,\n    storage_type,\n    warehouse_name,\n    database_name,\n    spend,\n    spend_net_cloud_services,\n    currency\nfrom unioned", "language": "sql", "refs": [["stg_metering_history"], ["stg_database_storage_usage_history"], ["stg_database_storage_usage_history"], ["stg_stage_storage_usage_history"], ["daily_rates"], ["stg_usage_in_currency_daily"], ["stg_metering_history"], ["daily_rates"], ["stg_serverless_task_history"], ["daily_rates"], ["stg_metering_daily_history"], ["daily_rates"], ["stg_metering_history"], ["stg_metering_daily_history"], ["daily_rates"], ["stg_metering_history"], ["daily_rates"], ["stg_metering_history"], ["daily_rates"], ["stg_metering_history"], ["daily_rates"], ["stg_metering_history"], ["daily_rates"], ["stg_metering_history"], ["daily_rates"], ["stg_metering_history"], ["daily_rates"], ["stg_metering_history"], ["daily_rates"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_snowflake_monitoring.account_locator"], "nodes": ["model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_database_storage_usage_history", "model.dbt_snowflake_monitoring.stg_database_storage_usage_history", "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_serverless_task_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_metering_daily_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_metering_daily_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.daily_rates"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.daily_spend": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "daily_spend", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "daily_spend.sql", "original_file_path": "models/daily_spend.sql", "unique_id": "model.dbt_snowflake_monitoring.daily_spend", "fqn": ["dbt_snowflake_monitoring", "daily_spend"], "alias": "daily_spend", "checksum": {"name": "sha256", "checksum": "1a7c1ee42999994a81570448defb21c0a53aadfe98ce03d6061539bbdb0ebbd2"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Table of daily spend broken down by services as listed on the invoice, with additional granularity.", "columns": {"date": {"name": "date", "description": "Date of spend in UTC timezone to match with Snowflake's billing timezone.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service": {"name": "service", "description": "Top level spend category per Snowflake invoice. One of Storage, Compute, Cloud Services, Adj For Incl Cloud Services, Automatic Clustering, Materialized Views, Snowpipe, Query Acceleration, Replication, or Search Optimization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "storage_type": {"name": "storage_type", "description": "Subcategories where service = \"Storage\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "Subcategories where service = \"Compute\" or \"Cloud Services\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "Subcategories where service = \"Serverless Tasks\" or service = \"Storage\" and storage_type = \"Table and Time Travel\" or \"Failsafe\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "Spend in the currency described by the 'currency' column", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend_net_cloud_services": {"name": "spend_net_cloud_services", "description": "Spend with cloud service adjustments taken into account. The service 'Adj For Incl Cloud Services' has a value of 0 for this column.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Spend currency, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/daily_spend.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY"}, "created_at": 1695341479.4536011, "relation_name": "BRONZE.OBSERVABILITY.daily_spend", "raw_code": "select\n    convert_timezone('UTC', hour)::date as date, -- get UTC date to align with Snowflake billing\n    service,\n    storage_type,\n    warehouse_name,\n    database_name,\n    sum(spend) as spend,\n    sum(spend_net_cloud_services) as spend_net_cloud_services,\n    any_value(currency) as currency\nfrom {{ ref('hourly_spend') }}\ngroup by 1, 2, 3, 4, 5", "language": "sql", "refs": [["hourly_spend"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.hourly_spend"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.query_history_enriched": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "query_history_enriched", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "query_history_enriched.sql", "original_file_path": "models/query_history_enriched.sql", "unique_id": "model.dbt_snowflake_monitoring.query_history_enriched", "fqn": ["dbt_snowflake_monitoring", "query_history_enriched"], "alias": "query_history_enriched", "checksum": {"name": "sha256", "checksum": "a423154827e25909c3c896e34ae6a729c165793e2192afa0c835dd63e07efbc4"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["query_id", "start_time"], "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": [{"sql": "{{ create_regexp_replace_udf(this) }}", "transaction": true, "index": null}, {"sql": "{{ create_merge_objects_udf(this) }}", "transaction": true, "index": null}]}, "tags": [], "description": "An enriched version of the query_history model. Contains 1 row per query (query_id).", "columns": {"query_id": {"name": "query_id", "description": "Primary key. Internal/system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_text": {"name": "query_text", "description": "Text of the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_id": {"name": "database_id", "description": "Internal/system-generated identifier for the database that was in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "Database that was in use at the time of the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_id": {"name": "schema_id", "description": "Internal/system-generated identifier for the schema that was in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "Schema that was in use at the time of the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_type": {"name": "query_type", "description": "DML, query, etc. If the query failed, then the query type may be UNKNOWN.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "Session that executed the statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "User who issued the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role_name": {"name": "role_name", "description": "Role that was active in the session at the time of the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_id": {"name": "warehouse_id", "description": "Internal/system-generated identifier for the warehouse that was used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "Warehouse that the query executed on, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_size": {"name": "warehouse_size", "description": "Size of the warehouse when this statement executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_type": {"name": "warehouse_type", "description": "Type of the warehouse when this statement executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cluster_number": {"name": "cluster_number", "description": "The cluster (in a multi-cluster warehouse) that this statement executed on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_tag": {"name": "query_tag", "description": "Query tag set for this statement through the QUERY_TAG session parameter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_status": {"name": "execution_status", "description": "Execution status for the query. Valid values: `success`, `fail`, `incident`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_code": {"name": "error_code", "description": "Error code, if the query returned an error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_message": {"name": "error_message", "description": "Error message, if the query returned an error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Statement start time (in the UTC time zone). The table is naturally clustered on this column, meaning your queries will run much faster if you filter records using this column.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "Statement end time (in the UTC time zone).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_scanned": {"name": "bytes_scanned", "description": "Number of bytes scanned by this statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "percentage_scanned_from_cache": {"name": "percentage_scanned_from_cache", "description": "The percentage of data scanned from the local disk cache. The value ranges from 0.0 to 1.0. Multiply by 100 to get a true percentage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_written": {"name": "bytes_written", "description": "Number of bytes written (e.g. when loading into a table).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_written_to_result": {"name": "bytes_written_to_result", "description": "Number of bytes written to a result object. For example, `select * from . . .` would produce a set of results in tabular format representing each field in the selection. In general, the results object represents whatever is produced as a result of the query, and BYTES_WRITTEN_TO_RESULT represents the size of the returned result.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_read_from_result": {"name": "bytes_read_from_result", "description": "Number of bytes read from a result object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_produced": {"name": "rows_produced", "description": "Number of rows produced by this statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_inserted": {"name": "rows_inserted", "description": "Number of rows inserted by the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_updated": {"name": "rows_updated", "description": "Number of rows updated by the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_deleted": {"name": "rows_deleted", "description": "Number of rows deleted by the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_unloaded": {"name": "rows_unloaded", "description": "Number of rows unloaded during data export.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_deleted": {"name": "bytes_deleted", "description": "Number of bytes deleted by the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "partitions_scanned": {"name": "partitions_scanned", "description": "Number of micro-partitions scanned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "partitions_total": {"name": "partitions_total", "description": "Total micro-partitions of all tables included in this query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_spilled_to_local_storage": {"name": "bytes_spilled_to_local_storage", "description": "Volume of data spilled to local disk on the warehouse nodes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_spilled_to_remote_storage": {"name": "bytes_spilled_to_remote_storage", "description": "Volume of data spilled to remote disk (i.e. AWS S3, Google Cloud Storage, Azure Blob).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_sent_over_the_network": {"name": "bytes_sent_over_the_network", "description": "Volume of data sent over the network.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outbound_data_transfer_cloud": {"name": "outbound_data_transfer_cloud", "description": "Target cloud provider for statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outbound_data_transfer_region": {"name": "outbound_data_transfer_region", "description": "Target region for statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outbound_data_transfer_bytes": {"name": "outbound_data_transfer_bytes", "description": "Number of bytes transferred in statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inbound_data_transfer_cloud": {"name": "inbound_data_transfer_cloud", "description": "Source cloud provider for statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inbound_data_transfer_region": {"name": "inbound_data_transfer_region", "description": "Source region for statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inbound_data_transfer_bytes": {"name": "inbound_data_transfer_bytes", "description": "Number of bytes transferred in statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used_cloud_services": {"name": "credits_used_cloud_services", "description": "Number of credits used for cloud services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "release_version": {"name": "release_version", "description": "Release version in the format of `<major_release>.<minor_release>.<patch_release>`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_invocations": {"name": "external_function_total_invocations", "description": "The aggregate number of times that this query called remote services. For important details, see the Usage Notes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_sent_rows": {"name": "external_function_total_sent_rows", "description": "The total number of rows that this query sent in all calls to all remote services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_received_rows": {"name": "external_function_total_received_rows", "description": "The total number of rows that this query received from all calls to all remote services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_sent_bytes": {"name": "external_function_total_sent_bytes", "description": "The total number of bytes that this query sent in all calls to all remote services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_received_bytes": {"name": "external_function_total_received_bytes", "description": "The total number of bytes that this query received from all calls to all remote services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_load_percent": {"name": "query_load_percent", "description": "The approximate percentage of active compute resources in the warehouse for this query execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_client_generated_statement": {"name": "is_client_generated_statement", "description": "Indicates whether the query was client-generated. These tend to be queries from the Snowflake UI (i.e. Snowsight or the Classic Console).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_acceleration_bytes_scanned": {"name": "query_acceleration_bytes_scanned", "description": "Number of bytes scanned by the query acceleration service.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_acceleration_partitions_scanned": {"name": "query_acceleration_partitions_scanned", "description": "Number of partitions scanned by the query acceleration service.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_acceleration_upper_limit_scale_factor": {"name": "query_acceleration_upper_limit_scale_factor", "description": "Upper limit scale factor that a query would have benefited from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_elapsed_time_ms": {"name": "total_elapsed_time_ms", "description": "Elapsed time (in milliseconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compilation_time_ms": {"name": "compilation_time_ms", "description": "Compilation time (in milliseconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_time_ms": {"name": "execution_time_ms", "description": "Execution time (in milliseconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_provisioning_time_ms": {"name": "queued_provisioning_time_ms", "description": "Time (in milliseconds) spent in the warehouse queue, waiting for the warehouse compute resources to provision, due to warehouse creation, resume, or resize.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_repair_time_ms": {"name": "queued_repair_time_ms", "description": "Time (in milliseconds) spent in the warehouse queue, waiting for compute resources in the warehouse to be repaired.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_overload_time_ms": {"name": "queued_overload_time_ms", "description": "Time (in milliseconds) spent in the warehouse queue, due to the warehouse being overloaded by the current query workload.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_blocked_time_ms": {"name": "transaction_blocked_time_ms", "description": "Time (in milliseconds) spent blocked by a concurrent DML.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_external_files_time_ms": {"name": "list_external_files_time_ms", "description": "Time (in milliseconds) spent listing external files.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_elapsed_time_s": {"name": "total_elapsed_time_s", "description": "Elapsed time (in seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compilation_time_s": {"name": "compilation_time_s", "description": "Compilation time (in seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_time_s": {"name": "execution_time_s", "description": "Execution time (in seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_provisioning_time_s": {"name": "queued_provisioning_time_s", "description": "Time (in seconds) spent in the warehouse queue, waiting for the warehouse compute resources to provision, due to warehouse creation, resume, or resize.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_repair_time_s": {"name": "queued_repair_time_s", "description": "Time (in seconds) spent in the warehouse queue, waiting for compute resources in the warehouse to be repaired.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_overload_time_s": {"name": "queued_overload_time_s", "description": "Time (in seconds) spent in the warehouse queue, due to the warehouse being overloaded by the current query workload.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_blocked_time_s": {"name": "transaction_blocked_time_s", "description": "Time (in seconds) spent blocked by a concurrent DML.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_external_files_time_s": {"name": "list_external_files_time_s", "description": "Time (in seconds) spent listing external files.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_start_time": {"name": "execution_start_time", "description": "When the query began executing on the warehouse (in the UTC time zone). This will always be after the start_time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compute_cost": {"name": "compute_cost", "description": "Compute costs associated with the query, in the primary currency of your account. Can be 0 if the query did not run on a warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cloud_services_cost": {"name": "cloud_services_cost", "description": "Cloud service costs associated with the query, in the primary currency of your account. Can be 0 if total cloud services credits consumption was less than 10% of total compute credits consumption on that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_cost": {"name": "query_cost", "description": "Total cost associated with the query, calculated as sum of compute_cost and cloud_services_cost, in the primary currency of your account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Spend currency, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ran_on_warehouse": {"name": "ran_on_warehouse", "description": "True if the query executed in a virtual warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_scanned_gb": {"name": "data_scanned_gb", "description": "Number of gb scanned by this statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_spilled_to_local_storage_gb": {"name": "data_spilled_to_local_storage_gb", "description": "Volume of data (in GB) spilled to local disk on the warehouse nodes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_spilled_to_remote_storage_gb": {"name": "data_spilled_to_remote_storage_gb", "description": "Volume of data (in GB) spilled to remote disk (i.e. AWS S3, Google Cloud Storage, Azure Blob).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_sent_over_the_network_gb": {"name": "data_sent_over_the_network_gb", "description": "Volume of data (in GB) sent over the network.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_scanned_from_cache_gb": {"name": "data_scanned_from_cache_gb", "description": "Volume of data (in GB) scanned from the local disk cache.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_text_no_comments": {"name": "query_text_no_comments", "description": "Contains the original query text stripped of any comments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_metadata": {"name": "dbt_metadata", "description": "Metadata from the JSON string added to the query by dbt. Null if no metadata was added.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/query_history_enriched.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "incremental", "unique_key": ["query_id", "start_time"], "pre-hook": ["{{ create_regexp_replace_udf(this) }}", "{{ create_merge_objects_udf(this) }}"]}, "created_at": 1695341479.332544, "relation_name": "BRONZE.OBSERVABILITY.query_history_enriched", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key=['query_id', 'start_time'],\n    pre_hook=[\"{{ create_regexp_replace_udf(this) }}\", \"{{ create_merge_objects_udf(this) }}\"]\n) }}\n\nwith\nquery_history as (\n    select\n        *,\n\n        -- this removes comments enclosed by /* <comment text> */ and single line comments starting with -- and either ending with a new line or end of string\n        {{ this.database }}.{{ this.schema }}.dbt_snowflake_monitoring_regexp_replace(query_text, $$(/\\*(.|\\n|\\r)*?\\*/)|(--.*$)|(--.*(\\n|\\r))$$, '') as query_text_no_comments,\n\n        try_parse_json(regexp_substr(query_text, '/\\\\*\\\\s({\"app\":\\\\s\"dbt\".*})\\\\s\\\\*/', 1, 1, 'ie')) as _dbt_json_comment_meta,\n        case\n            when try_parse_json(query_tag)['dbt_snowflake_query_tags_version'] is not null then try_parse_json(query_tag)\n        end as _dbt_json_query_tag_meta,\n        case\n            when _dbt_json_comment_meta is not null or _dbt_json_query_tag_meta is not null then\n                {{ this.database }}.{{ this.schema }}.merge_objects(coalesce(_dbt_json_comment_meta, { }), coalesce(_dbt_json_query_tag_meta, { }))\n        end as dbt_metadata\n\n    from {{ ref('stg_query_history') }}\n\n    {% if is_incremental() %}\n        -- Conservatively re-process the last 7 days to account for late arriving rates data\n        -- which changes the cost per query\n        where end_time > (select dateadd(day, -7, max(end_time)) from {{ this }})\n    {% endif %}\n),\n\ncost_per_query as (\n    select *\n    from {{ ref('cost_per_query') }}\n    {% if is_incremental() %}\n        -- Conservatively re-process the last 7 days to account for late arriving rates data\n        -- which changes the cost per query\n        where end_time > (select dateadd(day, -7, max(end_time)) from {{ this }})\n    {% endif %}\n)\n\nselect\n    cost_per_query.query_id,\n    cost_per_query.compute_cost,\n    cost_per_query.cloud_services_cost,\n    cost_per_query.query_cost,\n    cost_per_query.execution_start_time,\n\n    -- Grab all columns from query_history (except the query time columns which we rename below)\n    query_history.query_text,\n    query_history.database_id,\n    query_history.database_name,\n    query_history.schema_id,\n    query_history.schema_name,\n    query_history.query_type,\n    query_history.session_id,\n    query_history.user_name,\n    query_history.role_name,\n    query_history.warehouse_id,\n    query_history.warehouse_name,\n    query_history.warehouse_size,\n    query_history.warehouse_type,\n    query_history.cluster_number,\n    query_history.query_tag,\n    query_history.execution_status,\n    query_history.error_code,\n    query_history.error_message,\n    query_history.start_time,\n    query_history.end_time,\n    query_history.total_elapsed_time,\n    query_history.bytes_scanned,\n    query_history.percentage_scanned_from_cache,\n    query_history.bytes_written,\n    query_history.bytes_written_to_result,\n    query_history.bytes_read_from_result,\n    query_history.rows_produced,\n    query_history.rows_inserted,\n    query_history.rows_updated,\n    query_history.rows_deleted,\n    query_history.rows_unloaded,\n    query_history.bytes_deleted,\n    query_history.partitions_scanned,\n    query_history.partitions_total,\n    query_history.bytes_spilled_to_local_storage,\n    query_history.bytes_spilled_to_remote_storage,\n    query_history.bytes_sent_over_the_network,\n    query_history.outbound_data_transfer_cloud,\n    query_history.outbound_data_transfer_region,\n    query_history.outbound_data_transfer_bytes,\n    query_history.inbound_data_transfer_cloud,\n    query_history.inbound_data_transfer_region,\n    query_history.inbound_data_transfer_bytes,\n    query_history.credits_used_cloud_services,\n    query_history.release_version,\n    query_history.external_function_total_invocations,\n    query_history.external_function_total_sent_rows,\n    query_history.external_function_total_received_rows,\n    query_history.external_function_total_sent_bytes,\n    query_history.external_function_total_received_bytes,\n    query_history.query_load_percent,\n    query_history.is_client_generated_statement,\n    query_history.query_acceleration_bytes_scanned,\n    query_history.query_acceleration_partitions_scanned,\n    query_history.query_acceleration_upper_limit_scale_factor,\n\n    -- Rename some existing columns for clarity\n    query_history.total_elapsed_time as total_elapsed_time_ms,\n    query_history.compilation_time as compilation_time_ms,\n    query_history.queued_provisioning_time as queued_provisioning_time_ms,\n    query_history.queued_repair_time as queued_repair_time_ms,\n    query_history.queued_overload_time as queued_overload_time_ms,\n    query_history.transaction_blocked_time as transaction_blocked_time_ms,\n    query_history.list_external_files_time as list_external_files_time_ms,\n    query_history.execution_time as execution_time_ms,\n\n    -- New columns\n    query_history.warehouse_size is not null as ran_on_warehouse,\n    query_history.bytes_scanned / power(1024, 3) as data_scanned_gb,\n    data_scanned_gb * query_history.percentage_scanned_from_cache as data_scanned_from_cache_gb,\n    query_history.bytes_spilled_to_local_storage / power(1024, 3) as data_spilled_to_local_storage_gb,\n    query_history.bytes_spilled_to_remote_storage / power(1024, 3) as data_spilled_to_remote_storage_gb,\n    query_history.bytes_sent_over_the_network / power(1024, 3) as data_sent_over_the_network_gb,\n    query_history.query_text_no_comments,\n    query_history.dbt_metadata,\n\n    query_history.total_elapsed_time / 1000 as total_elapsed_time_s,\n    query_history.compilation_time / 1000 as compilation_time_s,\n    query_history.queued_provisioning_time / 1000 as queued_provisioning_time_s,\n    query_history.queued_repair_time / 1000 as queued_repair_time_s,\n    query_history.queued_overload_time / 1000 as queued_overload_time_s,\n    query_history.transaction_blocked_time / 1000 as transaction_blocked_time_s,\n    query_history.list_external_files_time / 1000 as list_external_files_time_s,\n    query_history.execution_time / 1000 as execution_time_s,\n    cost_per_query.currency\n\nfrom query_history\ninner join cost_per_query\n    on query_history.query_id = cost_per_query.query_id\norder by query_history.start_time", "language": "sql", "refs": [["stg_query_history"], ["cost_per_query"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_snowflake_monitoring.create_regexp_replace_udf", "macro.dbt_snowflake_monitoring.create_merge_objects_udf"], "nodes": ["model.dbt_snowflake_monitoring.stg_query_history", "model.dbt_snowflake_monitoring.cost_per_query"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.query_base_table_access": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "query_base_table_access", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "query_base_table_access.sql", "original_file_path": "models/query_base_table_access.sql", "unique_id": "model.dbt_snowflake_monitoring.query_base_table_access", "fqn": ["dbt_snowflake_monitoring", "query_base_table_access"], "alias": "query_base_table_access", "checksum": {"name": "sha256", "checksum": "956316920180adf5c66e08fd9540d8aefa011fcab3b143643e35d9f50a88c9d9"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model tracks the base tables accessed by a query. It contains 1 row per query per table. It does not include tables from a data share. Access history is only available for Snowflake accounts on enterprise or higher, and therefore this model will be empty for standard accounts. See https://docs.snowflake.com/en/sql-reference/account-usage/access_history.html for more details. See https://select.dev/posts/snowflake-unused-tables#direct-versus-base-objects-accessed for more details on the difference between base versus direct tables accessed.", "columns": {"_unique_id": {"name": "_unique_id", "description": "Unique identifier for each row in the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_id": {"name": "query_id", "description": "An internal, system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_start_time": {"name": "query_start_time", "description": "The statement start time (UTC time zone).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The user who issued the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_name": {"name": "table_name", "description": "Fully qualified table name, i.e. <database_name>.<schema_name>.<table_name>", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_id": {"name": "table_id", "description": "Unique identifier for the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "columns_accessed": {"name": "columns_accessed", "description": "Array of column_names accessed in the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/query_base_table_access.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY"}, "created_at": 1695341479.3393385, "relation_name": "BRONZE.OBSERVABILITY.query_base_table_access", "raw_code": "select\n    _unique_id,\n    query_id,\n    query_start_time,\n    user_name,\n    object_name as full_table_name,\n    table_id,\n    columns_accessed\nfrom {{ ref('query_base_object_access') }}\nwhere\n    object_domain = 'Table' -- removes secured views\n    and table_id is not null -- removes tables from a data share", "language": "sql", "refs": [["query_base_object_access"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.query_base_object_access"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.query_direct_table_access": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "query_direct_table_access", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "query_direct_table_access.sql", "original_file_path": "models/query_direct_table_access.sql", "unique_id": "model.dbt_snowflake_monitoring.query_direct_table_access", "fqn": ["dbt_snowflake_monitoring", "query_direct_table_access"], "alias": "query_direct_table_access", "checksum": {"name": "sha256", "checksum": "62b50ea8be7595d90366ea32f0534340e2fddb644642dc5c30682e272d572412"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model tracks the direct tables accessed by a query. It contains 1 row per query per table. It does not include tables from a data share. Access history is only available for Snowflake accounts on enterprise or higher, and therefore this model will be empty for standard accounts. See https://docs.snowflake.com/en/sql-reference/account-usage/access_history.html for more details. See https://select.dev/posts/snowflake-unused-tables#direct-versus-base-objects-accessed for more details on the difference between base versus direct tables accessed.", "columns": {"_unique_id": {"name": "_unique_id", "description": "Unique identifier for each row in the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_id": {"name": "query_id", "description": "An internal, system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_start_time": {"name": "query_start_time", "description": "The statement start time (UTC time zone).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The user who issued the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_name": {"name": "table_name", "description": "Fully qualified table name, i.e. <database_name>.<schema_name>.<table_name>", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_id": {"name": "table_id", "description": "Unique identifier for the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "columns_accessed": {"name": "columns_accessed", "description": "Array of column_names accessed in the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/query_direct_table_access.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY"}, "created_at": 1695341479.336026, "relation_name": "BRONZE.OBSERVABILITY.query_direct_table_access", "raw_code": "select\n    _unique_id,\n    query_id,\n    query_start_time,\n    user_name,\n    object_name as full_table_name,\n    table_id,\n    columns_accessed\nfrom {{ ref('query_direct_object_access') }}\nwhere\n    object_domain = 'Table' -- removes secured views\n    and table_id is not null -- removes tables from a data share", "language": "sql", "refs": [["query_direct_object_access"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.query_direct_object_access"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "remaining_balance_daily_without_contract_view", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "remaining_balance_daily_without_contract_view.sql", "original_file_path": "models/remaining_balance_daily_without_contract_view.sql", "unique_id": "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view", "fqn": ["dbt_snowflake_monitoring", "remaining_balance_daily_without_contract_view"], "alias": "remaining_balance_daily_without_contract_view", "checksum": {"name": "sha256", "checksum": "1a16648efb3543160dddb07305d5b28b60bfa83b285fc0fe6d1788eb11d6a084"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY"}, "created_at": 1695341477.85682, "relation_name": "BRONZE.OBSERVABILITY.remaining_balance_daily_without_contract_view", "raw_code": "select\n    date,\n    organization_name,\n    currency,\n    free_usage_balance,\n    capacity_balance,\n    on_demand_consumption_balance,\n    rollover_balance\nfrom {{ ref('stg_remaining_balance_daily') }}\n{#\n    From what I can tell, there will only ever be 1 organization_name in remaining_balance_daily.\n    During a contract switchover, there may be two records with the same date, but different contract_numbers.\n    Assume the higher contract_number is more recent. Chose not to group by date and aggregate balances in\n    case the currency changes..\n#}\nqualify row_number() over (partition by date order by contract_number desc nulls last) = 1", "language": "sql", "refs": [["stg_remaining_balance_daily"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.stg_remaining_balance_daily"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.warehouse_cluster_status": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "warehouse_cluster_status", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "warehouse_cluster_status.sql", "original_file_path": "models/warehouse_cluster_status.sql", "unique_id": "model.dbt_snowflake_monitoring.warehouse_cluster_status", "fqn": ["dbt_snowflake_monitoring", "warehouse_cluster_status"], "alias": "warehouse_cluster_status", "checksum": {"name": "sha256", "checksum": "d7dada4ef35aac2ee635ef555ec662b0620aefbf763c2312a24be51679d84d88"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model tracks active periods for each cluster in a warehouse. It contains 1 row per warehouse-cluster period.", "columns": {"warehouse_id": {"name": "warehouse_id", "description": "The unique warehouse ID (assigned by Snowflake) that corresponds to the warehouse name in your account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "The name of the warehouse in your account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cluster_number": {"name": "cluster_number", "description": "The number of the cluster. For a single-cluster warehouse, this will always be 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "True if the cluster was running during the time period, otherwise False.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_from": {"name": "valid_from", "description": "Timestamp for the beginning of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_to": {"name": "valid_to", "description": "Timestamp for the end of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/warehouse_cluster_status.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "table"}, "created_at": 1695341479.4658747, "relation_name": "BRONZE.OBSERVABILITY.warehouse_cluster_status", "raw_code": "{{ config(materialized='table') }}\n\nwith\nstop_threshold as (\n    select max(timestamp) as timestamp\n    from {{ ref('stg_warehouse_events_history') }}\n),\n\nwarehouse_cluster_status_base as (\n    select\n        warehouse_id,\n        warehouse_name,\n        cluster_number + 1 as cluster_number,\n        timestamp as valid_from,\n        lead(timestamp) over (partition by warehouse_id, cluster_number order by timestamp asc) as valid_to,\n        event_name = 'RESUME_CLUSTER' as is_active\n    from {{ ref('stg_warehouse_events_history') }}\n    where\n        event_name in ('RESUME_CLUSTER', 'SUSPEND_CLUSTER')\n        and event_state = 'COMPLETED'\n),\n\nwarehouse_cluster_status as (\n    select\n        warehouse_cluster_status_base.warehouse_id,\n        warehouse_cluster_status_base.warehouse_name,\n        warehouse_cluster_status_base.cluster_number,\n        warehouse_cluster_status_base.is_active,\n        warehouse_cluster_status_base.valid_from,\n        coalesce(warehouse_cluster_status_base.valid_to, stop_threshold.timestamp) as valid_to\n    from warehouse_cluster_status_base\n    cross join stop_threshold\n)\n\nselect *\nfrom warehouse_cluster_status\norder by valid_from", "language": "sql", "refs": [["stg_warehouse_events_history"], ["stg_warehouse_events_history"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_snowflake_monitoring.stg_warehouse_events_history", "model.dbt_snowflake_monitoring.stg_warehouse_events_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.dbt_queries": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "dbt_queries", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "dbt_queries.sql", "original_file_path": "models/dbt_queries.sql", "unique_id": "model.dbt_snowflake_monitoring.dbt_queries", "fqn": ["dbt_snowflake_monitoring", "dbt_queries"], "alias": "dbt_queries", "checksum": {"name": "sha256", "checksum": "b2fe7b8244122640fcdd38121fa66e199b7f81a68ef10bf3000200c6a5feb258"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["query_id", "start_time"], "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Filtered version of query_history_enriched just for queries issued by dbt. Adds additional dbt-specific columns.", "columns": {"dbt_snowflake_query_tags_version": {"name": "dbt_snowflake_query_tags_version", "description": "Version of the dbt-snowflake-query-tags package that generated the metadata", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_invocation_id": {"name": "dbt_invocation_id", "description": "The id of the dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_id": {"name": "dbt_node_id", "description": "The identifier for the node that the query relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_resource_type": {"name": "dbt_node_resource_type", "description": "The resource type of the node that the query relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_name": {"name": "dbt_node_name", "description": "The name of the node that the query relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_materialized": {"name": "dbt_node_materialized", "description": "The materialization of the node that the query relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_is_incremental": {"name": "dbt_node_is_incremental", "description": "Boolean describing if the node run was incremental.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_alias": {"name": "dbt_node_alias", "description": "Alias set for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_meta": {"name": "dbt_node_meta", "description": "Dict of any meta set for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_tags": {"name": "dbt_node_tags", "description": "Array of all tags set for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_refs": {"name": "dbt_node_refs", "description": "Array of all refs used by the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_database": {"name": "dbt_node_database", "description": "The database configured for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_schema": {"name": "dbt_node_schema", "description": "The schema configured for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Version of dbt in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_project_name": {"name": "dbt_project_name", "description": "Name of the dbt project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_target_name": {"name": "dbt_target_name", "description": "The target name for the dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_target_database": {"name": "dbt_target_database", "description": "The target database for the dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_target_schema": {"name": "dbt_target_schema", "description": "The target schema for the dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_package_name": {"name": "dbt_node_package_name", "description": "The package name of the dbt node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_node_original_file_path": {"name": "dbt_node_original_file_path", "description": "The file path of the dbt node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "If using dbt Cloud, the ID of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "If using dbt Cloud, the ID of the issuing job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "If using dbt Cloud, the ID of the issuing run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "If using dbt Cloud, the run reason category for the issuing run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "If using dbt Cloud, the run reason for the issuing run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_url": {"name": "dbt_cloud_job_url", "description": "If using dbt Cloud, the URL of the issuing job. The dbt_cloud_account_id dbt variable must be set for this field to populate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_url": {"name": "dbt_cloud_run_url", "description": "If using dbt Cloud, the URL of the issuing run. The dbt_cloud_account_id dbt variable must be set for this field to populate.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/dbt_queries.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "incremental", "unique_key": ["query_id", "start_time"]}, "created_at": 1695341479.4849179, "relation_name": "BRONZE.OBSERVABILITY.dbt_queries", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key=['query_id', 'start_time']\n) }}\n\nselect\n    dbt_metadata['dbt_snowflake_query_tags_version']::string as dbt_snowflake_query_tags_version, -- this will be null where the metadata came from a query comment in dbt-snowflake-monitoring versions <2.0.0\n    dbt_metadata['invocation_id']::string as dbt_invocation_id,\n    dbt_metadata['node_id']::string as dbt_node_id,\n    dbt_metadata['node_resource_type']::string as dbt_node_resource_type,\n    coalesce(dbt_metadata['node_name']::string, replace(array_slice(split(dbt_node_id, '.'), -1, array_size(split(dbt_node_id, '.')))[0], '\"')) as dbt_node_name, -- we can just use node_name once enough time has been that users have migrated to v2.0.0\n    dbt_metadata['materialized']::string as dbt_node_materialized,\n    dbt_metadata['is_incremental']::boolean as dbt_node_is_incremental,\n    dbt_metadata['node_alias']::string as dbt_node_alias,\n    dbt_metadata['node_meta']::variant as dbt_node_meta,\n    dbt_metadata['node_tags']::array as node_tags,\n    iff(dbt_snowflake_query_tags_version >= '1.1.3', dbt_metadata['node_refs']::array, []) as dbt_node_refs, -- correct refs available from 1.1.3 onwards\n    dbt_metadata['node_database']::string as dbt_node_database,\n    dbt_metadata['node_schema']::string as dbt_node_schema,\n    dbt_metadata['dbt_version']::string as dbt_version,\n    dbt_metadata['project_name']::string as dbt_project_name,\n    dbt_metadata['target_name']::string as dbt_target_name,\n    dbt_metadata['target_database']::string as dbt_target_database,\n    dbt_metadata['target_schema']::string as dbt_target_schema,\n    dbt_metadata['node_package_name']::string as dbt_node_package_name,\n    dbt_metadata['node_original_file_path']::string as dbt_node_original_file_path,\n    dbt_metadata['dbt_cloud_project_id']::string as dbt_cloud_project_id,\n    dbt_metadata['dbt_cloud_job_id']::string as dbt_cloud_job_id,\n    dbt_metadata['dbt_cloud_run_id']::string as dbt_cloud_run_id,\n    dbt_metadata['dbt_cloud_run_reason_category']::string as dbt_cloud_run_reason_category,\n    dbt_metadata['dbt_cloud_run_reason']::string as dbt_cloud_run_reason,\n    case\n        when dbt_cloud_project_id is not null\n        then\n            {% if var('dbt_cloud_account_id', none) -%}\n            '{{ var('dbt_cloud_url', 'https://cloud.getdbt.com/deploy/') }}' || '{{ var('dbt_cloud_account_id') }}' || '/projects/' || dbt_cloud_project_id || '/jobs/' || dbt_cloud_job_id\n            {%- else -%}\n            'Required dbt_cloud_account_id variable not set' -- noqa\n            {%- endif %}\n    end as dbt_cloud_job_url,\n    case\n        when dbt_cloud_project_id is not null\n        then\n            {% if var('dbt_cloud_account_id', none) -%}\n            '{{ var('dbt_cloud_url', 'https://cloud.getdbt.com/deploy/') }}' || '{{ var('dbt_cloud_account_id') }}' || '/projects/' || dbt_cloud_project_id || '/runs/' || dbt_cloud_run_id\n            {%- else -%}\n            'Required dbt_cloud_account_id variable not set' -- noqa\n            {%- endif %}\n    end as dbt_cloud_run_url,\n    * exclude dbt_metadata\nfrom {{ ref('query_history_enriched') }}\nwhere dbt_metadata is not null\n    {% if is_incremental() %}\n        -- Conservatively re-process the last 7 days to account for late arriving rates data\n        -- which changes the cost per query\n        and end_time > (select dateadd(day, -7, max(end_time)) from {{ this }})\n    {% endif %}", "language": "sql", "refs": [["query_history_enriched"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_snowflake_monitoring.query_history_enriched"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.query_direct_object_access": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "query_direct_object_access", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "query_direct_object_access.sql", "original_file_path": "models/query_direct_object_access.sql", "unique_id": "model.dbt_snowflake_monitoring.query_direct_object_access", "fqn": ["dbt_snowflake_monitoring", "query_direct_object_access"], "alias": "query_direct_object_access", "checksum": {"name": "sha256", "checksum": "75bc02006b4ce2968d24db8e0082d87d7554d8c3f8c6524ed7d3c8465e83954f"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["_unique_id", "query_start_time"], "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model tracks the direct objects accessed by a query. It contains 1 row per query per object. An object can be a regular table owned/created by your account, a table from a data share, a secured view, or an external table. See https://docs.snowflake.com/en/sql-reference/account-usage/access_history.html for more details. Access history is only available for Snowflake accounts on enterprise or higher, and therefore this model will be empty for standard accounts. See https://select.dev/posts/snowflake-unused-tables#direct-versus-base-objects-accessed for more details on the difference between base versus direct objects accessed.", "columns": {"_unique_id": {"name": "_unique_id", "description": "Unique identifier for each row in the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_id": {"name": "query_id", "description": "An internal, system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_start_time": {"name": "query_start_time", "description": "The statement start time (UTC time zone).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The user who issued the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_name": {"name": "object_name", "description": "Fully qualified object name. For a table, this would be <database_name>.<schema_name>.<table_name>", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_domain": {"name": "object_domain", "description": "One of the following: Table, View, Materialized view, External table, Stream, or Stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_id": {"name": "table_id", "description": "Unique identifier for the table/view. Will be null for secured views and tables from a data share.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "columns_accessed": {"name": "columns_accessed", "description": "Array of column_names accessed in the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/query_direct_object_access.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "incremental", "unique_key": ["_unique_id", "query_start_time"]}, "created_at": 1695341479.474006, "relation_name": "BRONZE.OBSERVABILITY.query_direct_object_access", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key=['_unique_id', 'query_start_time'],\n) }}\n\nwith\naccess_history as (\n    select *\n    from {{ ref('stg_access_history') }}\n\n    {% if is_incremental() %}\n        where query_start_time > (select coalesce(dateadd('day', -1, max(query_start_time)), '1970-01-01') from {{ this }})\n    {% endif %}\n\n),\n\naccess_history_flattened as (\n    select\n        access_history.query_id,\n        access_history.query_start_time,\n        access_history.user_name,\n        objects_accessed.value:objectId::integer as table_id, -- will be null for secured views or tables from a data share\n        objects_accessed.value:objectName::text as object_name,\n        objects_accessed.value:objectDomain::text as object_domain,\n        objects_accessed.value:columns as columns_array\n\n    from access_history, lateral flatten(access_history.direct_objects_accessed) as objects_accessed\n),\n\naccess_history_flattened_w_columns as (\n    select\n        access_history_flattened.query_id,\n        access_history_flattened.query_start_time,\n        access_history_flattened.user_name,\n        access_history_flattened.table_id,\n        access_history_flattened.object_name,\n        access_history_flattened.object_domain,\n        array_agg(distinct columns.value:columnName::text) as columns_accessed\n    from access_history_flattened, lateral flatten(access_history_flattened.columns_array) as columns\n    where\n        access_history_flattened.object_name is not null\n    group by 1, 2, 3, 4, 5, 6\n)\n\nselect\n    md5(concat(query_id, object_name)) as _unique_id,\n    *\nfrom access_history_flattened_w_columns\norder by query_start_time asc", "language": "sql", "refs": [["stg_access_history"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_snowflake_monitoring.stg_access_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.query_base_object_access": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "query_base_object_access", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "query_base_object_access.sql", "original_file_path": "models/query_base_object_access.sql", "unique_id": "model.dbt_snowflake_monitoring.query_base_object_access", "fqn": ["dbt_snowflake_monitoring", "query_base_object_access"], "alias": "query_base_object_access", "checksum": {"name": "sha256", "checksum": "398cde6868ad739a843c89db41fa1ea6e6644ed054354db3e15efa02e0ce4e96"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["_unique_id", "query_start_time"], "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model tracks the base objects accessed by a query. It contains 1 row per query per object. An object can be a regular table owned/created by your account, a table from a data share, a secured view, or an external table. See https://docs.snowflake.com/en/sql-reference/account-usage/access_history.html for more details. Access history is only available for Snowflake accounts on enterprise or higher, and therefore this model will be empty for standard accounts. See https://select.dev/posts/snowflake-unused-tables#direct-versus-base-objects-accessed for more details on the difference between base versus direct objects accessed.", "columns": {"_unique_id": {"name": "_unique_id", "description": "Unique identifier for each row in the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_id": {"name": "query_id", "description": "An internal, system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_start_time": {"name": "query_start_time", "description": "The statement start time (UTC time zone).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The user who issued the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_name": {"name": "object_name", "description": "Fully qualified object name. For a table, this would be <database_name>.<schema_name>.<table_name>", "meta": {}, "data_type": null, "quote": null, "tags": []}, "object_domain": {"name": "object_domain", "description": "One of the following: Table, View, Materialized view, External table, Stream, or Stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "table_id": {"name": "table_id", "description": "Unique identifier for the table/view. Will be null for secured views and tables from a data share.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "columns_accessed": {"name": "columns_accessed", "description": "Array of column_names accessed in the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/query_base_object_access.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "incremental", "unique_key": ["_unique_id", "query_start_time"]}, "created_at": 1695341479.4700696, "relation_name": "BRONZE.OBSERVABILITY.query_base_object_access", "raw_code": "{{ config(\n    materialized='incremental',\n    unique_key=['_unique_id', 'query_start_time'],\n) }}\n\nwith\naccess_history as (\n    select *\n    from {{ ref('stg_access_history') }}\n\n    {% if is_incremental() %}\n        where query_start_time > (select coalesce(dateadd('day', -1, max(query_start_time)), '1970-01-01') from {{ this }})\n    {% endif %}\n\n),\n\naccess_history_flattened as (\n    select\n        access_history.query_id,\n        access_history.query_start_time,\n        access_history.user_name,\n        objects_accessed.value:objectId::integer as table_id, -- will be null for secured views or tables from a data share\n        objects_accessed.value:objectName::text as object_name,\n        objects_accessed.value:objectDomain::text as object_domain,\n        objects_accessed.value:columns as columns_array\n\n    from access_history, lateral flatten(access_history.base_objects_accessed) as objects_accessed\n),\n\naccess_history_flattened_w_columns as (\n    select\n        access_history_flattened.query_id,\n        access_history_flattened.query_start_time,\n        access_history_flattened.user_name,\n        access_history_flattened.table_id,\n        access_history_flattened.object_name,\n        access_history_flattened.object_domain,\n        array_agg(distinct columns.value:columnName::text) as columns_accessed\n    from access_history_flattened, lateral flatten(access_history_flattened.columns_array) as columns\n    where\n        access_history_flattened.object_name is not null\n    group by 1, 2, 3, 4, 5, 6\n)\n\nselect\n    md5(concat(query_id, object_name)) as _unique_id,\n    *\nfrom access_history_flattened_w_columns\norder by query_start_time asc", "language": "sql", "refs": [["stg_access_history"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_snowflake_monitoring.stg_access_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.warehouse_credits_map": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "warehouse_credits_map", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "warehouse_credits_map.sql", "original_file_path": "models/warehouse_credits_map.sql", "unique_id": "model.dbt_snowflake_monitoring.warehouse_credits_map", "fqn": ["dbt_snowflake_monitoring", "warehouse_credits_map"], "alias": "warehouse_credits_map", "checksum": {"name": "sha256", "checksum": "130da18ae5f334559cd041957115832fe987956f949dbc561ce6c993351cdb02"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This model contains the credit consumption for each type and size of warehouse. It contains 1 row per hour per warehouse size and type.", "columns": {"warehouse_size": {"name": "warehouse_size", "description": "The size of the warehouse. These values will join directly to the warehouse_size column in the query_history models.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_type": {"name": "warehouse_type", "description": "The type of the warehouse. Will be STANDARD or SNOWPARK-OPTIMIZED.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_per_hour": {"name": "credits_per_hour", "description": "The hourly rate at which credits are charged for this warehouse configuration", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_per_minute": {"name": "credits_per_minute", "description": "The minutely rate at which credits are charged for this warehouse configuration", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_per_second": {"name": "credits_per_second", "description": "The secondly rate at which credits are charged for this warehouse configuration", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/warehouse_credits_map.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "view"}, "created_at": 1695341479.4628968, "relation_name": "BRONZE.OBSERVABILITY.warehouse_credits_map", "raw_code": "{{ config(materialized='view') }}\n\nwith\nwarehouse_credits_map as (\n    select * from (\n        values\n        ('X-Small', 'STANDARD', 1),\n        ('Small', 'STANDARD', 2),\n        ('Medium', 'STANDARD', 4),\n        ('Large', 'STANDARD', 8),\n        ('X-Large', 'STANDARD', 16),\n        ('2X-Large', 'STANDARD', 32),\n        ('3X-Large', 'STANDARD', 64),\n        ('4X-Large', 'STANDARD', 128),\n        ('5X-Large', 'STANDARD', 256),\n        ('6X-Large', 'STANDARD', 512),\n        ('Medium', 'SNOWPARK-OPTIMIZED', 6),\n        ('Large', 'SNOWPARK-OPTIMIZED', 12),\n        ('X-Large', 'SNOWPARK-OPTIMIZED', 24),\n        ('2X-Large', 'SNOWPARK-OPTIMIZED', 48),\n        ('3X-Large', 'SNOWPARK-OPTIMIZED', 96),\n        ('4X-Large', 'SNOWPARK-OPTIMIZED', 192),\n        ('5X-Large', 'SNOWPARK-OPTIMIZED', 384),\n        ('6X-Large', 'SNOWPARK-OPTIMIZED', 768)\n    ) as t (warehouse_size, warehouse_type, credits_per_hour)\n)\n\nselect\n    warehouse_size,\n    warehouse_type,\n    credits_per_hour,\n    credits_per_hour / 60 as credits_per_minute,\n    credits_per_hour / 3600 as credits_per_second\nfrom warehouse_credits_map", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.dbt_snowflake_monitoring.daily_rates": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "daily_rates", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "daily_rates.sql", "original_file_path": "models/daily_rates.sql", "unique_id": "model.dbt_snowflake_monitoring.daily_rates", "fqn": ["dbt_snowflake_monitoring", "daily_rates"], "alias": "daily_rates", "checksum": {"name": "sha256", "checksum": "4112e2d1b241455def905468003c1431718c23d9bb17e5207ff6b4f6f5e4fbf4"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A copy of snowflake.organization_usage.rate_sheet_daily for the current Snowflake account, with missing dates imputed. This model accounts for the fact that multiple rates will appear on a given day when the account is in overage. This happens for on-demand accounts, or fixed contract accounts who have exceeded their remaining balance. When the account is in overage, the usage_type will appear as 'compute' (instead of 'overage-compute'), but the effective_rate will be the one associated with `overage-compute`. You can identify these instances using `is_overage_rate` to help understand why a rate may have suddenly changed.\n", "columns": {"date": {"name": "date", "description": "Date (in the UTC time zone) for the effective price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_type": {"name": "service_type", "description": "The type of service, which can be one of compute or storage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usage_type": {"name": "usage_type", "description": "The type of usage, which can be one of compute, storage, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_rate": {"name": "effective_rate", "description": "The rate after applying any applicable discounts per the contract for the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency of effect rate, retrieved from Snowflake's daily rate sheet", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_overage_rate": {"name": "is_overage_rate", "description": "Indicator for whether the effective_rate is an overage rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_rate": {"name": "is_latest_rate", "description": "Indicator for whether the effective_rate is the most recent.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/daily_rates.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "table"}, "created_at": 1695341479.460109, "relation_name": "BRONZE.OBSERVABILITY.daily_rates", "raw_code": "{{ config(materialized='table') }}\n\n/*\nsnowflake.organization_usage.rate_sheet_daily isn't guaranteed to have 1 row per day per usage type.\n\nIf you don't consume any compute resources on a given day, there won't be a record.\n\nThis model guarantees 1 row per day per usage type, by filling in missing values with rates from the last\nknown day.\n*/\n\nwith\ndates_base as (\n    select date_day as date from (\n        {{ dbt_utils.date_spine(\n                datepart=\"day\",\n                start_date=\"'2018-01-01'\",\n                end_date=\"dateadd(day, 1, current_date)\"\n            )\n        }}\n    )\n),\n\nrate_sheet_daily_base as (\n    select\n        date,\n        usage_type,\n        currency,\n        effective_rate,\n        service_type\n    from {{ ref('stg_rate_sheet_daily') }}\n    where\n        account_locator = {{ account_locator() }}\n),\n\nstop_thresholds as (\n    select min(date) as start_date\n    from rate_sheet_daily_base\n\n    union all\n\n    select min(date) as start_date\n    from {{ ref('remaining_balance_daily_without_contract_view') }}\n),\n\ndate_range as (\n    select\n        max(start_date) as start_date,\n        current_date as end_date\n    from stop_thresholds\n),\n\nremaining_balance_daily as (\n    select\n        date,\n        free_usage_balance + capacity_balance + on_demand_consumption_balance + rollover_balance as remaining_balance,\n        remaining_balance < 0 as is_account_in_overage\n    from {{ ref('remaining_balance_daily_without_contract_view') }}\n),\n\nlatest_remaining_balance_daily as (\n    select\n        date,\n        remaining_balance,\n        is_account_in_overage\n    from remaining_balance_daily\n    qualify row_number() over (order by date desc) = 1\n),\n\nrate_sheet_daily as (\n    select rate_sheet_daily_base.*\n    from rate_sheet_daily_base\n    inner join date_range\n        on rate_sheet_daily_base.date between date_range.start_date and date_range.end_date\n),\n\nrates_date_range_w_usage_types as (\n    select\n        date_range.start_date,\n        date_range.end_date,\n        usage_types.usage_type\n    from date_range\n    cross join (select distinct usage_type from rate_sheet_daily) as usage_types\n),\n\nbase as (\n    select\n        db.date,\n        dr.usage_type\n    from dates_base as db\n    inner join rates_date_range_w_usage_types as dr\n        on db.date between dr.start_date and dr.end_date\n),\n\nrates_w_overage as (\n    select\n        base.date,\n        base.usage_type,\n        coalesce(\n            rate_sheet_daily.service_type,\n            lag(rate_sheet_daily.service_type) ignore nulls over (partition by base.usage_type order by base.date),\n            lead(rate_sheet_daily.service_type) ignore nulls over (partition by base.usage_type order by base.date)\n        ) as service_type,\n        coalesce(\n            rate_sheet_daily.effective_rate,\n            lag(rate_sheet_daily.effective_rate) ignore nulls over (partition by base.usage_type order by base.date),\n            lead(rate_sheet_daily.effective_rate) ignore nulls over (partition by base.usage_type order by base.date)\n        ) as effective_rate,\n        coalesce(\n            rate_sheet_daily.currency,\n            lag(rate_sheet_daily.currency) ignore nulls over (partition by base.usage_type order by base.date),\n            lead(rate_sheet_daily.currency) ignore nulls over (partition by base.usage_type order by base.date)\n        ) as currency,\n        base.usage_type like 'overage-%' as is_overage_rate,\n        replace(base.usage_type, 'overage-', '') as associated_usage_type,\n        coalesce(remaining_balance_daily.is_account_in_overage, latest_remaining_balance_daily.is_account_in_overage, false) as _is_account_in_overage,\n        case\n            when _is_account_in_overage and is_overage_rate then 1\n            when not _is_account_in_overage and not is_overage_rate then 1\n            else 0\n        end as rate_priority\n\n    from base\n    left join latest_remaining_balance_daily on latest_remaining_balance_daily.date is not null\n    left join remaining_balance_daily\n        on base.date = remaining_balance_daily.date\n    left join rate_sheet_daily\n        on base.date = rate_sheet_daily.date\n            and base.usage_type = rate_sheet_daily.usage_type\n),\n\nrates as (\n    select\n        date,\n        usage_type,\n        associated_usage_type,\n        service_type,\n        effective_rate,\n        currency,\n        is_overage_rate\n    from rates_w_overage\n    qualify row_number() over (partition by date, service_type, associated_usage_type order by rate_priority desc) = 1\n)\n\nselect\n    date,\n    associated_usage_type as usage_type,\n    service_type,\n    effective_rate,\n    currency,\n    is_overage_rate,\n    row_number() over (partition by service_type, associated_usage_type order by date desc) = 1 as is_latest_rate\nfrom rates\norder by date", "language": "sql", "refs": [["stg_rate_sheet_daily"], ["remaining_balance_daily_without_contract_view"], ["remaining_balance_daily_without_contract_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_snowflake_monitoring.account_locator"], "nodes": ["model.dbt_snowflake_monitoring.stg_rate_sheet_daily", "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view", "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_stage_storage_usage_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_stage_storage_usage_history.sql", "original_file_path": "models/staging/stg_stage_storage_usage_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_stage_storage_usage_history"], "alias": "stg_stage_storage_usage_history", "checksum": {"name": "sha256", "checksum": "4e779e31476b1be568ecca5cc50ac1c568c07c1947f6f30ca2481b5f29665f38"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "See https://docs.snowflake.com/en/sql-reference/account-usage/stage_storage_usage_history.html", "columns": {"date": {"name": "date", "description": "Date of this storage usage record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_stage_bytes": {"name": "average_stage_bytes", "description": "Number of bytes of stage storage used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_stage_storage_usage_history.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "view"}, "created_at": 1695341479.521637, "relation_name": "BRONZE.OBSERVABILITY.stg_stage_storage_usage_history", "raw_code": "{{ config(materialized='view') }}\n\nselect\n    usage_date as date,\n    average_stage_bytes\nfrom {{ source('snowflake_account_usage', 'stage_storage_usage_history') }}", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "stage_storage_usage_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_remaining_balance_daily": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_remaining_balance_daily", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_remaining_balance_daily.sql", "original_file_path": "models/staging/stg_remaining_balance_daily.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_remaining_balance_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_remaining_balance_daily"], "alias": "stg_remaining_balance_daily", "checksum": {"name": "sha256", "checksum": "3c12e5653cc4d182f9d8abf0d70d182a85110e97c1acaf6857132e6e35685b51"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A materialized copy of the snowflake.organization.rate_sheet_daily view. It can be used to get the effective rates used for calculating usage in the organization currency based on credits used for all Snowflake accounts in your organization. It contains 1 row per day per rate in Snowflake account (some days can have more than 1 rate for a given usage_type, usually when the contract is updated).", "columns": {"date": {"name": "date", "description": "The date of the FREE_USAGE_BALANCE or CAPACITY_BALANCE in the UTC time zone.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Name of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_number": {"name": "contract_number", "description": "Contract number for the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the FREE_USAGE_BALANCE or CAPACITY_BALANCE or ON_DEMAND_CONSUMPTION_BALANCE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "free_usage_balance": {"name": "free_usage_balance", "description": "The amount of free usage in currency that is available for use as of the date. This is the end of day balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "capacity_balance": {"name": "capacity_balance", "description": "The amount of capacity in currency that is available for use as of the date. This is the end of day balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "on_demand_consumption_balance": {"name": "on_demand_consumption_balance", "description": "The amount of consumption at on demand prices that will be invoiced given that all the free usage and capacity balances have been exhausted. This is a negative value (e.g. -250) until the invoice is paid. This is the end of day balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rollover_balance": {"name": "rollover_balance", "description": "The amount of rollover balance in currency that is available for use at the end of the date. At the end of a contract term, it is calculated as sum(AMOUNT) from the CONTRACT_ITEMS view - sum(USAGE_IN_CURRENCY) from the USAGE_IN_CURRENCY_DAILY view.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_remaining_balance_daily.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "table"}, "created_at": 1695341479.525294, "relation_name": "BRONZE.OBSERVABILITY.stg_remaining_balance_daily", "raw_code": "-- <1000 rows, will be more expensive to materialize incrementally with multiple SQL statements\n{{ config(materialized='table') }}\n\nselect\n    date,\n    organization_name,\n    contract_number,\n    currency,\n    free_usage_balance,\n    capacity_balance,\n    on_demand_consumption_balance,\n    rollover_balance\nfrom {{ source('snowflake_organization_usage', 'remaining_balance_daily') }}\norder by date", "language": "sql", "refs": [], "sources": [["snowflake_organization_usage", "remaining_balance_daily"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_serverless_task_history": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_serverless_task_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_serverless_task_history.sql", "original_file_path": "models/staging/stg_serverless_task_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_serverless_task_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_serverless_task_history"], "alias": "stg_serverless_task_history", "checksum": {"name": "sha256", "checksum": "ae420f9257ea9f0161c1685cec385c06248a83d4e203d672e0cc9bdfe6ac5915"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An incrementally materialized copy of the snowflake.account_usage.warehouse_metering_history view. See https://docs.snowflake.com/en/sql-reference/account-usage/serverless_task_history.html", "columns": {"start_time": {"name": "start_time", "description": "The date and beginning of the hour (in the UTC time zone) in which the serverless task took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The date and end of the hour (in the UTC time zone) in which the serverless task took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_id": {"name": "task_id", "description": "Internal/system-generated identifier for the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_name": {"name": "task_name", "description": "Name of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "Name of the database in which the task is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used": {"name": "credits_used", "description": "Total number of credits used for the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_serverless_task_history.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "incremental"}, "created_at": 1695341479.528504, "relation_name": "BRONZE.OBSERVABILITY.stg_serverless_task_history", "raw_code": "{{ config(materialized='incremental') }}\n\nselect\n    start_time,\n    end_time,\n    task_id,\n    task_name,\n    database_name,\n    credits_used\nfrom {{ source('snowflake_account_usage', 'serverless_task_history') }}\n\n{% if is_incremental() %}\n    where end_time > (select max(end_time) from {{ this }})\n{% endif %}\n\norder by start_time", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "serverless_task_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_query_history": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_query_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_query_history.sql", "original_file_path": "models/staging/stg_query_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_query_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_query_history"], "alias": "stg_query_history", "checksum": {"name": "sha256", "checksum": "ece75bbb7d8847b8227efd4f3eccf091b24a9ad5dcaa1a61eb8d9b09caba9078"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An incrementally materialized copy of the snowflake.account_usage.query_history view. It can be used to query Snowflake query history by various dimensions (time range, session, user, warehouse, etc.) within the last 365 days (1 year). It contains 1 row per query (query_id).", "columns": {"query_id": {"name": "query_id", "description": "Internal/system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_text": {"name": "query_text", "description": "Text of the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_id": {"name": "database_id", "description": "Internal/system-generated identifier for the database that was in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "Database that was in use at the time of the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_id": {"name": "schema_id", "description": "Internal/system-generated identifier for the schema that was in use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "Schema that was in use at the time of the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_type": {"name": "query_type", "description": "DML, query, etc. If the query failed, then the query type may be UNKNOWN.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "Session that executed the statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "User who issued the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role_name": {"name": "role_name", "description": "Role that was active in the session at the time of the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_id": {"name": "warehouse_id", "description": "Internal/system-generated identifier for the warehouse that was used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "Warehouse that the query executed on, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_size": {"name": "warehouse_size", "description": "Size of the warehouse when this statement executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_type": {"name": "warehouse_type", "description": "Type of the warehouse when this statement executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cluster_number": {"name": "cluster_number", "description": "The cluster (in a multi-cluster warehouse) that this statement executed on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_tag": {"name": "query_tag", "description": "Query tag set for this statement through the QUERY_TAG session parameter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_status": {"name": "execution_status", "description": "Execution status for the query. Valid values: `success`, `fail`, `incident`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_code": {"name": "error_code", "description": "Error code, if the query returned an error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_message": {"name": "error_message", "description": "Error message, if the query returned an error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "Statement start time (in the UTC time zone). The table is naturally clustered on this column, meaning your queries will run much faster if you filter records using this column.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "Statement end time (in the UTC time zone).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_elapsed_time": {"name": "total_elapsed_time", "description": "Elapsed time (in milliseconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_scanned": {"name": "bytes_scanned", "description": "Number of bytes scanned by this statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "percentage_scanned_from_cache": {"name": "percentage_scanned_from_cache", "description": "The percentage of data scanned from the local disk cache. The value ranges from 0.0 to 1.0. Multiply by 100 to get a true percentage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_written": {"name": "bytes_written", "description": "Number of bytes written (e.g. when loading into a table).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_written_to_result": {"name": "bytes_written_to_result", "description": "Number of bytes written to a result object. For example, `select * from . . .` would produce a set of results in tabular format representing each field in the selection. In general, the results object represents whatever is produced as a result of the query, and BYTES_WRITTEN_TO_RESULT represents the size of the returned result.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_read_from_result": {"name": "bytes_read_from_result", "description": "Number of bytes read from a result object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_produced": {"name": "rows_produced", "description": "Number of rows produced by this statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_inserted": {"name": "rows_inserted", "description": "Number of rows inserted by the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_updated": {"name": "rows_updated", "description": "Number of rows updated by the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_deleted": {"name": "rows_deleted", "description": "Number of rows deleted by the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_unloaded": {"name": "rows_unloaded", "description": "Number of rows unloaded during data export.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_deleted": {"name": "bytes_deleted", "description": "Number of bytes deleted by the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "partitions_scanned": {"name": "partitions_scanned", "description": "Number of micro-partitions scanned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "partitions_total": {"name": "partitions_total", "description": "Total micro-partitions of all tables included in this query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_spilled_to_local_storage": {"name": "bytes_spilled_to_local_storage", "description": "Volume of data spilled to local disk on the warehouse nodes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_spilled_to_remote_storage": {"name": "bytes_spilled_to_remote_storage", "description": "Volume of data spilled to remote disk (i.e. AWS S3, Google Cloud Storage, Azure Blob).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_sent_over_the_network": {"name": "bytes_sent_over_the_network", "description": "Volume of data sent over the network.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compilation_time": {"name": "compilation_time", "description": "Compilation time (in milliseconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_time": {"name": "execution_time", "description": "Execution time (in milliseconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_provisioning_time": {"name": "queued_provisioning_time", "description": "Time (in milliseconds) spent in the warehouse queue, waiting for the warehouse compute resources to provision, due to warehouse creation, resume, or resize.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_repair_time": {"name": "queued_repair_time", "description": "Time (in milliseconds) spent in the warehouse queue, waiting for compute resources in the warehouse to be repaired.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "queued_overload_time": {"name": "queued_overload_time", "description": "Time (in milliseconds) spent in the warehouse queue, due to the warehouse being overloaded by the current query workload.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_blocked_time": {"name": "transaction_blocked_time", "description": "Time (in milliseconds) spent blocked by a concurrent DML.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outbound_data_transfer_cloud": {"name": "outbound_data_transfer_cloud", "description": "Target cloud provider for statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outbound_data_transfer_region": {"name": "outbound_data_transfer_region", "description": "Target region for statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "outbound_data_transfer_bytes": {"name": "outbound_data_transfer_bytes", "description": "Number of bytes transferred in statements that unload data to another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inbound_data_transfer_cloud": {"name": "inbound_data_transfer_cloud", "description": "Source cloud provider for statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inbound_data_transfer_region": {"name": "inbound_data_transfer_region", "description": "Source region for statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inbound_data_transfer_bytes": {"name": "inbound_data_transfer_bytes", "description": "Number of bytes transferred in statements that load data from another region and/or cloud.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_external_files_time": {"name": "list_external_files_time", "description": "Time (in milliseconds) spent listing external files.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used_cloud_services": {"name": "credits_used_cloud_services", "description": "Number of credits used for cloud services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "release_version": {"name": "release_version", "description": "Release version in the format of `<major_release>.<minor_release>.<patch_release>`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_invocations": {"name": "external_function_total_invocations", "description": "The aggregate number of times that this query called remote services. For important details, see the Usage Notes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_sent_rows": {"name": "external_function_total_sent_rows", "description": "The total number of rows that this query sent in all calls to all remote services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_received_rows": {"name": "external_function_total_received_rows", "description": "The total number of rows that this query received from all calls to all remote services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_sent_bytes": {"name": "external_function_total_sent_bytes", "description": "The total number of bytes that this query sent in all calls to all remote services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "external_function_total_received_bytes": {"name": "external_function_total_received_bytes", "description": "The total number of bytes that this query received from all calls to all remote services.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_load_percent": {"name": "query_load_percent", "description": "The approximate percentage of active compute resources in the warehouse for this query execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_client_generated_statement": {"name": "is_client_generated_statement", "description": "Indicates whether the query was client-generated. These tend to be queries from the Snowflake UI (i.e. Snowsight or the Classic Console).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_acceleration_bytes_scanned": {"name": "query_acceleration_bytes_scanned", "description": "Number of bytes scanned by the query acceleration service.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_acceleration_partitions_scanned": {"name": "query_acceleration_partitions_scanned", "description": "Number of partitions scanned by the query acceleration service.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_acceleration_upper_limit_scale_factor": {"name": "query_acceleration_upper_limit_scale_factor", "description": "Upper limit scale factor that a query would have benefited from.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_query_history.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "incremental"}, "created_at": 1695341479.5126996, "relation_name": "BRONZE.OBSERVABILITY.stg_query_history", "raw_code": "{{ config(materialized='incremental') }}\n\nselect\n    query_id,\n    query_text,\n    database_id,\n    database_name,\n    schema_id,\n    schema_name,\n    query_type,\n    session_id,\n    user_name,\n    role_name,\n    warehouse_id,\n    warehouse_name,\n    warehouse_size,\n    warehouse_type,\n    cluster_number,\n    query_tag,\n    execution_status,\n    error_code,\n    error_message,\n    start_time,\n    end_time,\n    total_elapsed_time,\n    bytes_scanned,\n    percentage_scanned_from_cache,\n    bytes_written,\n    bytes_written_to_result,\n    bytes_read_from_result,\n    rows_produced,\n    rows_inserted,\n    rows_updated,\n    rows_deleted,\n    rows_unloaded,\n    bytes_deleted,\n    partitions_scanned,\n    partitions_total,\n    bytes_spilled_to_local_storage,\n    bytes_spilled_to_remote_storage,\n    bytes_sent_over_the_network,\n    compilation_time,\n    execution_time,\n    queued_provisioning_time,\n    queued_repair_time,\n    queued_overload_time,\n    transaction_blocked_time,\n    outbound_data_transfer_cloud,\n    outbound_data_transfer_region,\n    outbound_data_transfer_bytes,\n    inbound_data_transfer_cloud,\n    inbound_data_transfer_region,\n    inbound_data_transfer_bytes,\n    list_external_files_time,\n    credits_used_cloud_services,\n    release_version,\n    external_function_total_invocations,\n    external_function_total_sent_rows,\n    external_function_total_received_rows,\n    external_function_total_sent_bytes,\n    external_function_total_received_bytes,\n    query_load_percent,\n    is_client_generated_statement,\n    query_acceleration_bytes_scanned,\n    query_acceleration_partitions_scanned,\n    query_acceleration_upper_limit_scale_factor\nfrom {{ source('snowflake_account_usage', 'query_history') }}\n\n{% if is_incremental() %}\n    -- must use end time in case query hasn't completed\n    where end_time > (select max(end_time) from {{ this }})\n{% endif %}\n\norder by start_time", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "query_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.query_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_usage_in_currency_daily", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_usage_in_currency_daily.sql", "original_file_path": "models/staging/stg_usage_in_currency_daily.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_usage_in_currency_daily"], "alias": "stg_usage_in_currency_daily", "checksum": {"name": "sha256", "checksum": "648573d0bddf9cc103882e3b2f75581c70b8daba741325f63d9563a5ce192c68"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY"}, "created_at": 1695341477.9194088, "relation_name": "BRONZE.OBSERVABILITY.stg_usage_in_currency_daily", "raw_code": "select\n    organization_name,\n    contract_number,\n    account_name,\n    account_locator,\n    region,\n    service_level,\n    usage_date,\n    usage_type,\n    currency,\n    usage,\n    usage_in_currency,\n    balance_source\nfrom {{ source('snowflake_organization_usage', 'usage_in_currency_daily') }}", "language": "sql", "refs": [], "sources": [["snowflake_organization_usage", "usage_in_currency_daily"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_access_history": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_access_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_access_history.sql", "original_file_path": "models/staging/stg_access_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_access_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_access_history"], "alias": "stg_access_history", "checksum": {"name": "sha256", "checksum": "bc851b6aa69068f36ba825382f0a69c262368b1a3dae8f9e9de0a630a311ddf3"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "See https://docs.snowflake.com/en/sql-reference/account-usage/access_history.html", "columns": {"query_id": {"name": "query_id", "description": "An internal, system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_start_time": {"name": "query_start_time", "description": "The statement start time (UTC time zone).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The user who issued the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "direct_objects_accessed": {"name": "direct_objects_accessed", "description": "A JSON array of data objects such as tables, views, and columns directly named in the query explicitly or through shortcuts such as using an asterisk (i.e. *). Virtual columns can be returned in this field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_objects_accessed": {"name": "base_objects_accessed", "description": "A JSON array of all base data objects, specifically, columns of tables to execute the query. This field specifies view names or view columns, including virtual columns, if a shared view is accessed in a data sharing consumer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "objects_modified": {"name": "objects_modified", "description": "A JSON array that specifies the objects that were associated with a write operation in the query.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_access_history.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "incremental"}, "created_at": 1695341479.4880888, "relation_name": "BRONZE.OBSERVABILITY.stg_access_history", "raw_code": "{{ config(materialized='incremental') }}\n\nselect\n    query_id,\n    query_start_time,\n    user_name,\n    direct_objects_accessed,\n    base_objects_accessed,\n    objects_modified\nfrom {{ source('snowflake_account_usage', 'access_history') }}\n\n{% if is_incremental() %}\n    where query_start_time > (select coalesce(max(query_start_time), date '1970-01-01') from {{ this }})\n{% endif %}\n\norder by query_start_time asc", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "access_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.access_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_rate_sheet_daily": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_rate_sheet_daily", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_rate_sheet_daily.sql", "original_file_path": "models/staging/stg_rate_sheet_daily.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_rate_sheet_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_rate_sheet_daily"], "alias": "stg_rate_sheet_daily", "checksum": {"name": "sha256", "checksum": "85776a7858e78ca8ac82e70ebd0005740a268c6ea1354f6a8feab6f907ddd26e"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A materialized copy of the snowflake.organization.rate_sheet_daily view. It can be used to get the effective rates used for calculating usage in the organization currency based on credits used for all Snowflake accounts in your organization. It contains 1 row per day per rate in Snowflake account (some days can have more than 1 rate for a given usage_type, usually when the contract is updated).", "columns": {"date": {"name": "date", "description": "Date (in the UTC time zone) for the effective price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Name of the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_number": {"name": "contract_number", "description": "Snowflake contract number for the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_locator": {"name": "account_locator", "description": "Locator for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "Name of the region where the account is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_level": {"name": "service_level", "description": "Service level of the Snowflake account (Standard, Enterprise, Business Critical, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "usage_type": {"name": "usage_type", "description": "The type of usage, which can be one of compute, storage, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the effective_rate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_rate": {"name": "effective_rate", "description": "The rate after applying any applicable discounts per the contract for the organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_type": {"name": "service_type", "description": "The type of service, which can be one of compute or storage.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_rate_sheet_daily.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "table"}, "created_at": 1695341479.5409656, "relation_name": "BRONZE.OBSERVABILITY.stg_rate_sheet_daily", "raw_code": "-- <1000 rows, will be more expensive to materialize incrementally with multiple SQL statements\n{{ config(materialized='table') }}\n\nselect\n    date,\n    organization_name,\n    contract_number,\n    account_name,\n    account_locator,\n    region,\n    service_level,\n    usage_type,\n    currency,\n    effective_rate,\n    service_type\nfrom {{ source('snowflake_organization_usage', 'rate_sheet_daily') }}\norder by date", "language": "sql", "refs": [], "sources": [["snowflake_organization_usage", "rate_sheet_daily"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_database_storage_usage_history": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_database_storage_usage_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_database_storage_usage_history.sql", "original_file_path": "models/staging/stg_database_storage_usage_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_database_storage_usage_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_database_storage_usage_history"], "alias": "stg_database_storage_usage_history", "checksum": {"name": "sha256", "checksum": "5bd212428897b2b6ecced21f3d6994c2679fa6fe475121fff6a39353714db993"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "See https://docs.snowflake.com/en/sql-reference/account-usage/database_storage_usage_history.html", "columns": {"date": {"name": "date", "description": "Date (in the UTC time zone) of this storage usage record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "Name of the database.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_database_bytes": {"name": "average_database_bytes", "description": "Number of bytes of database storage used, including data in Time Travel.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_failsafe_bytes": {"name": "average_failsafe_bytes", "description": "Number of bytes of Fail-safe storage used.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_database_storage_usage_history.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "view"}, "created_at": 1695341479.5435662, "relation_name": "BRONZE.OBSERVABILITY.stg_database_storage_usage_history", "raw_code": "{{ config(materialized='view') }}\n\nselect\n    usage_date as date,\n    database_name,\n    average_database_bytes,\n    average_failsafe_bytes\nfrom {{ source('snowflake_account_usage', 'database_storage_usage_history') }}", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "database_storage_usage_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_metering_daily_history": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_metering_daily_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_metering_daily_history.sql", "original_file_path": "models/staging/stg_metering_daily_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_metering_daily_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_metering_daily_history"], "alias": "stg_metering_daily_history", "checksum": {"name": "sha256", "checksum": "7e934147e86151863372f66eb481e638251df80e28101dadf0a4ecd4071171a8"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "See https://docs.snowflake.com/en/sql-reference/account-usage/metering_daily_history.html", "columns": {"date": {"name": "date", "description": "The date (in the UTC time zone) in which the usage took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_adjustment_cloud_services": {"name": "credits_adjustment_cloud_services", "description": "Number of credits adjusted for included cloud services. This is a negative value (e.g. -9).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_metering_daily_history.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "view"}, "created_at": 1695341479.5450535, "relation_name": "BRONZE.OBSERVABILITY.stg_metering_daily_history", "raw_code": "{{ config(materialized='view') }}\n\nselect\n    usage_date as date,\n    service_type,\n    credits_used_cloud_services,\n    credits_adjustment_cloud_services\nfrom {{ source('snowflake_account_usage', 'metering_daily_history') }}", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "metering_daily_history"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_warehouse_metering_history": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_warehouse_metering_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_warehouse_metering_history.sql", "original_file_path": "models/staging/stg_warehouse_metering_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_warehouse_metering_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_warehouse_metering_history"], "alias": "stg_warehouse_metering_history", "checksum": {"name": "sha256", "checksum": "e088408e4593b50b788ad24ac4a09950cd4b2590853f1672731bc32c004c57fa"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An incrementally materialized copy of the snowflake.account_usage.warehouse_metering_history view. It can be used to return the hourly credit usage for a single warehouse (or all the warehouses in your account) within the last 365 days (1 year). It contains 1 row per hour per warehouse.", "columns": {"start_time": {"name": "start_time", "description": "The date and beginning of the hour (in the UTC time zone) in which the warehouse usage took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_time": {"name": "end_time", "description": "The date and end of the hour (in the UTC time zone) in which the warehouse usage took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_id": {"name": "warehouse_id", "description": "Internal/system-generated identifier for the warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "Name of the warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used": {"name": "credits_used", "description": "Total number of credits used for the warehouse in the hour. This is a sum of CREDITS_USED_COMPUTE and CREDITS_USED_CLOUD_SERVICES. This value does not take into account the adjustment for cloud services, and may therefore be greater than your actual credit consumption.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used_compute": {"name": "credits_used_compute", "description": "Number of credits used for the warehouse in the hour.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used_cloud_services": {"name": "credits_used_cloud_services", "description": "Number of credits used for cloud services in the hour.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_warehouse_metering_history.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "incremental"}, "created_at": 1695341479.548363, "relation_name": "BRONZE.OBSERVABILITY.stg_warehouse_metering_history", "raw_code": "{{ config(materialized='incremental') }}\n\nselect\n    start_time,\n    end_time,\n    warehouse_id,\n    warehouse_name,\n    credits_used,\n    credits_used_compute,\n    credits_used_cloud_services\nfrom {{ source('snowflake_account_usage', 'warehouse_metering_history') }}\n\n{% if is_incremental() %}\n    where end_time > (select max(end_time) from {{ this }})\n{% endif %}\n\norder by start_time", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "warehouse_metering_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_warehouse_events_history": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_warehouse_events_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_warehouse_events_history.sql", "original_file_path": "models/staging/stg_warehouse_events_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_warehouse_events_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_warehouse_events_history"], "alias": "stg_warehouse_events_history", "checksum": {"name": "sha256", "checksum": "06405ec9e0c398ef2d2eccce31ad23a4b798a8be099d254d96ee4d5375b5b3d2"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An incrementally materialized copy of the snowflake.account_usage.warehouse_events_history view. It can be used to return the events that have been triggered for the single-cluster and multi-cluster warehouses in your account in the last 365 days (1 year). It contains 1 row per hour per warehouse event.", "columns": {"timestamp": {"name": "timestamp", "description": "The timestamp when the event is triggered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_id": {"name": "warehouse_id", "description": "The unique warehouse ID (assigned by Snowflake) that corresponds to the warehouse name in your account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warehouse_name": {"name": "warehouse_name", "description": "The name of the warehouse in your account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cluster_number": {"name": "cluster_number", "description": "If an event was triggered for a specific cluster in a multi-cluster warehouse, the number of the cluster for which the event was triggered; if the event was triggered for all clusters in the warehouse or is not applicable for a single-cluster warehouse, no value is displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Name of the event. https://docs.snowflake.com/en/sql-reference/account-usage/warehouse_events_history.html#event-name-descriptions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_reason": {"name": "event_reason", "description": "The cause of the event. https://docs.snowflake.com/en/sql-reference/account-usage/warehouse_events_history.html#event-reason-descriptions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_state": {"name": "event_state", "description": "State of an event that takes time to complete or can be canceled: STARTED, COMPLETED, PARTIALLY_COMPLETED.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "User who initiated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role_name": {"name": "role_name", "description": "Role that was active in the session at the time the event was initiated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_id": {"name": "query_id", "description": "Internal/system-generated identifier for the SQL statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_warehouse_events_history.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "incremental"}, "created_at": 1695341479.5362122, "relation_name": "BRONZE.OBSERVABILITY.stg_warehouse_events_history", "raw_code": "{{ config(materialized='incremental') }}\n\nselect\n    timestamp,\n    warehouse_id,\n    warehouse_name,\n    cluster_number,\n    event_name,\n    event_reason,\n    event_state,\n    user_name,\n    role_name,\n    query_id\nfrom {{ source('snowflake_account_usage', 'warehouse_events_history') }}\n\n{% if is_incremental() %}\n    where timestamp > (select max(timestamp) from {{ this }})\n{% endif %}\n\norder by timestamp asc", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "warehouse_events_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_events_history"]}, "compiled_path": null}, "model.dbt_snowflake_monitoring.stg_metering_history": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_metering_history", "resource_type": "model", "package_name": "dbt_snowflake_monitoring", "path": "staging/stg_metering_history.sql", "original_file_path": "models/staging/stg_metering_history.sql", "unique_id": "model.dbt_snowflake_monitoring.stg_metering_history", "fqn": ["dbt_snowflake_monitoring", "staging", "stg_metering_history"], "alias": "stg_metering_history", "checksum": {"name": "sha256", "checksum": "aad0956a1ffd3227ea2ace0bddd2ca184422c0e0ba40fe0ae2701551a7b3e807"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "See https://docs.snowflake.com/en/sql-reference/account-usage/metering_history.html", "columns": {"name": {"name": "name", "description": "Name of the service type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used_compute": {"name": "credits_used_compute", "description": "Number of credits used for virtual warehouses in the hour.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_time": {"name": "start_time", "description": "The date and beginning of the hour (in the UTC time zone) in which the usage took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_type": {"name": "service_type", "description": "The type of service, which can be one of AUTO_CLUSTERING, MATERIALIZED_VIEW, PIPE, QUERY_ACCELERATION, REPLICATION, SEARCH_OPTIMIZATION, WAREHOUSE_METERING, or WAREHOUSE_METERING_READER.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used_cloud_services": {"name": "credits_used_cloud_services", "description": "Number of credits used for cloud services in the hour.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credits_used": {"name": "credits_used", "description": "Total number of credits used for the account in the hour. This is a sum of CREDITS_USED_COMPUTE and CREDITS_USED_CLOUD_SERVICES. This value does not take into account the adjustment for cloud services, and may therefore be greater than your actual credit consumption.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_snowflake_monitoring://models/staging/stg_metering_history.yml", "build_path": null, "deferred": false, "unrendered_config": {"on_schema_change": "append_new_columns", "schema": "OBSERVABILITY", "materialized": "incremental"}, "created_at": 1695341479.531472, "relation_name": "BRONZE.OBSERVABILITY.stg_metering_history", "raw_code": "{{ config(materialized='incremental') }}\n\nselect\n    name,\n    credits_used_compute,\n    start_time,\n    end_time,\n    service_type,\n    credits_used_cloud_services,\n    credits_used\nfrom {{ source('snowflake_account_usage', 'metering_history') }}\n\n{% if is_incremental() %}\n    where end_time > (select max(end_time) from {{ this }})\n{% endif %}\n\norder by start_time asc", "language": "sql", "refs": [], "sources": [["snowflake_account_usage", "metering_history"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history"]}, "compiled_path": null}, "model.dbt_artifacts.fct_dbt__test_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "fct_dbt__test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__test_executions.sql", "original_file_path": "models/fct_dbt__test_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "fqn": ["dbt_artifacts", "fct_dbt__test_executions"], "alias": "fct_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "e3f063c873571c579a15322193d5eb934d877c2b9ef4cfe56f0267af345a6142"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about test executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.577847, "relation_name": "BRONZE.OBSERVABILITY.fct_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__test_executions') }}\n\n),\n\ntest_executions as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures\n    from base\n\n)\n\nselect * from test_executions", "language": "sql", "refs": [["stg_dbt__test_executions"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__test_executions"]}, "compiled_path": null}, "model.dbt_artifacts.fct_dbt__snapshot_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "fct_dbt__snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__snapshot_executions.sql", "original_file_path": "models/fct_dbt__snapshot_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__snapshot_executions", "fqn": ["dbt_artifacts", "fct_dbt__snapshot_executions"], "alias": "fct_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "9adc805db26a04e0c9640a31a86706026e90b49b6ac5eb0f12e3d2dfff41ab44"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about snapshot executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.573124, "relation_name": "BRONZE.OBSERVABILITY.fct_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshot_executions') }}\n\n),\n\nsnapshot_executions as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias\n    from base\n\n)\n\nselect * from snapshot_executions", "language": "sql", "refs": [["stg_dbt__snapshot_executions"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshot_executions"]}, "compiled_path": null}, "model.dbt_artifacts.dim_dbt__tests": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "dim_dbt__tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__tests.sql", "original_file_path": "models/dim_dbt__tests.sql", "unique_id": "model.dbt_artifacts.dim_dbt__tests", "fqn": ["dbt_artifacts", "dim_dbt__tests"], "alias": "dim_dbt__tests", "checksum": {"name": "sha256", "checksum": "157bb696979983cf36a9779e9a56f6f833de060191a4b867f3648afafa32fb71"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about tests.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.5606863, "relation_name": "BRONZE.OBSERVABILITY.dim_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__tests') }}\n\n),\n\ntests as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from tests", "language": "sql", "refs": [["stg_dbt__tests"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__tests"]}, "compiled_path": null}, "model.dbt_artifacts.dim_dbt__snapshots": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "dim_dbt__snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__snapshots.sql", "original_file_path": "models/dim_dbt__snapshots.sql", "unique_id": "model.dbt_artifacts.dim_dbt__snapshots", "fqn": ["dbt_artifacts", "dim_dbt__snapshots"], "alias": "dim_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "5513b505bb4f4c2f46b2ae1bc8d7fe6c292b4ab9e3db6e9676ecdc9c7a43e9e4"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about snapshots.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.5663304, "relation_name": "BRONZE.OBSERVABILITY.dim_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshots') }}\n\n),\n\nsnapshots as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from snapshots", "language": "sql", "refs": [["stg_dbt__snapshots"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshots"]}, "compiled_path": null}, "model.dbt_artifacts.fct_dbt__seed_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "fct_dbt__seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__seed_executions.sql", "original_file_path": "models/fct_dbt__seed_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__seed_executions", "fqn": ["dbt_artifacts", "fct_dbt__seed_executions"], "alias": "fct_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "192fd04719e40dd822d688c4a011b99865404320dd241a1893c26b3d78501252"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about seed executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.608163, "relation_name": "BRONZE.OBSERVABILITY.fct_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seed_executions') }}\n\n),\n\nseed_executions as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias\n    from base\n\n)\n\nselect * from seed_executions", "language": "sql", "refs": [["stg_dbt__seed_executions"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seed_executions"]}, "compiled_path": null}, "model.dbt_artifacts.fct_dbt__model_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "fct_dbt__model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__model_executions.sql", "original_file_path": "models/fct_dbt__model_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "fqn": ["dbt_artifacts", "fct_dbt__model_executions"], "alias": "fct_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "a111011ede098c4f4a04f05a9ab54a961c801f65463cf2f21e3028c5a43c28a3"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about model executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_affected": {"name": "bytes_affected", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6146863, "relation_name": "BRONZE.OBSERVABILITY.fct_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n\n),\n\nmodel_executions as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        {% if target.type == 'bigquery' %}\n            bytes_processed,\n        {% endif %}\n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from model_executions", "language": "sql", "refs": [["stg_dbt__model_executions"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__model_executions"]}, "compiled_path": null}, "model.dbt_artifacts.dim_dbt__current_models": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "dim_dbt__current_models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__current_models.sql", "original_file_path": "models/dim_dbt__current_models.sql", "unique_id": "model.dbt_artifacts.dim_dbt__current_models", "fqn": ["dbt_artifacts", "dim_dbt__current_models"], "alias": "dim_dbt__current_models", "checksum": {"name": "sha256", "checksum": "216edd27f1ec80eaaa536cc8c691f73f508a1367330102fa0dd14e203ad95385"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about models' most recent successful runs", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_completed_at": {"name": "last_full_refresh_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_rows_affected": {"name": "last_full_refresh_run_rows_affected", "description": "Number of rows affected by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_bytes_processed": {"name": "last_full_refresh_run_bytes_processed", "description": "Number of bytes processed by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_total_runtime": {"name": "last_full_refresh_run_total_runtime", "description": "Total time spent executing the node's last full (non-incremental) run (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_completed_at": {"name": "last_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_rows_affected": {"name": "last_run_rows_affected", "description": "Number of rows affected by the node's last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_bytes_processed": {"name": "last_run_bytes_processed", "description": "Number of bytes processed by the node's last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_total_runtime": {"name": "last_run_total_runtime", "description": "Total time spent executing the node's last run (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__current_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.62298, "relation_name": "BRONZE.OBSERVABILITY.dim_dbt__current_models", "raw_code": "with base as (\n    select *\n    from {{ ref('stg_dbt__models') }}\n),\n\nmodel_executions as (\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n),\n\nlatest_models as (\n    /* Retrieves the models present in the most recent run */\n    select *\n    from base\n    where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n    /* Retreives all successful run information for the models present in the most\n    recent run and ranks them based on query completion time */\n    select\n        model_executions.node_id\n        , model_executions.was_full_refresh\n        , model_executions.query_completed_at\n        , model_executions.total_node_runtime\n        , model_executions.rows_affected\n        {% if target.type == 'bigquery' %}\n        , model_executions.bytes_processed\n        {% endif %}\n        , row_number() over (\n            partition by latest_models.node_id, model_executions.was_full_refresh\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx\n    from model_executions\n    inner join latest_models on model_executions.node_id = latest_models.node_id\n    where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n    select\n        node_id\n        , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n        , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n        , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(case when was_full_refresh then bytes_processed end) as last_full_refresh_run_bytes_processed\n        {% endif %}\n        , max(query_completed_at) as last_run_completed_at\n        , max(total_node_runtime) as last_run_total_runtime\n        , max(rows_affected) as last_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(bytes_processed) as last_run_bytes_processed\n        {% endif %}\n    from latest_models_runs\n    where run_idx = 1\n    group by 1\n),\n\nfinal as (\n    select\n        latest_models.*\n        , latest_model_stats.last_full_refresh_run_completed_at\n        , latest_model_stats.last_full_refresh_run_total_runtime\n        , latest_model_stats.last_full_refresh_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_full_refresh_run_bytes_processed\n        {% endif %}\n        , latest_model_stats.last_run_completed_at\n        , latest_model_stats.last_run_total_runtime\n        , latest_model_stats.last_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_run_bytes_processed\n        {% endif %}\n    from latest_models\n    left join latest_model_stats\n        on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect * from final", "language": "sql", "refs": [["stg_dbt__models"], ["stg_dbt__model_executions"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models", "model.dbt_artifacts.stg_dbt__model_executions"]}, "compiled_path": null}, "model.dbt_artifacts.dim_dbt__exposures": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "dim_dbt__exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__exposures.sql", "original_file_path": "models/dim_dbt__exposures.sql", "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "fqn": ["dbt_artifacts", "dim_dbt__exposures"], "alias": "dim_dbt__exposures", "checksum": {"name": "sha256", "checksum": "3632b529bf1dd2a1dfa86444a95ba41745c4c224121c19d3ddcfbc20a4016c7e"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about exposures.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__exposures.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6286201, "relation_name": "BRONZE.OBSERVABILITY.dim_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__exposures') }}\n\n),\n\nexposures as (\n\n    select\n        exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes\n    from base\n\n)\n\nselect * from exposures", "language": "sql", "refs": [["stg_dbt__exposures"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__exposures"]}, "compiled_path": null}, "model.dbt_artifacts.dim_dbt__models": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "dim_dbt__models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__models.sql", "original_file_path": "models/dim_dbt__models.sql", "unique_id": "model.dbt_artifacts.dim_dbt__models", "fqn": ["dbt_artifacts", "dim_dbt__models"], "alias": "dim_dbt__models", "checksum": {"name": "sha256", "checksum": "6c5c24260386f0d2c2284d0f6844eb4d55d71bb302b17959d5efbb703b34ff46"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about models.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.5921326, "relation_name": "BRONZE.OBSERVABILITY.dim_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__models') }}\n\n),\n\nmodels as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from models", "language": "sql", "refs": [["stg_dbt__models"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models"]}, "compiled_path": null}, "model.dbt_artifacts.dim_dbt__sources": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "dim_dbt__sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__sources.sql", "original_file_path": "models/dim_dbt__sources.sql", "unique_id": "model.dbt_artifacts.dim_dbt__sources", "fqn": ["dbt_artifacts", "dim_dbt__sources"], "alias": "dim_dbt__sources", "checksum": {"name": "sha256", "checksum": "319fceac4dee8ee048a99d857d27e5e70d499ef12718abed922ae0eee0f69313"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about sources.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__sources.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.5974178, "relation_name": "BRONZE.OBSERVABILITY.dim_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__sources') }}\n\n),\n\nsources as (\n\n    select\n        source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from sources", "language": "sql", "refs": [["stg_dbt__sources"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__sources"]}, "compiled_path": null}, "model.dbt_artifacts.dim_dbt__seeds": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "dim_dbt__seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__seeds.sql", "original_file_path": "models/dim_dbt__seeds.sql", "unique_id": "model.dbt_artifacts.dim_dbt__seeds", "fqn": ["dbt_artifacts", "dim_dbt__seeds"], "alias": "dim_dbt__seeds", "checksum": {"name": "sha256", "checksum": "16a76fa8d240b2014c6a230f5e3d1ad11bc58418ca059d3a23dd7d80cc5ef323"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about seeds.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.602138, "relation_name": "BRONZE.OBSERVABILITY.dim_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seeds') }}\n\n),\n\nseeds as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from seeds", "language": "sql", "refs": [["stg_dbt__seeds"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seeds"]}, "compiled_path": null}, "model.dbt_artifacts.fct_dbt__invocations": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "fct_dbt__invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__invocations.sql", "original_file_path": "models/fct_dbt__invocations.sql", "unique_id": "model.dbt_artifacts.fct_dbt__invocations", "fqn": ["dbt_artifacts", "fct_dbt__invocations"], "alias": "fct_dbt__invocations", "checksum": {"name": "sha256", "checksum": "03ad2d98f2bb14c728dfd1e77a3d882e271535779d024dc0a7be5ab44ce3d771"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about invocations.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__invocations.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.5856862, "relation_name": "BRONZE.OBSERVABILITY.fct_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__invocations') }}\n\n),\n\ninvocations as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from invocations", "language": "sql", "refs": [["stg_dbt__invocations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__invocations"]}, "compiled_path": null}, "model.dbt_artifacts.snapshot_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/snapshot_executions.sql", "original_file_path": "models/sources/snapshot_executions.sql", "unique_id": "model.dbt_artifacts.snapshot_executions", "fqn": ["dbt_artifacts", "sources", "snapshot_executions"], "alias": "snapshot_executions", "checksum": {"name": "sha256", "checksum": "2ecc1bc070853022de7bb1fe576790937aed14f381f9ad14d9ab1419f0aebb58"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.0187047, "relation_name": "BRONZE.OBSERVABILITY.snapshot_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.test_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/test_executions.sql", "original_file_path": "models/sources/test_executions.sql", "unique_id": "model.dbt_artifacts.test_executions", "fqn": ["dbt_artifacts", "sources", "test_executions"], "alias": "test_executions", "checksum": {"name": "sha256", "checksum": "39f54bc4d9ce331ec49ac85a9fec686d8b620f15a3e5c1699ae9aed0f11569e3"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.0407672, "relation_name": "BRONZE.OBSERVABILITY.test_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_int() }}) as failures\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.exposures": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/exposures.sql", "original_file_path": "models/sources/exposures.sql", "unique_id": "model.dbt_artifacts.exposures", "fqn": ["dbt_artifacts", "sources", "exposures"], "alias": "exposures", "checksum": {"name": "sha256", "checksum": "e066a6845074144411a223d2db537d77ee2108d702e34fb2523e85b29466b2fc"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.0503385, "relation_name": "BRONZE.OBSERVABILITY.exposures", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as type,\n    cast(null as {{ type_json() }}) as owner,\n    cast(null as {{ type_string() }}) as maturity,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as description,\n    cast(null as {{ type_string() }}) as url,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_array() }}) as depends_on_nodes\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json", "macro.dbt_artifacts.type_array"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.models": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/models.sql", "original_file_path": "models/sources/models.sql", "unique_id": "model.dbt_artifacts.models", "fqn": ["dbt_artifacts", "sources", "models"], "alias": "models", "checksum": {"name": "sha256", "checksum": "828694c88ec4506c82169459bbcfb2484ab7025cc87861b17485f6c630ae792d"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.0646374, "relation_name": "BRONZE.OBSERVABILITY.models", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.seeds": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/seeds.sql", "original_file_path": "models/sources/seeds.sql", "unique_id": "model.dbt_artifacts.seeds", "fqn": ["dbt_artifacts", "sources", "seeds"], "alias": "seeds", "checksum": {"name": "sha256", "checksum": "8d3a63ddabd3130641361296f472e52bf6991125d177b8bf6e1d88677b8e573c"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.0749087, "relation_name": "BRONZE.OBSERVABILITY.seeds", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.sources": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/sources.sql", "original_file_path": "models/sources/sources.sql", "unique_id": "model.dbt_artifacts.sources", "fqn": ["dbt_artifacts", "sources", "sources"], "alias": "sources", "checksum": {"name": "sha256", "checksum": "51e5dfc74061e0eaefe61a94f84b1568aaedef1b8b216ed2db083f9863174719"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.0846636, "relation_name": "BRONZE.OBSERVABILITY.sources", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as source_name,\n    cast(null as {{ type_string() }}) as loader,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as identifier,\n    cast(null as {{ type_string() }}) as loaded_at_field,\n    {% if target.type == 'snowflake'%}\n        cast(null as {{ type_array() }}) as freshness\n    {% else %}\n        cast(null as {{ type_json() }}) as freshness\n    {% endif %}\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.tests": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/tests.sql", "original_file_path": "models/sources/tests.sql", "unique_id": "model.dbt_artifacts.tests", "fqn": ["dbt_artifacts", "sources", "tests"], "alias": "tests", "checksum": {"name": "sha256", "checksum": "b119f5c951c557f42c7098a8d00eabb8a1b83f2b446bedb2d3c8af9db74740b3"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.0949712, "relation_name": "BRONZE.OBSERVABILITY.tests", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as test_path,\n    cast(null as {{ type_array() }}) as tags\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.snapshots": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/snapshots.sql", "original_file_path": "models/sources/snapshots.sql", "unique_id": "model.dbt_artifacts.snapshots", "fqn": ["dbt_artifacts", "sources", "snapshots"], "alias": "snapshots", "checksum": {"name": "sha256", "checksum": "8877cea5bc91627ab644e09743fcb96c32a3d47ebf5249937cd2089f973d6a55"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.1037235, "relation_name": "BRONZE.OBSERVABILITY.snapshots", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_string() }}) as strategy,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.seed_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/seed_executions.sql", "original_file_path": "models/sources/seed_executions.sql", "unique_id": "model.dbt_artifacts.seed_executions", "fqn": ["dbt_artifacts", "sources", "seed_executions"], "alias": "seed_executions", "checksum": {"name": "sha256", "checksum": "2ecc1bc070853022de7bb1fe576790937aed14f381f9ad14d9ab1419f0aebb58"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.1138284, "relation_name": "BRONZE.OBSERVABILITY.seed_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.model_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/model_executions.sql", "original_file_path": "models/sources/model_executions.sql", "unique_id": "model.dbt_artifacts.model_executions", "fqn": ["dbt_artifacts", "sources", "model_executions"], "alias": "model_executions", "checksum": {"name": "sha256", "checksum": "da9cb1427ff8e8b5865a5202d6f5b48f58b127fd94e840c5707a2c8009bca62e"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.1249769, "relation_name": "BRONZE.OBSERVABILITY.model_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    {% if target.type == 'bigquery' %}\n        cast(null as {{ type_int() }}) as bytes_processed,\n    {% endif %}\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.invocations": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/invocations.sql", "original_file_path": "models/sources/invocations.sql", "unique_id": "model.dbt_artifacts.invocations", "fqn": ["dbt_artifacts", "sources", "invocations"], "alias": "invocations", "checksum": {"name": "sha256", "checksum": "0cb88835ee9f206b5dd1ff7c74f34e3f6e5027cc6d12edd140568187ccb0f4f4"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": true, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": true}, "created_at": 1695341478.1361136, "relation_name": "BRONZE.OBSERVABILITY.invocations", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as dbt_version,\n    cast(null as {{ type_string() }}) as project_name,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as dbt_command,\n    cast(null as {{ type_boolean() }}) as full_refresh_flag,\n    cast(null as {{ type_string() }}) as target_profile_name,\n    cast(null as {{ type_string() }}) as target_name,\n    cast(null as {{ type_string() }}) as target_schema,\n    cast(null as {{ type_int() }}) as target_threads,\n    cast(null as {{ type_string() }}) as dbt_cloud_project_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_job_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_reason_category,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_reason,\n    cast(null as {{ type_json() }}) as env_vars,\n    cast(null as {{ type_json() }}) as dbt_vars,\n    cast(null as {{ type_json() }}) as invocation_args,\n    cast(null as {{ type_json() }}) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__invocations": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__invocations.sql", "original_file_path": "models/staging/stg_dbt__invocations.sql", "unique_id": "model.dbt_artifacts.stg_dbt__invocations", "fqn": ["dbt_artifacts", "staging", "stg_dbt__invocations"], "alias": "stg_dbt__invocations", "checksum": {"name": "sha256", "checksum": "8fad1c836b8fa4f77766e35537b26cfddbe8869d47766bae2bd93676268a35ab"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about the invocations of dbt. One row per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__invocations.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6595085, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('invocations') }}\n\n),\n\nenhanced as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["invocations"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.invocations"]}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__model_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__model_executions.sql", "original_file_path": "models/staging/stg_dbt__model_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__model_executions"], "alias": "stg_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "8bf97279b4d80d1e5d49fb238600b050290956671acf4e0b87ba2ba254824e66"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about model executions. One row per model execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_processed": {"name": "bytes_processed", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6455278, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('model_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        {% if target.type == 'bigquery' %}\n            bytes_processed,\n        {% endif %}\n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["model_executions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.model_executions"]}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__seed_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__seed_executions.sql", "original_file_path": "models/staging/stg_dbt__seed_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__seed_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seed_executions"], "alias": "stg_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "243d3f4bc68ab9dd03899dc83fdb7118817e07a116b865c80157c1d8118d9505"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about seed executions. One row per seed execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6515877, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('seed_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["seed_executions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.seed_executions"]}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__snapshots": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__snapshots.sql", "original_file_path": "models/staging/stg_dbt__snapshots.sql", "unique_id": "model.dbt_artifacts.stg_dbt__snapshots", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshots"], "alias": "stg_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "de6ad5bd8b27e3eb35e7ccaee94c66953d178030f7336b10a279030e81e5da45"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6340933, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('snapshots') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["snapshots"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.snapshots"]}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__tests": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__tests.sql", "original_file_path": "models/staging/stg_dbt__tests.sql", "unique_id": "model.dbt_artifacts.stg_dbt__tests", "fqn": ["dbt_artifacts", "staging", "stg_dbt__tests"], "alias": "stg_dbt__tests", "checksum": {"name": "sha256", "checksum": "bc0a410ed9571f7795a79737a2cd304a28ee4db922dc90e4beb0c66949b5c23f"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about test executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6382892, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('tests') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["tests"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.tests"]}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__exposures": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__exposures.sql", "original_file_path": "models/staging/stg_dbt__exposures.sql", "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "fqn": ["dbt_artifacts", "staging", "stg_dbt__exposures"], "alias": "stg_dbt__exposures", "checksum": {"name": "sha256", "checksum": "cfc6ecf133242c233b69e2abd71f9d77867a70aad79314ec5c563c8604a29ddf"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about exposure exections. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__exposures.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.681951, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('exposures') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["exposures"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.exposures"]}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__snapshot_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__snapshot_executions.sql", "original_file_path": "models/staging/stg_dbt__snapshot_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__snapshot_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshot_executions"], "alias": "stg_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "c19c8b61848ea238ca8e9a6be4390c8c6aa21854583ca6db78c8ac4122425b2d"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about snapshot executions. One row per snapshot execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6880562, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('snapshot_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["snapshot_executions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.snapshot_executions"]}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__test_executions": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__test_executions.sql", "original_file_path": "models/staging/stg_dbt__test_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__test_executions"], "alias": "stg_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "9fd97246486de3156eaa84ad6c257300dbd1f4b3705da2b92fda6e1201f47c57"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about test executions. One row per test execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6931612, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('test_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["test_executions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.test_executions"]}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__seeds": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__seeds.sql", "original_file_path": "models/staging/stg_dbt__seeds.sql", "unique_id": "model.dbt_artifacts.stg_dbt__seeds", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seeds"], "alias": "stg_dbt__seeds", "checksum": {"name": "sha256", "checksum": "c736e277d661dffd4689ebd5e8a670ffad90103b9dbcd173e54d4037b06ddfd8"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Stageing model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.664481, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('seeds') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["seeds"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.seeds"]}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__models": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__models.sql", "original_file_path": "models/staging/stg_dbt__models.sql", "unique_id": "model.dbt_artifacts.stg_dbt__models", "fqn": ["dbt_artifacts", "staging", "stg_dbt__models"], "alias": "stg_dbt__models", "checksum": {"name": "sha256", "checksum": "dcbd8eace8332defd857f1b6ec6be50110795b88a93a8b38ca5f050a299e7295"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6710768, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('models') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["models"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.models"]}, "compiled_path": null}, "model.dbt_artifacts.stg_dbt__sources": {"database": "BRONZE", "schema": "OBSERVABILITY", "name": "stg_dbt__sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__sources.sql", "original_file_path": "models/staging/stg_dbt__sources.sql", "unique_id": "model.dbt_artifacts.stg_dbt__sources", "fqn": ["dbt_artifacts", "staging", "stg_dbt__sources"], "alias": "stg_dbt__sources", "checksum": {"name": "sha256", "checksum": "db8ba4f61865eb4d5192926653ee56f10a550377e2faf2c36257af8cc7b3c8a7"}, "config": {"enabled": true, "alias": null, "schema": "OBSERVABILITY", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about sources. One row per node per execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__sources.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "OBSERVABILITY", "materialized": "view", "file_format": "delta"}, "created_at": 1695341479.6762054, "relation_name": "BRONZE.OBSERVABILITY.stg_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('sources') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.surrogate_key(['command_invocation_id', 'node_id']) }} as source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [["sources"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.surrogate_key"], "nodes": ["model.dbt_artifacts.sources"]}, "compiled_path": null}, "operation.dbt_constraints.dbt_constraints-on-run-end-0": {"database": "BRONZE", "schema": "LANDING", "name": "dbt_constraints-on-run-end-0", "resource_type": "operation", "package_name": "dbt_constraints", "path": "hooks/dbt_constraints-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0", "fqn": ["dbt_constraints", "hooks", "dbt_constraints-on-run-end-0"], "alias": "dbt_constraints-on-run-end-0", "checksum": {"name": "sha256", "checksum": "322fdaf41d183a13b7417bf8f47935d83bfdf07242073cf29b8c8789010746fb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341478.3883119, "relation_name": null, "raw_code": "{{ dbt_constraints.create_constraints() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.create_constraints"], "nodes": []}, "compiled_path": null, "compiled": true, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "index": 0}, "test.dbt_gx_demo.not_null_processed_customer_info_C_CUSTOMER_SK.c589f7a5e1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "C_CUSTOMER_SK", "model": "{{ get_where_subquery(ref('processed_customer_info')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_processed_customer_info_C_CUSTOMER_SK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_processed_customer_info_C_CUSTOMER_SK.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.not_null_processed_customer_info_C_CUSTOMER_SK.c589f7a5e1", "fqn": ["dbt_gx_demo", "bronze", "processed", "not_null_processed_customer_info_C_CUSTOMER_SK"], "alias": "not_null_processed_customer_info_C_CUSTOMER_SK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341478.5456824, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["processed_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.processed_customer_info"]}, "compiled_path": null, "column_name": "C_CUSTOMER_SK", "file_key_name": "models.processed_customer_info"}, "test.dbt_gx_demo.not_null_processed_customer_info_C_CUSTOMER_ID.32f12b07f6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "C_CUSTOMER_ID", "model": "{{ get_where_subquery(ref('processed_customer_info')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_processed_customer_info_C_CUSTOMER_ID", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_processed_customer_info_C_CUSTOMER_ID.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.not_null_processed_customer_info_C_CUSTOMER_ID.32f12b07f6", "fqn": ["dbt_gx_demo", "bronze", "processed", "not_null_processed_customer_info_C_CUSTOMER_ID"], "alias": "not_null_processed_customer_info_C_CUSTOMER_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341478.5476887, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["processed_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.processed_customer_info"]}, "compiled_path": null, "column_name": "C_CUSTOMER_ID", "file_key_name": "models.processed_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_customer_info_LOAD_DATE_TIMESTAMP__Day__1000.eb9534213f": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(ref('processed_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_customer_info_LOAD_DATE_TIMESTAMP__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_b96394e2e9fdab0bd8937bae1951d87d.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_customer_info_LOAD_DATE_TIMESTAMP__Day__1000.eb9534213f", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_customer_info_LOAD_DATE_TIMESTAMP__Day__1000"], "alias": "dbt_expectations_expect_row_va_b96394e2e9fdab0bd8937bae1951d87d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_b96394e2e9fdab0bd8937bae1951d87d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_b96394e2e9fdab0bd8937bae1951d87d"}, "created_at": 1695341478.5497282, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b96394e2e9fdab0bd8937bae1951d87d\") }}", "language": "sql", "refs": [["processed_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_customer_info"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "models.processed_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_compound_columns_to_be_unique_processed_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID.5417155236": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["C_CUSTOMER_SK", "C_CUSTOMER_ID"], "model": "{{ get_where_subquery(ref('processed_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_processed_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_compou_b46aea7fba656a8f63121c2a92b95302.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_compound_columns_to_be_unique_processed_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID.5417155236", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_compound_columns_to_be_unique_processed_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID"], "alias": "dbt_expectations_expect_compou_b46aea7fba656a8f63121c2a92b95302", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_b46aea7fba656a8f63121c2a92b95302", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_b46aea7fba656a8f63121c2a92b95302"}, "created_at": 1695341478.5722997, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_b46aea7fba656a8f63121c2a92b95302\") }}", "language": "sql", "refs": [["processed_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_customer_info"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.processed_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_inventory_LOAD_DATE_TIMESTAMP__Day__1000.5ef7906344": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(ref('processed_inventory')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_inventory_LOAD_DATE_TIMESTAMP__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_5a24a3fe7ee6d59dbe55c53766f8aaf4.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_inventory_LOAD_DATE_TIMESTAMP__Day__1000.5ef7906344", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_inventory_LOAD_DATE_TIMESTAMP__Day__1000"], "alias": "dbt_expectations_expect_row_va_5a24a3fe7ee6d59dbe55c53766f8aaf4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_5a24a3fe7ee6d59dbe55c53766f8aaf4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_5a24a3fe7ee6d59dbe55c53766f8aaf4"}, "created_at": 1695341478.5881681, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_5a24a3fe7ee6d59dbe55c53766f8aaf4\") }}", "language": "sql", "refs": [["processed_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_inventory"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "models.processed_inventory"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_orders_LOAD_DATE_TIMESTAMP__Day__1000.7a702e56d1": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(ref('processed_orders')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_orders_LOAD_DATE_TIMESTAMP__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_410378f4e3de97b016e8dd5917f06e93.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_orders_LOAD_DATE_TIMESTAMP__Day__1000.7a702e56d1", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_orders_LOAD_DATE_TIMESTAMP__Day__1000"], "alias": "dbt_expectations_expect_row_va_410378f4e3de97b016e8dd5917f06e93", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_410378f4e3de97b016e8dd5917f06e93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_410378f4e3de97b016e8dd5917f06e93"}, "created_at": 1695341478.5942485, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_410378f4e3de97b016e8dd5917f06e93\") }}", "language": "sql", "refs": [["processed_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_orders"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "models.processed_orders"}, "test.dbt_gx_demo.dbt_expectations_expect_table_column_count_to_be_between_processed_orders_40__1.368c3d992b": {"test_metadata": {"name": "expect_table_column_count_to_be_between", "kwargs": {"min_value": 1, "max_value": 40, "model": "{{ get_where_subquery(ref('processed_orders')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_table_column_count_to_be_between_processed_orders_40__1", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_table__9053ab547a065c6fb4f0ccf66ef9fc27.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_table_column_count_to_be_between_processed_orders_40__1.368c3d992b", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_table_column_count_to_be_between_processed_orders_40__1"], "alias": "dbt_expectations_expect_table__9053ab547a065c6fb4f0ccf66ef9fc27", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__9053ab547a065c6fb4f0ccf66ef9fc27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__9053ab547a065c6fb4f0ccf66ef9fc27"}, "created_at": 1695341478.600323, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_table_column_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__9053ab547a065c6fb4f0ccf66ef9fc27\") }}", "language": "sql", "refs": [["processed_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_orders"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.processed_orders"}, "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_processed_orders_ORDERKEY__LINENUMBER.5800f50161": {"test_metadata": {"name": "expect_table_columns_to_contain_set", "kwargs": {"column_list": ["ORDERKEY", "LINENUMBER"], "model": "{{ get_where_subquery(ref('processed_orders')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_table_columns_to_contain_set_processed_orders_ORDERKEY__LINENUMBER", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_table__a9a21ff4f8ea8d576057b1f145f53fbb.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_processed_orders_ORDERKEY__LINENUMBER.5800f50161", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_table_columns_to_contain_set_processed_orders_ORDERKEY__LINENUMBER"], "alias": "dbt_expectations_expect_table__a9a21ff4f8ea8d576057b1f145f53fbb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__a9a21ff4f8ea8d576057b1f145f53fbb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__a9a21ff4f8ea8d576057b1f145f53fbb"}, "created_at": 1695341478.6079834, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_table_columns_to_contain_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__a9a21ff4f8ea8d576057b1f145f53fbb\") }}", "language": "sql", "refs": [["processed_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_orders"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.processed_orders"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_transactions_LOAD_DATE_TIMESTAMP__Day__1000.cd4f9ab805": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(ref('processed_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_transactions_LOAD_DATE_TIMESTAMP__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_c93c994cdb6212c61b576288fc57b430.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_transactions_LOAD_DATE_TIMESTAMP__Day__1000.cd4f9ab805", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_transactions_LOAD_DATE_TIMESTAMP__Day__1000"], "alias": "dbt_expectations_expect_row_va_c93c994cdb6212c61b576288fc57b430", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_c93c994cdb6212c61b576288fc57b430", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_c93c994cdb6212c61b576288fc57b430"}, "created_at": 1695341478.617601, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_c93c994cdb6212c61b576288fc57b430\") }}", "language": "sql", "refs": [["processed_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_transactions"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "models.processed_transactions"}, "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_processed_transactions_ORDER_ID__CUSTOMER_ID.83e85ab518": {"test_metadata": {"name": "expect_table_columns_to_contain_set", "kwargs": {"column_list": ["ORDER_ID", "CUSTOMER_ID"], "model": "{{ get_where_subquery(ref('processed_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_table_columns_to_contain_set_processed_transactions_ORDER_ID__CUSTOMER_ID", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_table__724173e4b40a5adcdd19bc0c4ae86660.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_processed_transactions_ORDER_ID__CUSTOMER_ID.83e85ab518", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_table_columns_to_contain_set_processed_transactions_ORDER_ID__CUSTOMER_ID"], "alias": "dbt_expectations_expect_table__724173e4b40a5adcdd19bc0c4ae86660", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__724173e4b40a5adcdd19bc0c4ae86660", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__724173e4b40a5adcdd19bc0c4ae86660"}, "created_at": 1695341478.6235137, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_table_columns_to_contain_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__724173e4b40a5adcdd19bc0c4ae86660\") }}", "language": "sql", "refs": [["processed_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_transactions"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.processed_transactions"}, "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_match_set_processed_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP.c56ca7a83e": {"test_metadata": {"name": "expect_table_columns_to_match_set", "kwargs": {"column_list": ["ORDER_ID", "CUSTOMER_ID", "ORDER_DATE", "TRANSACTION_DATE", "TRANSACTION_NUMBER", "AMOUNT", "TYPE", "LOAD_DATE_TIMESTAMP"], "model": "{{ get_where_subquery(ref('processed_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_table_columns_to_match_set_processed_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_table__19d1ce20dfed0fa80b7d5fdcdcb289cd.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_match_set_processed_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP.c56ca7a83e", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_table_columns_to_match_set_processed_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP"], "alias": "dbt_expectations_expect_table__19d1ce20dfed0fa80b7d5fdcdcb289cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__19d1ce20dfed0fa80b7d5fdcdcb289cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__19d1ce20dfed0fa80b7d5fdcdcb289cd"}, "created_at": 1695341478.6286075, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_table_columns_to_match_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__19d1ce20dfed0fa80b7d5fdcdcb289cd\") }}", "language": "sql", "refs": [["processed_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_transactions"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.processed_transactions"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_ETL_CREATE_DATE__Day__1000.b7e1c7ee16": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('processed_netflix_best_movie')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_ETL_CREATE_DATE__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_cf08af6365aa0ce385e296aa356dde40.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_ETL_CREATE_DATE__Day__1000.b7e1c7ee16", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_ETL_CREATE_DATE__Day__1000"], "alias": "dbt_expectations_expect_row_va_cf08af6365aa0ce385e296aa356dde40", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cf08af6365aa0ce385e296aa356dde40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cf08af6365aa0ce385e296aa356dde40"}, "created_at": 1695341478.6399567, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cf08af6365aa0ce385e296aa356dde40\") }}", "language": "sql", "refs": [["processed_netflix_best_movie"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_netflix_best_movie"]}, "compiled_path": null, "column_name": "ETL_CREATE_DATE", "file_key_name": "models.processed_netflix_best_movie"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_processed_netflix_best_movie_ETL_CREATE_DATE.4829a91995": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('processed_netflix_best_movie')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_processed_netflix_best_movie_ETL_CREATE_DATE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_2e84236b295da980dd09c9c7b0d4a666.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_processed_netflix_best_movie_ETL_CREATE_DATE.4829a91995", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_column_to_exist_processed_netflix_best_movie_ETL_CREATE_DATE"], "alias": "dbt_expectations_expect_column_2e84236b295da980dd09c9c7b0d4a666", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2e84236b295da980dd09c9c7b0d4a666", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2e84236b295da980dd09c9c7b0d4a666"}, "created_at": 1695341478.6459, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2e84236b295da980dd09c9c7b0d4a666\") }}", "language": "sql", "refs": [["processed_netflix_best_movie"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_netflix_best_movie"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.processed_netflix_best_movie"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_by_year_ETL_CREATE_DATE__Day__1000.d17868dafd": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('processed_netflix_best_movie_by_year')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_by_year_ETL_CREATE_DATE__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_cc4a8c86e082ebb61a5b5c916b75e58f.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_by_year_ETL_CREATE_DATE__Day__1000.d17868dafd", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_by_year_ETL_CREATE_DATE__Day__1000"], "alias": "dbt_expectations_expect_row_va_cc4a8c86e082ebb61a5b5c916b75e58f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cc4a8c86e082ebb61a5b5c916b75e58f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cc4a8c86e082ebb61a5b5c916b75e58f"}, "created_at": 1695341478.6542182, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cc4a8c86e082ebb61a5b5c916b75e58f\") }}", "language": "sql", "refs": [["processed_netflix_best_movie_by_year"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_netflix_best_movie_by_year"]}, "compiled_path": null, "column_name": "ETL_CREATE_DATE", "file_key_name": "models.processed_netflix_best_movie_by_year"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_ETL_CREATE_DATE__Day__1000.7723ec0182": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('processed_netflix_best_show')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_ETL_CREATE_DATE__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_5b94256b3eb1a3addc8fb553d4ab5642.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_ETL_CREATE_DATE__Day__1000.7723ec0182", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_ETL_CREATE_DATE__Day__1000"], "alias": "dbt_expectations_expect_row_va_5b94256b3eb1a3addc8fb553d4ab5642", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_5b94256b3eb1a3addc8fb553d4ab5642", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_5b94256b3eb1a3addc8fb553d4ab5642"}, "created_at": 1695341478.6601775, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_5b94256b3eb1a3addc8fb553d4ab5642\") }}", "language": "sql", "refs": [["processed_netflix_best_show"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_netflix_best_show"]}, "compiled_path": null, "column_name": "ETL_CREATE_DATE", "file_key_name": "models.processed_netflix_best_show"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_by_year_ETL_CREATE_DATE__Day__1000.35adf63971": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('processed_netflix_best_show_by_year')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_by_year_ETL_CREATE_DATE__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_dba0b2e5798f0ef3829ad1f2c1f59996.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_by_year_ETL_CREATE_DATE__Day__1000.35adf63971", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_by_year_ETL_CREATE_DATE__Day__1000"], "alias": "dbt_expectations_expect_row_va_dba0b2e5798f0ef3829ad1f2c1f59996", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_dba0b2e5798f0ef3829ad1f2c1f59996", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_dba0b2e5798f0ef3829ad1f2c1f59996"}, "created_at": 1695341478.6660962, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_dba0b2e5798f0ef3829ad1f2c1f59996\") }}", "language": "sql", "refs": [["processed_netflix_best_show_by_year"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_netflix_best_show_by_year"]}, "compiled_path": null, "column_name": "ETL_CREATE_DATE", "file_key_name": "models.processed_netflix_best_show_by_year"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_credits_ETL_CREATE_DATE__Day__1000.d11d6cdc93": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('processed_netflix_credits')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_credits_ETL_CREATE_DATE__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_0d81e35b01735e76905d8109bba56e60.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_credits_ETL_CREATE_DATE__Day__1000.d11d6cdc93", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_credits_ETL_CREATE_DATE__Day__1000"], "alias": "dbt_expectations_expect_row_va_0d81e35b01735e76905d8109bba56e60", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0d81e35b01735e76905d8109bba56e60", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_0d81e35b01735e76905d8109bba56e60"}, "created_at": 1695341478.6720479, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0d81e35b01735e76905d8109bba56e60\") }}", "language": "sql", "refs": [["processed_netflix_credits"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_netflix_credits"]}, "compiled_path": null, "column_name": "ETL_CREATE_DATE", "file_key_name": "models.processed_netflix_credits"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_movie_ETL_CREATE_DATE__Day__1000.464c2d3dc8": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('processed_netflix_dataset_movie')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_movie_ETL_CREATE_DATE__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_101b4a6aa59ca37c43324a1d37e7140e.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_movie_ETL_CREATE_DATE__Day__1000.464c2d3dc8", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_movie_ETL_CREATE_DATE__Day__1000"], "alias": "dbt_expectations_expect_row_va_101b4a6aa59ca37c43324a1d37e7140e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_101b4a6aa59ca37c43324a1d37e7140e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_101b4a6aa59ca37c43324a1d37e7140e"}, "created_at": 1695341478.6779315, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_101b4a6aa59ca37c43324a1d37e7140e\") }}", "language": "sql", "refs": [["processed_netflix_dataset_movie"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_netflix_dataset_movie"]}, "compiled_path": null, "column_name": "ETL_CREATE_DATE", "file_key_name": "models.processed_netflix_dataset_movie"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_rating_ETL_CREATE_DATE__Day__1000.41ca4c4576": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('processed_netflix_dataset_rating')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_rating_ETL_CREATE_DATE__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_d781a341fcb57f09cf2b0a1ab01efb90.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_rating_ETL_CREATE_DATE__Day__1000.41ca4c4576", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_rating_ETL_CREATE_DATE__Day__1000"], "alias": "dbt_expectations_expect_row_va_d781a341fcb57f09cf2b0a1ab01efb90", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d781a341fcb57f09cf2b0a1ab01efb90", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_d781a341fcb57f09cf2b0a1ab01efb90"}, "created_at": 1695341478.6838348, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d781a341fcb57f09cf2b0a1ab01efb90\") }}", "language": "sql", "refs": [["processed_netflix_dataset_rating"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_netflix_dataset_rating"]}, "compiled_path": null, "column_name": "ETL_CREATE_DATE", "file_key_name": "models.processed_netflix_dataset_rating"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_originals_ETL_CREATE_DATE__Day__1000.ac411acdc5": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('processed_netflix_originals')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_originals_ETL_CREATE_DATE__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_990651d1d74083211e3f1b55c188f548.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_originals_ETL_CREATE_DATE__Day__1000.ac411acdc5", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_originals_ETL_CREATE_DATE__Day__1000"], "alias": "dbt_expectations_expect_row_va_990651d1d74083211e3f1b55c188f548", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_990651d1d74083211e3f1b55c188f548", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_990651d1d74083211e3f1b55c188f548"}, "created_at": 1695341478.6906428, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_990651d1d74083211e3f1b55c188f548\") }}", "language": "sql", "refs": [["processed_netflix_originals"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_netflix_originals"]}, "compiled_path": null, "column_name": "ETL_CREATE_DATE", "file_key_name": "models.processed_netflix_originals"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_titles_ETL_CREATE_DATE__Day__1000.ffccfa3162": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('processed_netflix_titles')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_titles_ETL_CREATE_DATE__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_f0d91f4a13bcae894b915685633306a3.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_titles_ETL_CREATE_DATE__Day__1000.ffccfa3162", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_titles_ETL_CREATE_DATE__Day__1000"], "alias": "dbt_expectations_expect_row_va_f0d91f4a13bcae894b915685633306a3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f0d91f4a13bcae894b915685633306a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_f0d91f4a13bcae894b915685633306a3"}, "created_at": 1695341478.6964893, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f0d91f4a13bcae894b915685633306a3\") }}", "language": "sql", "refs": [["processed_netflix_titles"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_netflix_titles"]}, "compiled_path": null, "column_name": "ETL_CREATE_DATE", "file_key_name": "models.processed_netflix_titles"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_airline_info_LOAD_DATE_TIMESTAMP__Day__1000.fbd94a9637": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(ref('processed_airline_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_airline_info_LOAD_DATE_TIMESTAMP__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_d847f0ad53a7cf53d2f9c4a405a1277f.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_airline_info_LOAD_DATE_TIMESTAMP__Day__1000.fbd94a9637", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_airline_info_LOAD_DATE_TIMESTAMP__Day__1000"], "alias": "dbt_expectations_expect_row_va_d847f0ad53a7cf53d2f9c4a405a1277f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d847f0ad53a7cf53d2f9c4a405a1277f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_d847f0ad53a7cf53d2f9c4a405a1277f"}, "created_at": 1695341478.7025049, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d847f0ad53a7cf53d2f9c4a405a1277f\") }}", "language": "sql", "refs": [["processed_airline_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_airline_info"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "models.processed_airline_info"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_airport_info_LOAD_DATE_TIMESTAMP__Day__1000.4c006f08c0": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 1000, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(ref('processed_airport_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_airport_info_LOAD_DATE_TIMESTAMP__Day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_3cd964ee8b74c46822561fb539f6ab9f.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_airport_info_LOAD_DATE_TIMESTAMP__Day__1000.4c006f08c0", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_airport_info_LOAD_DATE_TIMESTAMP__Day__1000"], "alias": "dbt_expectations_expect_row_va_3cd964ee8b74c46822561fb539f6ab9f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_3cd964ee8b74c46822561fb539f6ab9f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_3cd964ee8b74c46822561fb539f6ab9f"}, "created_at": 1695341478.7084968, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_3cd964ee8b74c46822561fb539f6ab9f\") }}", "language": "sql", "refs": [["processed_airport_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_airport_info"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "models.processed_airport_info"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_flight_info_LOAD_DATE_TIMESTAMP__day__1000.7c22666d07": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1000, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(ref('processed_flight_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_processed_flight_info_LOAD_DATE_TIMESTAMP__day__1000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_0d9ed8d69854754f55873de1984a1bd8.sql", "original_file_path": "models/bronze/processed/processed_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_flight_info_LOAD_DATE_TIMESTAMP__day__1000.7c22666d07", "fqn": ["dbt_gx_demo", "bronze", "processed", "dbt_expectations_expect_row_values_to_have_recent_data_processed_flight_info_LOAD_DATE_TIMESTAMP__day__1000"], "alias": "dbt_expectations_expect_row_va_0d9ed8d69854754f55873de1984a1bd8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0d9ed8d69854754f55873de1984a1bd8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_0d9ed8d69854754f55873de1984a1bd8"}, "created_at": 1695341478.714439, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0d9ed8d69854754f55873de1984a1bd8\") }}", "language": "sql", "refs": [["processed_flight_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.processed_flight_info"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "models.processed_flight_info"}, "test.dbt_gx_demo.not_null_stg_customer_info_C_CUSTOMER_SK.31f6d35e10": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "C_CUSTOMER_SK", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_stg_customer_info_C_CUSTOMER_SK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_stg_customer_info_C_CUSTOMER_SK.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.not_null_stg_customer_info_C_CUSTOMER_SK.31f6d35e10", "fqn": ["dbt_gx_demo", "bronze", "staging", "not_null_stg_customer_info_C_CUSTOMER_SK"], "alias": "not_null_stg_customer_info_C_CUSTOMER_SK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341478.9100661, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_CUSTOMER_SK", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_SK__number.49440b7b40": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "C_CUSTOMER_SK", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_SK__number", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_02a3c836a7c0e59ef79704491e87993e.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_SK__number.49440b7b40", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_SK__number"], "alias": "dbt_expectations_expect_column_02a3c836a7c0e59ef79704491e87993e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_02a3c836a7c0e59ef79704491e87993e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_02a3c836a7c0e59ef79704491e87993e"}, "created_at": 1695341478.9120395, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_02a3c836a7c0e59ef79704491e87993e\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_CUSTOMER_SK", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.not_null_stg_customer_info_C_CUSTOMER_ID.0bb8cad22a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "C_CUSTOMER_ID", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_stg_customer_info_C_CUSTOMER_ID", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_stg_customer_info_C_CUSTOMER_ID.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.not_null_stg_customer_info_C_CUSTOMER_ID.0bb8cad22a", "fqn": ["dbt_gx_demo", "bronze", "staging", "not_null_stg_customer_info_C_CUSTOMER_ID"], "alias": "not_null_stg_customer_info_C_CUSTOMER_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341478.922285, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_CUSTOMER_ID", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_ID__varchar.6f28245cfc": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "C_CUSTOMER_ID", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_ID__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_3bdeb90d2d18c58dda30366c926f1911.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_ID__varchar.6f28245cfc", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_ID__varchar"], "alias": "dbt_expectations_expect_column_3bdeb90d2d18c58dda30366c926f1911", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3bdeb90d2d18c58dda30366c926f1911", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3bdeb90d2d18c58dda30366c926f1911"}, "created_at": 1695341478.9240937, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3bdeb90d2d18c58dda30366c926f1911\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_CUSTOMER_ID", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.accepted_values_stg_customer_info_C_SALUTATION__Dr___Mrs___Sir__Miss__Ms___Mr_.f5fe5d765b": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Dr.", "Mrs.", "Sir", "Miss", "Ms.", "Mr."], "column_name": "C_SALUTATION", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "accepted_values_stg_customer_info_C_SALUTATION__Dr___Mrs___Sir__Miss__Ms___Mr_", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "accepted_values_stg_customer_i_544572e9e0c08a086498bd32c6e2d7f4.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.accepted_values_stg_customer_info_C_SALUTATION__Dr___Mrs___Sir__Miss__Ms___Mr_.f5fe5d765b", "fqn": ["dbt_gx_demo", "bronze", "staging", "accepted_values_stg_customer_info_C_SALUTATION__Dr___Mrs___Sir__Miss__Ms___Mr_"], "alias": "accepted_values_stg_customer_i_544572e9e0c08a086498bd32c6e2d7f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_customer_i_544572e9e0c08a086498bd32c6e2d7f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "C_SALUTATION is not null", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"where": "C_SALUTATION is not null", "alias": "accepted_values_stg_customer_i_544572e9e0c08a086498bd32c6e2d7f4"}, "created_at": 1695341478.9292834, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(where=\"C_SALUTATION is not null\",alias=\"accepted_values_stg_customer_i_544572e9e0c08a086498bd32c6e2d7f4\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_SALUTATION", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_SALUTATION__varchar.36ab62d139": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "C_SALUTATION", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_SALUTATION__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_8c80156b08bc0995b6b455f64ba86827.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_SALUTATION__varchar.36ab62d139", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_SALUTATION__varchar"], "alias": "dbt_expectations_expect_column_8c80156b08bc0995b6b455f64ba86827", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8c80156b08bc0995b6b455f64ba86827", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8c80156b08bc0995b6b455f64ba86827"}, "created_at": 1695341478.9416976, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8c80156b08bc0995b6b455f64ba86827\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_SALUTATION", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_FIRST_NAME__varchar.1e2d371be4": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "C_FIRST_NAME", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_FIRST_NAME__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_1b54664ae81bfb8acb84be6e949920ef.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_FIRST_NAME__varchar.1e2d371be4", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_FIRST_NAME__varchar"], "alias": "dbt_expectations_expect_column_1b54664ae81bfb8acb84be6e949920ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1b54664ae81bfb8acb84be6e949920ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1b54664ae81bfb8acb84be6e949920ef"}, "created_at": 1695341478.946739, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1b54664ae81bfb8acb84be6e949920ef\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_FIRST_NAME", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LAST_NAME__varchar.e6699594fc": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "C_LAST_NAME", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LAST_NAME__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_2a852ff11e6e004b197840aa6376963d.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LAST_NAME__varchar.e6699594fc", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LAST_NAME__varchar"], "alias": "dbt_expectations_expect_column_2a852ff11e6e004b197840aa6376963d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2a852ff11e6e004b197840aa6376963d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2a852ff11e6e004b197840aa6376963d"}, "created_at": 1695341478.9515245, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2a852ff11e6e004b197840aa6376963d\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_LAST_NAME", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_DAY__number.1b448c94c9": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "C_BIRTH_DAY", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_DAY__number", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_41ccfbe412890120660e1d7068f65215.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_DAY__number.1b448c94c9", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_DAY__number"], "alias": "dbt_expectations_expect_column_41ccfbe412890120660e1d7068f65215", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_41ccfbe412890120660e1d7068f65215", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_41ccfbe412890120660e1d7068f65215"}, "created_at": 1695341478.9560835, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_41ccfbe412890120660e1d7068f65215\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_BIRTH_DAY", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_YEAR__number.828757e1a4": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "C_BIRTH_YEAR", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_YEAR__number", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_8c8634328f92d39e51112d8434722b6f.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_YEAR__number.828757e1a4", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_YEAR__number"], "alias": "dbt_expectations_expect_column_8c8634328f92d39e51112d8434722b6f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8c8634328f92d39e51112d8434722b6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8c8634328f92d39e51112d8434722b6f"}, "created_at": 1695341478.9611218, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8c8634328f92d39e51112d8434722b6f\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_BIRTH_YEAR", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_EMAIL_ADDRESS__varchar.1aa45c55e7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "C_EMAIL_ADDRESS", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_EMAIL_ADDRESS__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_9fa5547d61dd72a1a66bdeec774c304a.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_EMAIL_ADDRESS__varchar.1aa45c55e7", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_EMAIL_ADDRESS__varchar"], "alias": "dbt_expectations_expect_column_9fa5547d61dd72a1a66bdeec774c304a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9fa5547d61dd72a1a66bdeec774c304a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9fa5547d61dd72a1a66bdeec774c304a"}, "created_at": 1695341478.965827, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9fa5547d61dd72a1a66bdeec774c304a\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_EMAIL_ADDRESS", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LOGIN__varchar.a3e38b2f93": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "C_LOGIN", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LOGIN__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_a94363cf47afe241c9a2c199e0c0fb17.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LOGIN__varchar.a3e38b2f93", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LOGIN__varchar"], "alias": "dbt_expectations_expect_column_a94363cf47afe241c9a2c199e0c0fb17", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a94363cf47afe241c9a2c199e0c0fb17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a94363cf47afe241c9a2c199e0c0fb17"}, "created_at": 1695341478.9702969, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a94363cf47afe241c9a2c199e0c0fb17\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "C_LOGIN", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ADDRESS_ID__varchar.28ad6784ea": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CA_ADDRESS_ID", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ADDRESS_ID__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_04231e583ddd196e6139731c6e3aaf23.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ADDRESS_ID__varchar.28ad6784ea", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ADDRESS_ID__varchar"], "alias": "dbt_expectations_expect_column_04231e583ddd196e6139731c6e3aaf23", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_04231e583ddd196e6139731c6e3aaf23", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_04231e583ddd196e6139731c6e3aaf23"}, "created_at": 1695341478.9749703, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_04231e583ddd196e6139731c6e3aaf23\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_ADDRESS_ID", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_NUMBER__varchar.aaa7bb813f": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CA_STREET_NUMBER", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_NUMBER__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_ae1ed223cdfbadcfe61eba4dc91187b7.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_NUMBER__varchar.aaa7bb813f", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_NUMBER__varchar"], "alias": "dbt_expectations_expect_column_ae1ed223cdfbadcfe61eba4dc91187b7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ae1ed223cdfbadcfe61eba4dc91187b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ae1ed223cdfbadcfe61eba4dc91187b7"}, "created_at": 1695341478.9796917, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ae1ed223cdfbadcfe61eba4dc91187b7\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_STREET_NUMBER", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_TYPE__varchar.0f6b1230b3": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CA_STREET_TYPE", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_TYPE__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_c572c5815ac94937db568ffc7ae87863.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_TYPE__varchar.0f6b1230b3", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_TYPE__varchar"], "alias": "dbt_expectations_expect_column_c572c5815ac94937db568ffc7ae87863", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c572c5815ac94937db568ffc7ae87863", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c572c5815ac94937db568ffc7ae87863"}, "created_at": 1695341478.9841702, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c572c5815ac94937db568ffc7ae87863\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_STREET_TYPE", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_SUITE_NUMBER__varchar.50dcf81140": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CA_SUITE_NUMBER", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_SUITE_NUMBER__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_ac642caafa3fb86195ed6df691206ab5.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_SUITE_NUMBER__varchar.50dcf81140", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_SUITE_NUMBER__varchar"], "alias": "dbt_expectations_expect_column_ac642caafa3fb86195ed6df691206ab5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ac642caafa3fb86195ed6df691206ab5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ac642caafa3fb86195ed6df691206ab5"}, "created_at": 1695341478.9888356, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ac642caafa3fb86195ed6df691206ab5\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_SUITE_NUMBER", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_CITY__varchar.cf0d5b183f": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CA_CITY", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_CITY__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_20af865bc73263ae6157147b264660e2.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_CITY__varchar.cf0d5b183f", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_CITY__varchar"], "alias": "dbt_expectations_expect_column_20af865bc73263ae6157147b264660e2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_20af865bc73263ae6157147b264660e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_20af865bc73263ae6157147b264660e2"}, "created_at": 1695341478.9935107, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_20af865bc73263ae6157147b264660e2\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_CITY", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTY__varchar.93c3ddd700": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CA_COUNTY", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTY__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_c844657f1e336dd1c101b6d512b6b1c7.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTY__varchar.93c3ddd700", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTY__varchar"], "alias": "dbt_expectations_expect_column_c844657f1e336dd1c101b6d512b6b1c7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c844657f1e336dd1c101b6d512b6b1c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c844657f1e336dd1c101b6d512b6b1c7"}, "created_at": 1695341478.9979627, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c844657f1e336dd1c101b6d512b6b1c7\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_COUNTY", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STATE__varchar.32cc390077": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CA_STATE", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STATE__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_7e123b23b9680e567692be44446616e8.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STATE__varchar.32cc390077", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STATE__varchar"], "alias": "dbt_expectations_expect_column_7e123b23b9680e567692be44446616e8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7e123b23b9680e567692be44446616e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7e123b23b9680e567692be44446616e8"}, "created_at": 1695341479.0026681, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7e123b23b9680e567692be44446616e8\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_STATE", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ZIP__varchar.3a541943e4": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CA_ZIP", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ZIP__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_b47cd2f3b2d248fe0aff95e92d6de10b.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ZIP__varchar.3a541943e4", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ZIP__varchar"], "alias": "dbt_expectations_expect_column_b47cd2f3b2d248fe0aff95e92d6de10b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b47cd2f3b2d248fe0aff95e92d6de10b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b47cd2f3b2d248fe0aff95e92d6de10b"}, "created_at": 1695341479.0073357, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b47cd2f3b2d248fe0aff95e92d6de10b\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_ZIP", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTRY__varchar.981b2b63d3": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CA_COUNTRY", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTRY__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_8d44d78b201a262aceba0d22416921ed.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTRY__varchar.981b2b63d3", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTRY__varchar"], "alias": "dbt_expectations_expect_column_8d44d78b201a262aceba0d22416921ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d44d78b201a262aceba0d22416921ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8d44d78b201a262aceba0d22416921ed"}, "created_at": 1695341479.0118423, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d44d78b201a262aceba0d22416921ed\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_COUNTRY", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_GMT_OFFSET__number.bf8bafe9f6": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "CA_GMT_OFFSET", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_GMT_OFFSET__number", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_1acfc4a70fcdd904c04f4dd342e61424.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_GMT_OFFSET__number.bf8bafe9f6", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_GMT_OFFSET__number"], "alias": "dbt_expectations_expect_column_1acfc4a70fcdd904c04f4dd342e61424", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1acfc4a70fcdd904c04f4dd342e61424", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1acfc4a70fcdd904c04f4dd342e61424"}, "created_at": 1695341479.016651, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1acfc4a70fcdd904c04f4dd342e61424\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_GMT_OFFSET", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_LOCATION_TYPE__varchar.90702ffa32": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CA_LOCATION_TYPE", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_LOCATION_TYPE__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_da3ee362423a77222763d7095f7e3621.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_LOCATION_TYPE__varchar.90702ffa32", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_LOCATION_TYPE__varchar"], "alias": "dbt_expectations_expect_column_da3ee362423a77222763d7095f7e3621", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_da3ee362423a77222763d7095f7e3621", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_da3ee362423a77222763d7095f7e3621"}, "created_at": 1695341479.0214458, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_da3ee362423a77222763d7095f7e3621\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CA_LOCATION_TYPE", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_GENDER__varchar.6273cc4354": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CD_GENDER", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_GENDER__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_c3d20a1ea1f223f13b2b4cf10f0ac765.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_GENDER__varchar.6273cc4354", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_GENDER__varchar"], "alias": "dbt_expectations_expect_column_c3d20a1ea1f223f13b2b4cf10f0ac765", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c3d20a1ea1f223f13b2b4cf10f0ac765", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c3d20a1ea1f223f13b2b4cf10f0ac765"}, "created_at": 1695341479.0259695, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c3d20a1ea1f223f13b2b4cf10f0ac765\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CD_GENDER", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.not_null_stg_customer_info_CD_MARITAL_STATUS.963dbbc827": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CD_MARITAL_STATUS", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_stg_customer_info_CD_MARITAL_STATUS", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_stg_customer_info_CD_MARITAL_STATUS.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.not_null_stg_customer_info_CD_MARITAL_STATUS.963dbbc827", "fqn": ["dbt_gx_demo", "bronze", "staging", "not_null_stg_customer_info_CD_MARITAL_STATUS"], "alias": "not_null_stg_customer_info_CD_MARITAL_STATUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.0306728, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CD_MARITAL_STATUS", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.accepted_values_stg_customer_info_CD_MARITAL_STATUS__S__D__W__U__M.dbaae4f8dd": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["S", "D", "W", "U", "M"], "column_name": "CD_MARITAL_STATUS", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "accepted_values_stg_customer_info_CD_MARITAL_STATUS__S__D__W__U__M", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "accepted_values_stg_customer_i_f968db32cbac891319d5e79cce144502.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.accepted_values_stg_customer_info_CD_MARITAL_STATUS__S__D__W__U__M.dbaae4f8dd", "fqn": ["dbt_gx_demo", "bronze", "staging", "accepted_values_stg_customer_info_CD_MARITAL_STATUS__S__D__W__U__M"], "alias": "accepted_values_stg_customer_i_f968db32cbac891319d5e79cce144502", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_customer_i_f968db32cbac891319d5e79cce144502", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_customer_i_f968db32cbac891319d5e79cce144502"}, "created_at": 1695341479.0324655, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_customer_i_f968db32cbac891319d5e79cce144502\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CD_MARITAL_STATUS", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_MARITAL_STATUS__varchar.cf56ac23ad": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CD_MARITAL_STATUS", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_MARITAL_STATUS__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_aaf10b6c86a5e639c6f367461f2e093f.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_MARITAL_STATUS__varchar.cf56ac23ad", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_MARITAL_STATUS__varchar"], "alias": "dbt_expectations_expect_column_aaf10b6c86a5e639c6f367461f2e093f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aaf10b6c86a5e639c6f367461f2e093f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_aaf10b6c86a5e639c6f367461f2e093f"}, "created_at": 1695341479.0386105, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aaf10b6c86a5e639c6f367461f2e093f\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CD_MARITAL_STATUS", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_EDUCATION_STATUS__varchar.9576a02d5e": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CD_EDUCATION_STATUS", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_EDUCATION_STATUS__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_67ef42c086604b8b10df253c16c5c68d.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_EDUCATION_STATUS__varchar.9576a02d5e", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_EDUCATION_STATUS__varchar"], "alias": "dbt_expectations_expect_column_67ef42c086604b8b10df253c16c5c68d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_67ef42c086604b8b10df253c16c5c68d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_67ef42c086604b8b10df253c16c5c68d"}, "created_at": 1695341479.0438886, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_67ef42c086604b8b10df253c16c5c68d\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CD_EDUCATION_STATUS", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_PURCHASE_ESTIMATE__number.fc040e3eec": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "CD_PURCHASE_ESTIMATE", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_PURCHASE_ESTIMATE__number", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_2abf808060fad14a76c73d7ef39acc1b.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_PURCHASE_ESTIMATE__number.fc040e3eec", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_PURCHASE_ESTIMATE__number"], "alias": "dbt_expectations_expect_column_2abf808060fad14a76c73d7ef39acc1b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2abf808060fad14a76c73d7ef39acc1b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2abf808060fad14a76c73d7ef39acc1b"}, "created_at": 1695341479.0486357, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2abf808060fad14a76c73d7ef39acc1b\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CD_PURCHASE_ESTIMATE", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_CREDIT_RATING__varchar.d147a744cd": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "CD_CREDIT_RATING", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_CREDIT_RATING__varchar", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_7b541c6263d5d11a6345e86fa83529e2.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_CREDIT_RATING__varchar.d147a744cd", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_CREDIT_RATING__varchar"], "alias": "dbt_expectations_expect_column_7b541c6263d5d11a6345e86fa83529e2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7b541c6263d5d11a6345e86fa83529e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7b541c6263d5d11a6345e86fa83529e2"}, "created_at": 1695341479.0530572, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7b541c6263d5d11a6345e86fa83529e2\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CD_CREDIT_RATING", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_DEP_COUNT__number.a360689910": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "CD_DEP_COUNT", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_DEP_COUNT__number", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_5d643752606c97b95817825bf3ae368e.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_DEP_COUNT__number.a360689910", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_DEP_COUNT__number"], "alias": "dbt_expectations_expect_column_5d643752606c97b95817825bf3ae368e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5d643752606c97b95817825bf3ae368e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5d643752606c97b95817825bf3ae368e"}, "created_at": 1695341479.0577073, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5d643752606c97b95817825bf3ae368e\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "CD_DEP_COUNT", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_stg_customer_info_LOAD_DATE_TIMESTAMP__day__100.3ff4929afc": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 100, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_row_values_to_have_recent_data_stg_customer_info_LOAD_DATE_TIMESTAMP__day__100", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_row_va_a0220cb535f4b5be01bfc463b43f7aef.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_stg_customer_info_LOAD_DATE_TIMESTAMP__day__100.3ff4929afc", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_row_values_to_have_recent_data_stg_customer_info_LOAD_DATE_TIMESTAMP__day__100"], "alias": "dbt_expectations_expect_row_va_a0220cb535f4b5be01bfc463b43f7aef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a0220cb535f4b5be01bfc463b43f7aef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_a0220cb535f4b5be01bfc463b43f7aef"}, "created_at": 1695341479.0624056, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a0220cb535f4b5be01bfc463b43f7aef\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_LOAD_DATE_TIMESTAMP__timestamp_ltz.de1153a3d0": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "timestamp_ltz", "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_LOAD_DATE_TIMESTAMP__timestamp_ltz", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_dab17ba9bc0c258c97761866b6c41328.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_LOAD_DATE_TIMESTAMP__timestamp_ltz.de1153a3d0", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_LOAD_DATE_TIMESTAMP__timestamp_ltz"], "alias": "dbt_expectations_expect_column_dab17ba9bc0c258c97761866b6c41328", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dab17ba9bc0c258c97761866b6c41328", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_dab17ba9bc0c258c97761866b6c41328"}, "created_at": 1695341479.0683963, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dab17ba9bc0c258c97761866b6c41328\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_compound_columns_to_be_unique_stg_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID.818257fc11": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["C_CUSTOMER_SK", "C_CUSTOMER_ID"], "model": "{{ get_where_subquery(ref('stg_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_stg_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_compou_799616fcb4be02c369c91e6774877196.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_compound_columns_to_be_unique_stg_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID.818257fc11", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_compound_columns_to_be_unique_stg_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID"], "alias": "dbt_expectations_expect_compou_799616fcb4be02c369c91e6774877196", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_799616fcb4be02c369c91e6774877196", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_799616fcb4be02c369c91e6774877196"}, "created_at": 1695341479.0728996, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_799616fcb4be02c369c91e6774877196\") }}", "language": "sql", "refs": [["stg_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_customer_info"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_table_column_count_to_be_between_stg_orders_40__1.758b6f9a19": {"test_metadata": {"name": "expect_table_column_count_to_be_between", "kwargs": {"min_value": 1, "max_value": 40, "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_table_column_count_to_be_between_stg_orders_40__1", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_table__a1117b200603dd103b56e74a4436f579.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_table_column_count_to_be_between_stg_orders_40__1.758b6f9a19", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_table_column_count_to_be_between_stg_orders_40__1"], "alias": "dbt_expectations_expect_table__a1117b200603dd103b56e74a4436f579", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__a1117b200603dd103b56e74a4436f579", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__a1117b200603dd103b56e74a4436f579"}, "created_at": 1695341479.0782065, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_table_column_count_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__a1117b200603dd103b56e74a4436f579\") }}", "language": "sql", "refs": [["stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_orders"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_orders"}, "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_stg_orders_ORDERKEY__LINENUMBER.47459b381c": {"test_metadata": {"name": "expect_table_columns_to_contain_set", "kwargs": {"column_list": ["ORDERKEY", "LINENUMBER"], "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_table_columns_to_contain_set_stg_orders_ORDERKEY__LINENUMBER", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_table__33f79a6f578c65bbcde08fc79a0000d0.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_stg_orders_ORDERKEY__LINENUMBER.47459b381c", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_table_columns_to_contain_set_stg_orders_ORDERKEY__LINENUMBER"], "alias": "dbt_expectations_expect_table__33f79a6f578c65bbcde08fc79a0000d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__33f79a6f578c65bbcde08fc79a0000d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__33f79a6f578c65bbcde08fc79a0000d0"}, "created_at": 1695341479.0824735, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_table_columns_to_contain_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__33f79a6f578c65bbcde08fc79a0000d0\") }}", "language": "sql", "refs": [["stg_orders"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_orders"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_orders"}, "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_stg_transactions_ORDER_ID__CUSTOMER_ID.0e7eb63c1d": {"test_metadata": {"name": "expect_table_columns_to_contain_set", "kwargs": {"column_list": ["ORDER_ID", "CUSTOMER_ID"], "model": "{{ get_where_subquery(ref('stg_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_table_columns_to_contain_set_stg_transactions_ORDER_ID__CUSTOMER_ID", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_table__67717769af3abad233abd0b74ff75302.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_stg_transactions_ORDER_ID__CUSTOMER_ID.0e7eb63c1d", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_table_columns_to_contain_set_stg_transactions_ORDER_ID__CUSTOMER_ID"], "alias": "dbt_expectations_expect_table__67717769af3abad233abd0b74ff75302", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__67717769af3abad233abd0b74ff75302", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__67717769af3abad233abd0b74ff75302"}, "created_at": 1695341479.0872993, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_table_columns_to_contain_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__67717769af3abad233abd0b74ff75302\") }}", "language": "sql", "refs": [["stg_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_transactions"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_transactions"}, "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_match_set_stg_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP.29cc7c5733": {"test_metadata": {"name": "expect_table_columns_to_match_set", "kwargs": {"column_list": ["ORDER_ID", "CUSTOMER_ID", "ORDER_DATE", "TRANSACTION_DATE", "TRANSACTION_NUMBER", "AMOUNT", "TYPE", "LOAD_DATE_TIMESTAMP"], "model": "{{ get_where_subquery(ref('stg_transactions')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_table_columns_to_match_set_stg_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_table__3e1f3c3215735a3356795d5dde59bad0.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_match_set_stg_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP.29cc7c5733", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_table_columns_to_match_set_stg_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP"], "alias": "dbt_expectations_expect_table__3e1f3c3215735a3356795d5dde59bad0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_table__3e1f3c3215735a3356795d5dde59bad0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_table__3e1f3c3215735a3356795d5dde59bad0"}, "created_at": 1695341479.0924065, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_table_columns_to_match_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_table__3e1f3c3215735a3356795d5dde59bad0\") }}", "language": "sql", "refs": [["stg_transactions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_transactions"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_transactions"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_stg_netflix_best_movie_ETL_CREATE_DATE.e52577701a": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ETL_CREATE_DATE", "model": "{{ get_where_subquery(ref('stg_netflix_best_movie')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_stg_netflix_best_movie_ETL_CREATE_DATE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_05238ef47880825b5d9cab4589f80aa6.sql", "original_file_path": "models/bronze/staging/stage_schemal.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_stg_netflix_best_movie_ETL_CREATE_DATE.e52577701a", "fqn": ["dbt_gx_demo", "bronze", "staging", "dbt_expectations_expect_column_to_exist_stg_netflix_best_movie_ETL_CREATE_DATE"], "alias": "dbt_expectations_expect_column_05238ef47880825b5d9cab4589f80aa6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_05238ef47880825b5d9cab4589f80aa6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_05238ef47880825b5d9cab4589f80aa6"}, "created_at": 1695341479.099659, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_05238ef47880825b5d9cab4589f80aa6\") }}", "language": "sql", "refs": [["stg_netflix_best_movie"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.stg_netflix_best_movie"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_netflix_best_movie"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_info_LOAD_DATE.f06bb4117a": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOAD_DATE", "model": "{{ get_where_subquery(ref('hub_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_hub_customer_info_LOAD_DATE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_7977d954aba1af21b781ee50905f0062.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_info_LOAD_DATE.f06bb4117a", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_expectations_expect_column_to_exist_hub_customer_info_LOAD_DATE"], "alias": "dbt_expectations_expect_column_7977d954aba1af21b781ee50905f0062", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7977d954aba1af21b781ee50905f0062", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7977d954aba1af21b781ee50905f0062"}, "created_at": 1695341479.1156096, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7977d954aba1af21b781ee50905f0062\") }}", "language": "sql", "refs": [["hub_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_customer_info"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.hub_customer_info"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_info_RECORD_SOURCE.8f8f4f4943": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECORD_SOURCE", "model": "{{ get_where_subquery(ref('hub_customer_info')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_hub_customer_info_RECORD_SOURCE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_8d37d13f3f7b8ead1c6edb016099f87c.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_info_RECORD_SOURCE.8f8f4f4943", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_expectations_expect_column_to_exist_hub_customer_info_RECORD_SOURCE"], "alias": "dbt_expectations_expect_column_8d37d13f3f7b8ead1c6edb016099f87c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d37d13f3f7b8ead1c6edb016099f87c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8d37d13f3f7b8ead1c6edb016099f87c"}, "created_at": 1695341479.1198921, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d37d13f3f7b8ead1c6edb016099f87c\") }}", "language": "sql", "refs": [["hub_customer_info"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_customer_info"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.hub_customer_info"}, "test.dbt_gx_demo.dbt_constraints_primary_key_hub_customer_CUSTOMER_PK.f4acb921f8": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "CUSTOMER_PK", "model": "{{ get_where_subquery(ref('hub_customer')) }}"}, "namespace": "dbt_constraints"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_hub_customer_CUSTOMER_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_constraints_primary_key_hub_customer_CUSTOMER_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_constraints_primary_key_hub_customer_CUSTOMER_PK.f4acb921f8", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_constraints_primary_key_hub_customer_CUSTOMER_PK"], "alias": "dbt_constraints_primary_key_hub_customer_CUSTOMER_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1239345, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_customer"]}, "compiled_path": null, "column_name": "CUSTOMER_PK", "file_key_name": "models.hub_customer"}, "test.dbt_gx_demo.unique_hub_customer_CUSTOMER_PK.314091a1fe": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "CUSTOMER_PK", "model": "{{ get_where_subquery(ref('hub_customer')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "unique_hub_customer_CUSTOMER_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "unique_hub_customer_CUSTOMER_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.unique_hub_customer_CUSTOMER_PK.314091a1fe", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "unique_hub_customer_CUSTOMER_PK"], "alias": "unique_hub_customer_CUSTOMER_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1374855, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_gx_demo.hub_customer"]}, "compiled_path": null, "column_name": "CUSTOMER_PK", "file_key_name": "models.hub_customer"}, "test.dbt_gx_demo.not_null_hub_customer_CUSTOMER_PK.1d78ce28a2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUSTOMER_PK", "model": "{{ get_where_subquery(ref('hub_customer')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_hub_customer_CUSTOMER_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_hub_customer_CUSTOMER_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.not_null_hub_customer_CUSTOMER_PK.1d78ce28a2", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "not_null_hub_customer_CUSTOMER_PK"], "alias": "not_null_hub_customer_CUSTOMER_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1392462, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.hub_customer"]}, "compiled_path": null, "column_name": "CUSTOMER_PK", "file_key_name": "models.hub_customer"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_LOAD_DATE.818fc77f99": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOAD_DATE", "model": "{{ get_where_subquery(ref('hub_customer')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_hub_customer_LOAD_DATE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_to_exist_hub_customer_LOAD_DATE.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_LOAD_DATE.818fc77f99", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_expectations_expect_column_to_exist_hub_customer_LOAD_DATE"], "alias": "dbt_expectations_expect_column_to_exist_hub_customer_LOAD_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1412585, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_customer"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.hub_customer"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_RECORD_SOURCE.900d0dc7f1": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECORD_SOURCE", "model": "{{ get_where_subquery(ref('hub_customer')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_hub_customer_RECORD_SOURCE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_4a03a665ae3a204898678402f7002ca8.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_RECORD_SOURCE.900d0dc7f1", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_expectations_expect_column_to_exist_hub_customer_RECORD_SOURCE"], "alias": "dbt_expectations_expect_column_4a03a665ae3a204898678402f7002ca8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a03a665ae3a204898678402f7002ca8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4a03a665ae3a204898678402f7002ca8"}, "created_at": 1695341479.1451151, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a03a665ae3a204898678402f7002ca8\") }}", "language": "sql", "refs": [["hub_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_customer"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.hub_customer"}, "test.dbt_gx_demo.dbt_constraints_primary_key_hub_lineitem_LINEITEM_PK.6bde3e4c93": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "LINEITEM_PK", "model": "{{ get_where_subquery(ref('hub_lineitem')) }}"}, "namespace": "dbt_constraints"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_hub_lineitem_LINEITEM_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_constraints_primary_key_hub_lineitem_LINEITEM_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_constraints_primary_key_hub_lineitem_LINEITEM_PK.6bde3e4c93", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_constraints_primary_key_hub_lineitem_LINEITEM_PK"], "alias": "dbt_constraints_primary_key_hub_lineitem_LINEITEM_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1494055, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_lineitem"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_lineitem"]}, "compiled_path": null, "column_name": "LINEITEM_PK", "file_key_name": "models.hub_lineitem"}, "test.dbt_gx_demo.unique_hub_lineitem_LINEITEM_PK.97dc997d71": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "LINEITEM_PK", "model": "{{ get_where_subquery(ref('hub_lineitem')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "unique_hub_lineitem_LINEITEM_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "unique_hub_lineitem_LINEITEM_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.unique_hub_lineitem_LINEITEM_PK.97dc997d71", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "unique_hub_lineitem_LINEITEM_PK"], "alias": "unique_hub_lineitem_LINEITEM_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1534016, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_lineitem"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_gx_demo.hub_lineitem"]}, "compiled_path": null, "column_name": "LINEITEM_PK", "file_key_name": "models.hub_lineitem"}, "test.dbt_gx_demo.not_null_hub_lineitem_LINEITEM_PK.7fbaf72202": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LINEITEM_PK", "model": "{{ get_where_subquery(ref('hub_lineitem')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_hub_lineitem_LINEITEM_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_hub_lineitem_LINEITEM_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.not_null_hub_lineitem_LINEITEM_PK.7fbaf72202", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "not_null_hub_lineitem_LINEITEM_PK"], "alias": "not_null_hub_lineitem_LINEITEM_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1554358, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_lineitem"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.hub_lineitem"]}, "compiled_path": null, "column_name": "LINEITEM_PK", "file_key_name": "models.hub_lineitem"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_lineitem_LOAD_DATE.805bf794b1": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOAD_DATE", "model": "{{ get_where_subquery(ref('hub_lineitem')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_hub_lineitem_LOAD_DATE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_to_exist_hub_lineitem_LOAD_DATE.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_lineitem_LOAD_DATE.805bf794b1", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_expectations_expect_column_to_exist_hub_lineitem_LOAD_DATE"], "alias": "dbt_expectations_expect_column_to_exist_hub_lineitem_LOAD_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.157199, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_lineitem"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_lineitem"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.hub_lineitem"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_lineitem_RECORD_SOURCE.cb12657b7f": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECORD_SOURCE", "model": "{{ get_where_subquery(ref('hub_lineitem')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_hub_lineitem_RECORD_SOURCE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_3423a403570f8d8516ac28559d5bf08d.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_lineitem_RECORD_SOURCE.cb12657b7f", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_expectations_expect_column_to_exist_hub_lineitem_RECORD_SOURCE"], "alias": "dbt_expectations_expect_column_3423a403570f8d8516ac28559d5bf08d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3423a403570f8d8516ac28559d5bf08d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3423a403570f8d8516ac28559d5bf08d"}, "created_at": 1695341479.1609979, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3423a403570f8d8516ac28559d5bf08d\") }}", "language": "sql", "refs": [["hub_lineitem"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_lineitem"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.hub_lineitem"}, "test.dbt_gx_demo.dbt_constraints_primary_key_hub_nation_NATION_PK.67febfdd15": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "NATION_PK", "model": "{{ get_where_subquery(ref('hub_nation')) }}"}, "namespace": "dbt_constraints"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_hub_nation_NATION_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_constraints_primary_key_hub_nation_NATION_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_constraints_primary_key_hub_nation_NATION_PK.67febfdd15", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_constraints_primary_key_hub_nation_NATION_PK"], "alias": "dbt_constraints_primary_key_hub_nation_NATION_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1652894, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_nation"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_nation"]}, "compiled_path": null, "column_name": "NATION_PK", "file_key_name": "models.hub_nation"}, "test.dbt_gx_demo.unique_hub_nation_NATION_PK.cc2fd27451": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "NATION_PK", "model": "{{ get_where_subquery(ref('hub_nation')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "unique_hub_nation_NATION_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "unique_hub_nation_NATION_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.unique_hub_nation_NATION_PK.cc2fd27451", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "unique_hub_nation_NATION_PK"], "alias": "unique_hub_nation_NATION_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1694834, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_nation"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_gx_demo.hub_nation"]}, "compiled_path": null, "column_name": "NATION_PK", "file_key_name": "models.hub_nation"}, "test.dbt_gx_demo.not_null_hub_nation_NATION_PK.8b55844abf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NATION_PK", "model": "{{ get_where_subquery(ref('hub_nation')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_hub_nation_NATION_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_hub_nation_NATION_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.not_null_hub_nation_NATION_PK.8b55844abf", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "not_null_hub_nation_NATION_PK"], "alias": "not_null_hub_nation_NATION_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.171248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_nation"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.hub_nation"]}, "compiled_path": null, "column_name": "NATION_PK", "file_key_name": "models.hub_nation"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_nation_LOAD_DATE.41485c19cc": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOAD_DATE", "model": "{{ get_where_subquery(ref('hub_nation')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_hub_nation_LOAD_DATE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_to_exist_hub_nation_LOAD_DATE.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_nation_LOAD_DATE.41485c19cc", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_expectations_expect_column_to_exist_hub_nation_LOAD_DATE"], "alias": "dbt_expectations_expect_column_to_exist_hub_nation_LOAD_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1730225, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_nation"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_nation"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.hub_nation"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_nation_RECORD_SOURCE.9417c98e3f": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECORD_SOURCE", "model": "{{ get_where_subquery(ref('hub_nation')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_hub_nation_RECORD_SOURCE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_34772ce27aaf1bd4032a36cd63cbe1a7.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_nation_RECORD_SOURCE.9417c98e3f", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_expectations_expect_column_to_exist_hub_nation_RECORD_SOURCE"], "alias": "dbt_expectations_expect_column_34772ce27aaf1bd4032a36cd63cbe1a7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_34772ce27aaf1bd4032a36cd63cbe1a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_34772ce27aaf1bd4032a36cd63cbe1a7"}, "created_at": 1695341479.1770792, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_34772ce27aaf1bd4032a36cd63cbe1a7\") }}", "language": "sql", "refs": [["hub_nation"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_nation"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.hub_nation"}, "test.dbt_gx_demo.dbt_constraints_primary_key_hub_order_ORDER_PK.cdf0c9ca53": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "ORDER_PK", "model": "{{ get_where_subquery(ref('hub_order')) }}"}, "namespace": "dbt_constraints"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_hub_order_ORDER_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_constraints_primary_key_hub_order_ORDER_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_constraints_primary_key_hub_order_ORDER_PK.cdf0c9ca53", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_constraints_primary_key_hub_order_ORDER_PK"], "alias": "dbt_constraints_primary_key_hub_order_ORDER_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1811466, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_order"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_order"]}, "compiled_path": null, "column_name": "ORDER_PK", "file_key_name": "models.hub_order"}, "test.dbt_gx_demo.unique_hub_order_ORDER_PK.dd56da982e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ORDER_PK", "model": "{{ get_where_subquery(ref('hub_order')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "unique_hub_order_ORDER_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "unique_hub_order_ORDER_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.unique_hub_order_ORDER_PK.dd56da982e", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "unique_hub_order_ORDER_PK"], "alias": "unique_hub_order_ORDER_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1853778, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_order"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_gx_demo.hub_order"]}, "compiled_path": null, "column_name": "ORDER_PK", "file_key_name": "models.hub_order"}, "test.dbt_gx_demo.not_null_hub_order_ORDER_PK.d767df4225": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORDER_PK", "model": "{{ get_where_subquery(ref('hub_order')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_hub_order_ORDER_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_hub_order_ORDER_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.not_null_hub_order_ORDER_PK.d767df4225", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "not_null_hub_order_ORDER_PK"], "alias": "not_null_hub_order_ORDER_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1871223, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_order"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.hub_order"]}, "compiled_path": null, "column_name": "ORDER_PK", "file_key_name": "models.hub_order"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_order_LOAD_DATE.8a20a1bf8d": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LOAD_DATE", "model": "{{ get_where_subquery(ref('hub_order')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_hub_order_LOAD_DATE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_to_exist_hub_order_LOAD_DATE.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_order_LOAD_DATE.8a20a1bf8d", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_expectations_expect_column_to_exist_hub_order_LOAD_DATE"], "alias": "dbt_expectations_expect_column_to_exist_hub_order_LOAD_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1888802, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_order"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_order"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.hub_order"}, "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_order_RECORD_SOURCE.20b1a3e20a": {"test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECORD_SOURCE", "model": "{{ get_where_subquery(ref('hub_order')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_expect_column_to_exist_hub_order_RECORD_SOURCE", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_expect_column_to_exist_hub_order_RECORD_SOURCE.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_order_RECORD_SOURCE.20b1a3e20a", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_expectations_expect_column_to_exist_hub_order_RECORD_SOURCE"], "alias": "dbt_expectations_expect_column_to_exist_hub_order_RECORD_SOURCE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1929119, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_order"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_order"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.hub_order"}, "test.dbt_gx_demo.dbt_constraints_primary_key_hub_part_PART_PK.0926df92b7": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "PART_PK", "model": "{{ get_where_subquery(ref('hub_part')) }}"}, "namespace": "dbt_constraints"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_hub_part_PART_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_constraints_primary_key_hub_part_PART_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_constraints_primary_key_hub_part_PART_PK.0926df92b7", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_constraints_primary_key_hub_part_PART_PK"], "alias": "dbt_constraints_primary_key_hub_part_PART_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.1966882, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_part"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_part"]}, "compiled_path": null, "column_name": "PART_PK", "file_key_name": "models.hub_part"}, "test.dbt_gx_demo.unique_hub_part_PART_PK.38f30cc60e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "PART_PK", "model": "{{ get_where_subquery(ref('hub_part')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "unique_hub_part_PART_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "unique_hub_part_PART_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.unique_hub_part_PART_PK.38f30cc60e", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "unique_hub_part_PART_PK"], "alias": "unique_hub_part_PART_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.2009175, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_part"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_gx_demo.hub_part"]}, "compiled_path": null, "column_name": "PART_PK", "file_key_name": "models.hub_part"}, "test.dbt_gx_demo.not_null_hub_part_PART_PK.fd5ead72ff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PART_PK", "model": "{{ get_where_subquery(ref('hub_part')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_hub_part_PART_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_hub_part_PART_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.not_null_hub_part_PART_PK.fd5ead72ff", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "not_null_hub_part_PART_PK"], "alias": "not_null_hub_part_PART_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.2026772, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_part"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.hub_part"]}, "compiled_path": null, "column_name": "PART_PK", "file_key_name": "models.hub_part"}, "test.dbt_gx_demo.dbt_constraints_primary_key_hub_region_REGION_PK.45bbc9debc": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "REGION_PK", "model": "{{ get_where_subquery(ref('hub_region')) }}"}, "namespace": "dbt_constraints"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_hub_region_REGION_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_constraints_primary_key_hub_region_REGION_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_constraints_primary_key_hub_region_REGION_PK.45bbc9debc", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_constraints_primary_key_hub_region_REGION_PK"], "alias": "dbt_constraints_primary_key_hub_region_REGION_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.2044547, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_region"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_region"]}, "compiled_path": null, "column_name": "REGION_PK", "file_key_name": "models.hub_region"}, "test.dbt_gx_demo.unique_hub_region_REGION_PK.1623d63653": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "REGION_PK", "model": "{{ get_where_subquery(ref('hub_region')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "unique_hub_region_REGION_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "unique_hub_region_REGION_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.unique_hub_region_REGION_PK.1623d63653", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "unique_hub_region_REGION_PK"], "alias": "unique_hub_region_REGION_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.2086608, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_region"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_gx_demo.hub_region"]}, "compiled_path": null, "column_name": "REGION_PK", "file_key_name": "models.hub_region"}, "test.dbt_gx_demo.not_null_hub_region_REGION_PK.da7bb5bc68": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "REGION_PK", "model": "{{ get_where_subquery(ref('hub_region')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_hub_region_REGION_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_hub_region_REGION_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.not_null_hub_region_REGION_PK.da7bb5bc68", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "not_null_hub_region_REGION_PK"], "alias": "not_null_hub_region_REGION_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.210394, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_region"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.hub_region"]}, "compiled_path": null, "column_name": "REGION_PK", "file_key_name": "models.hub_region"}, "test.dbt_gx_demo.dbt_constraints_primary_key_hub_supplier_SUPPLIER_PK.464f36f4d8": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "SUPPLIER_PK", "model": "{{ get_where_subquery(ref('hub_supplier')) }}"}, "namespace": "dbt_constraints"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_hub_supplier_SUPPLIER_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_constraints_primary_key_hub_supplier_SUPPLIER_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_constraints_primary_key_hub_supplier_SUPPLIER_PK.464f36f4d8", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_constraints_primary_key_hub_supplier_SUPPLIER_PK"], "alias": "dbt_constraints_primary_key_hub_supplier_SUPPLIER_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.2121694, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_supplier"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.hub_supplier"]}, "compiled_path": null, "column_name": "SUPPLIER_PK", "file_key_name": "models.hub_supplier"}, "test.dbt_gx_demo.unique_hub_supplier_SUPPLIER_PK.9d6f593fff": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "SUPPLIER_PK", "model": "{{ get_where_subquery(ref('hub_supplier')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "unique_hub_supplier_SUPPLIER_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "unique_hub_supplier_SUPPLIER_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.unique_hub_supplier_SUPPLIER_PK.9d6f593fff", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "unique_hub_supplier_SUPPLIER_PK"], "alias": "unique_hub_supplier_SUPPLIER_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.2164013, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_supplier"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_gx_demo.hub_supplier"]}, "compiled_path": null, "column_name": "SUPPLIER_PK", "file_key_name": "models.hub_supplier"}, "test.dbt_gx_demo.not_null_hub_supplier_SUPPLIER_PK.cb6bc2431c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUPPLIER_PK", "model": "{{ get_where_subquery(ref('hub_supplier')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_hub_supplier_SUPPLIER_PK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_hub_supplier_SUPPLIER_PK.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.not_null_hub_supplier_SUPPLIER_PK.cb6bc2431c", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "not_null_hub_supplier_SUPPLIER_PK"], "alias": "not_null_hub_supplier_SUPPLIER_PK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.2181835, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["hub_supplier"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.hub_supplier"]}, "compiled_path": null, "column_name": "SUPPLIER_PK", "file_key_name": "models.hub_supplier"}, "test.dbt_gx_demo.dbt_constraints_primary_key_sat_inv_inventory_details_INVENTORY_HASHDIFF.4b1886b64d": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "INVENTORY_HASHDIFF", "model": "{{ get_where_subquery(ref('sat_inv_inventory_details')) }}"}, "namespace": "dbt_constraints"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_constraints_primary_key_sat_inv_inventory_details_INVENTORY_HASHDIFF", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_constraints_primary_key_sa_5a8f0c7bbfda9b3189729f5c3c082cb6.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_constraints_primary_key_sat_inv_inventory_details_INVENTORY_HASHDIFF.4b1886b64d", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "dbt_constraints_primary_key_sat_inv_inventory_details_INVENTORY_HASHDIFF"], "alias": "dbt_constraints_primary_key_sa_5a8f0c7bbfda9b3189729f5c3c082cb6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_sa_5a8f0c7bbfda9b3189729f5c3c082cb6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_sa_5a8f0c7bbfda9b3189729f5c3c082cb6"}, "created_at": 1695341479.2208195, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_sa_5a8f0c7bbfda9b3189729f5c3c082cb6\") }}", "language": "sql", "refs": [["sat_inv_inventory_details"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_gx_demo.sat_inv_inventory_details"]}, "compiled_path": null, "column_name": "INVENTORY_HASHDIFF", "file_key_name": "models.sat_inv_inventory_details"}, "test.dbt_gx_demo.unique_sat_inv_inventory_details_INVENTORY_HASHDIFF.ca26536e5a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "INVENTORY_HASHDIFF", "model": "{{ get_where_subquery(ref('sat_inv_inventory_details')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "unique_sat_inv_inventory_details_INVENTORY_HASHDIFF", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "unique_sat_inv_inventory_details_INVENTORY_HASHDIFF.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.unique_sat_inv_inventory_details_INVENTORY_HASHDIFF.ca26536e5a", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "unique_sat_inv_inventory_details_INVENTORY_HASHDIFF"], "alias": "unique_sat_inv_inventory_details_INVENTORY_HASHDIFF", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.2250538, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["sat_inv_inventory_details"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_gx_demo.sat_inv_inventory_details"]}, "compiled_path": null, "column_name": "INVENTORY_HASHDIFF", "file_key_name": "models.sat_inv_inventory_details"}, "test.dbt_gx_demo.not_null_sat_inv_inventory_details_INVENTORY_HASHDIFF.a2f6004c48": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "INVENTORY_HASHDIFF", "model": "{{ get_where_subquery(ref('sat_inv_inventory_details')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_sat_inv_inventory_details_INVENTORY_HASHDIFF", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "not_null_sat_inv_inventory_details_INVENTORY_HASHDIFF.sql", "original_file_path": "models/bronze/audit/raw_vault/data_vault_schema.yml", "unique_id": "test.dbt_gx_demo.not_null_sat_inv_inventory_details_INVENTORY_HASHDIFF.a2f6004c48", "fqn": ["dbt_gx_demo", "bronze", "audit", "raw_vault", "not_null_sat_inv_inventory_details_INVENTORY_HASHDIFF"], "alias": "not_null_sat_inv_inventory_details_INVENTORY_HASHDIFF", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.2268012, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["sat_inv_inventory_details"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_gx_demo.sat_inv_inventory_details"]}, "compiled_path": null, "column_name": "INVENTORY_HASHDIFF", "file_key_name": "models.sat_inv_inventory_details"}, "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "query_id", "model": "{{ get_where_subquery(ref('cost_per_query')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "unique_cost_per_query_query_id", "resource_type": "test", "package_name": "dbt_snowflake_monitoring", "path": "unique_cost_per_query_query_id.sql", "original_file_path": "models/cost_per_query.yml", "unique_id": "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d", "fqn": ["dbt_snowflake_monitoring", "unique_cost_per_query_query_id"], "alias": "unique_cost_per_query_query_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.3455853, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["cost_per_query"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_snowflake_monitoring.cost_per_query"]}, "compiled_path": null, "column_name": "query_id", "file_key_name": "models.cost_per_query"}, "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "query_id", "model": "{{ get_where_subquery(ref('cost_per_query')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "not_null_cost_per_query_query_id", "resource_type": "test", "package_name": "dbt_snowflake_monitoring", "path": "not_null_cost_per_query_query_id.sql", "original_file_path": "models/cost_per_query.yml", "unique_id": "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b", "fqn": ["dbt_snowflake_monitoring", "not_null_cost_per_query_query_id"], "alias": "not_null_cost_per_query_query_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.3475425, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["cost_per_query"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_snowflake_monitoring.cost_per_query"]}, "compiled_path": null, "column_name": "query_id", "file_key_name": "models.cost_per_query"}, "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_SK.ce7b263533": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "C_CUSTOMER_SK", "model": "{{ get_where_subquery(source('sales_demo', 'RAW_CUSTOMER_INFO')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_SK", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_SK.sql", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_SK.ce7b263533", "fqn": ["dbt_gx_demo", "bronze", "raw", "source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_SK"], "alias": "source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_SK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.744932, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_demo", "RAW_CUSTOMER_INFO"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO"]}, "compiled_path": null, "column_name": "C_CUSTOMER_SK", "file_key_name": "sources.sales_demo"}, "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_ID.07f591b9c5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "C_CUSTOMER_ID", "model": "{{ get_where_subquery(source('sales_demo', 'RAW_CUSTOMER_INFO')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_ID", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_ID.sql", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_ID.07f591b9c5", "fqn": ["dbt_gx_demo", "bronze", "raw", "source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_ID"], "alias": "source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.7468395, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_demo", "RAW_CUSTOMER_INFO"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO"]}, "compiled_path": null, "column_name": "C_CUSTOMER_ID", "file_key_name": "sources.sales_demo"}, "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS.e2cb8b9012": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CD_MARITAL_STATUS", "model": "{{ get_where_subquery(source('sales_demo', 'RAW_CUSTOMER_INFO')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "source_not_null_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "source_not_null_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS.sql", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS.e2cb8b9012", "fqn": ["dbt_gx_demo", "bronze", "raw", "source_not_null_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS"], "alias": "source_not_null_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695341479.7488549, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["sales_demo", "RAW_CUSTOMER_INFO"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO"]}, "compiled_path": null, "column_name": "CD_MARITAL_STATUS", "file_key_name": "sources.sales_demo"}, "test.dbt_gx_demo.source_accepted_values_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS__S__D__W__U__M.063ab0c72f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["S", "D", "W", "U", "M"], "column_name": "CD_MARITAL_STATUS", "model": "{{ get_where_subquery(source('sales_demo', 'RAW_CUSTOMER_INFO')) }}"}, "namespace": null}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "source_accepted_values_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS__S__D__W__U__M", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "source_accepted_values_sales_d_96d217e7a079fff8b267bc5d81153590.sql", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "test.dbt_gx_demo.source_accepted_values_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS__S__D__W__U__M.063ab0c72f", "fqn": ["dbt_gx_demo", "bronze", "raw", "source_accepted_values_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS__S__D__W__U__M"], "alias": "source_accepted_values_sales_d_96d217e7a079fff8b267bc5d81153590", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_accepted_values_sales_d_96d217e7a079fff8b267bc5d81153590", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_accepted_values_sales_d_96d217e7a079fff8b267bc5d81153590"}, "created_at": 1695341479.7506356, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_accepted_values_sales_d_96d217e7a079fff8b267bc5d81153590\") }}", "language": "sql", "refs": [], "sources": [["sales_demo", "RAW_CUSTOMER_INFO"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO"]}, "compiled_path": null, "column_name": "CD_MARITAL_STATUS", "file_key_name": "sources.sales_demo"}, "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_INVENTORY_LOAD_DATE_TIMESTAMP__Day__100000.1e4be90f25": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 100000, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(source('sales_demo', 'RAW_INVENTORY')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_INVENTORY_LOAD_DATE_TIMESTAMP__Day__100000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_source_expect_17ab6cda1a5797552dfb619a6b33e221.sql", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_INVENTORY_LOAD_DATE_TIMESTAMP__Day__100000.1e4be90f25", "fqn": ["dbt_gx_demo", "bronze", "raw", "dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_INVENTORY_LOAD_DATE_TIMESTAMP__Day__100000"], "alias": "dbt_expectations_source_expect_17ab6cda1a5797552dfb619a6b33e221", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_17ab6cda1a5797552dfb619a6b33e221", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_17ab6cda1a5797552dfb619a6b33e221"}, "created_at": 1695341479.7578163, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_17ab6cda1a5797552dfb619a6b33e221\") }}", "language": "sql", "refs": [], "sources": [["sales_demo", "RAW_INVENTORY"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_gx_demo.sales_demo.RAW_INVENTORY"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "sources.sales_demo"}, "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_ORDERS_LOAD_DATE_TIMESTAMP__Day__10000.6415ff9c9b": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 10000, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(source('sales_demo', 'RAW_ORDERS')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_ORDERS_LOAD_DATE_TIMESTAMP__Day__10000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_source_expect_37771594a23901fc15a3434a68bf2b53.sql", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_ORDERS_LOAD_DATE_TIMESTAMP__Day__10000.6415ff9c9b", "fqn": ["dbt_gx_demo", "bronze", "raw", "dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_ORDERS_LOAD_DATE_TIMESTAMP__Day__10000"], "alias": "dbt_expectations_source_expect_37771594a23901fc15a3434a68bf2b53", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_37771594a23901fc15a3434a68bf2b53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_37771594a23901fc15a3434a68bf2b53"}, "created_at": 1695341479.7651205, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_37771594a23901fc15a3434a68bf2b53\") }}", "language": "sql", "refs": [], "sources": [["sales_demo", "RAW_ORDERS"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_gx_demo.sales_demo.RAW_ORDERS"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "sources.sales_demo"}, "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_TRANSACTIONS_LOAD_DATE_TIMESTAMP__Day__10000.f998f521fa": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "Day", "interval": 10000, "column_name": "LOAD_DATE_TIMESTAMP", "model": "{{ get_where_subquery(source('sales_demo', 'RAW_TRANSACTIONS')) }}"}, "namespace": "dbt_expectations"}, "database": "BRONZE", "schema": "dbt_test__audit", "name": "dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_TRANSACTIONS_LOAD_DATE_TIMESTAMP__Day__10000", "resource_type": "test", "package_name": "dbt_gx_demo", "path": "dbt_expectations_source_expect_d117743a0a2ba2097ff6802964c0ee6d.sql", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_TRANSACTIONS_LOAD_DATE_TIMESTAMP__Day__10000.f998f521fa", "fqn": ["dbt_gx_demo", "bronze", "raw", "dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_TRANSACTIONS_LOAD_DATE_TIMESTAMP__Day__10000"], "alias": "dbt_expectations_source_expect_d117743a0a2ba2097ff6802964c0ee6d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_d117743a0a2ba2097ff6802964c0ee6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_d117743a0a2ba2097ff6802964c0ee6d"}, "created_at": 1695341479.7716677, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_d117743a0a2ba2097ff6802964c0ee6d\") }}", "language": "sql", "refs": [], "sources": [["sales_demo", "RAW_TRANSACTIONS"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["source.dbt_gx_demo.sales_demo.RAW_TRANSACTIONS"]}, "compiled_path": null, "column_name": "LOAD_DATE_TIMESTAMP", "file_key_name": "sources.sales_demo"}}, "sources": {"source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO": {"database": "BRONZE", "schema": "RAW", "name": "RAW_CUSTOMER_INFO", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO", "fqn": ["dbt_gx_demo", "bronze", "raw", "sales_demo", "RAW_CUSTOMER_INFO"], "source_name": "sales_demo", "source_description": "", "loader": "", "identifier": "RAW_CUSTOMER_INFO", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "LOAD_DATE_TIMESTAMP", "freshness": {"warn_after": {"count": 100, "period": "minute"}, "error_after": {"count": 1000, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"C_CUSTOMER_SK": {"name": "C_CUSTOMER_SK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_CUSTOMER_ID": {"name": "C_CUSTOMER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_SALUTATION": {"name": "C_SALUTATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_FIRST_NAME": {"name": "C_FIRST_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_LAST_NAME": {"name": "C_LAST_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_BIRTH_DAY": {"name": "C_BIRTH_DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_BIRTH_YEAR": {"name": "C_BIRTH_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_EMAIL_ADDRESS": {"name": "C_EMAIL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_LOGIN": {"name": "C_LOGIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_ADDRESS_ID": {"name": "CA_ADDRESS_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_STREET_NUMBER": {"name": "CA_STREET_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_STREET_TYPE": {"name": "CA_STREET_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_SUITE_NUMBER": {"name": "CA_SUITE_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_CITY": {"name": "CA_CITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_COUNTY": {"name": "CA_COUNTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_STATE": {"name": "CA_STATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_ZIP": {"name": "CA_ZIP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_COUNTRY": {"name": "CA_COUNTRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_GMT_OFFSET": {"name": "CA_GMT_OFFSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CA_LOCATION_TYPE": {"name": "CA_LOCATION_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_GENDER": {"name": "CD_GENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_MARITAL_STATUS": {"name": "CD_MARITAL_STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_EDUCATION_STATUS": {"name": "CD_EDUCATION_STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_PURCHASE_ESTIMATE": {"name": "CD_PURCHASE_ESTIMATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_CREDIT_RATING": {"name": "CD_CREDIT_RATING", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CD_DEP_COUNT": {"name": "CD_DEP_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_CUSTOMER_INFO", "created_at": 1695341479.7567375}, "source.dbt_gx_demo.sales_demo.RAW_INVENTORY": {"database": "BRONZE", "schema": "RAW", "name": "RAW_INVENTORY", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.sales_demo.RAW_INVENTORY", "fqn": ["dbt_gx_demo", "bronze", "raw", "sales_demo", "RAW_INVENTORY"], "source_name": "sales_demo", "source_description": "", "loader": "", "identifier": "RAW_INVENTORY", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "LOAD_DATE_TIMESTAMP", "freshness": {"warn_after": {"count": 100, "period": "minute"}, "error_after": {"count": 1000, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"PARTKEY": {"name": "PARTKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIERKEY": {"name": "SUPPLIERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVAILQTY": {"name": "AVAILQTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLYCOST": {"name": "SUPPLYCOST", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_SUPPLY_COMMENT": {"name": "PART_SUPPLY_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NAME": {"name": "SUPPLIER_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_ADDRESS": {"name": "SUPPLIER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NATION_KEY": {"name": "SUPPLIER_NATION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_PHONE": {"name": "SUPPLIER_PHONE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_ACCTBAL": {"name": "SUPPLIER_ACCTBAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_COMMENT": {"name": "SUPPLIER_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_NAME": {"name": "PART_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_MFGR": {"name": "PART_MFGR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_BRAND": {"name": "PART_BRAND", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_TYPE": {"name": "PART_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_SIZE": {"name": "PART_SIZE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_CONTAINER": {"name": "PART_CONTAINER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_RETAILPRICE": {"name": "PART_RETAILPRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PART_COMMENT": {"name": "PART_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NATION_NAME": {"name": "SUPPLIER_NATION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_NATION_COMMENT": {"name": "SUPPLIER_NATION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_REGION_KEY": {"name": "SUPPLIER_REGION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_REGION_NAME": {"name": "SUPPLIER_REGION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIER_REGION_COMMENT": {"name": "SUPPLIER_REGION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_INVENTORY", "created_at": 1695341479.7640574}, "source.dbt_gx_demo.sales_demo.RAW_ORDERS": {"database": "BRONZE", "schema": "RAW", "name": "RAW_ORDERS", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.sales_demo.RAW_ORDERS", "fqn": ["dbt_gx_demo", "bronze", "raw", "sales_demo", "RAW_ORDERS"], "source_name": "sales_demo", "source_description": "", "loader": "", "identifier": "RAW_ORDERS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "LOAD_DATE_TIMESTAMP", "freshness": {"warn_after": {"count": 100, "period": "minute"}, "error_after": {"count": 1000, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"ORDERKEY": {"name": "ORDERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARTKEY": {"name": "PARTKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUPPLIERKEY": {"name": "SUPPLIERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINENUMBER": {"name": "LINENUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "QUANTITY": {"name": "QUANTITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTENDEDPRICE": {"name": "EXTENDEDPRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAX": {"name": "TAX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RETURNFLAG": {"name": "RETURNFLAG", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINESTATUS": {"name": "LINESTATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPDATE": {"name": "SHIPDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMMITDATE": {"name": "COMMITDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTDATE": {"name": "RECEIPTDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPMODE": {"name": "SHIPMODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINE_COMMENT": {"name": "LINE_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMERKEY": {"name": "CUSTOMERKEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDERSTATUS": {"name": "ORDERSTATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTALPRICE": {"name": "TOTALPRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDERDATE": {"name": "ORDERDATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDERPRIORITY": {"name": "ORDERPRIORITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLERK": {"name": "CLERK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHIPPRIORITY": {"name": "SHIPPRIORITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDER_COMMENT": {"name": "ORDER_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NAME": {"name": "CUSTOMER_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_ADDRESS": {"name": "CUSTOMER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NATION_KEY": {"name": "CUSTOMER_NATION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_PHONE": {"name": "CUSTOMER_PHONE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_ACCBAL": {"name": "CUSTOMER_ACCBAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_MKTSEGMENT": {"name": "CUSTOMER_MKTSEGMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_COMMENT": {"name": "CUSTOMER_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NATION_NAME": {"name": "CUSTOMER_NATION_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_REGION_KEY": {"name": "CUSTOMER_REGION_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_NATION_COMMENT": {"name": "CUSTOMER_NATION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_REGION_COMMENT": {"name": "CUSTOMER_REGION_COMMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_ORDERS", "created_at": 1695341479.7704003}, "source.dbt_gx_demo.sales_demo.RAW_TRANSACTIONS": {"database": "BRONZE", "schema": "RAW", "name": "RAW_TRANSACTIONS", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.sales_demo.RAW_TRANSACTIONS", "fqn": ["dbt_gx_demo", "bronze", "raw", "sales_demo", "RAW_TRANSACTIONS"], "source_name": "sales_demo", "source_description": "", "loader": "", "identifier": "RAW_TRANSACTIONS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "LOAD_DATE_TIMESTAMP", "freshness": {"warn_after": {"count": 100, "period": "minute"}, "error_after": {"count": 1000, "period": "day"}, "filter": null}, "external": null, "description": "", "columns": {"ORDER_ID": {"name": "ORDER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOMER_ID": {"name": "CUSTOMER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORDER_DATE": {"name": "ORDER_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_DATE": {"name": "TRANSACTION_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSACTION_NUMBER": {"name": "TRANSACTION_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_TRANSACTIONS", "created_at": 1695341479.7768703}, "source.dbt_gx_demo.flight_demo.RAW_AIRPORT_INFO": {"database": "BRONZE", "schema": "RAW", "name": "RAW_AIRPORT_INFO", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.flight_demo.RAW_AIRPORT_INFO", "fqn": ["dbt_gx_demo", "bronze", "raw", "flight_demo", "RAW_AIRPORT_INFO"], "source_name": "flight_demo", "source_description": "", "loader": "", "identifier": "RAW_AIRPORT_INFO", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_date_timestamp", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"IATA_CODE": {"name": "IATA_CODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRPORT": {"name": "AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CITY": {"name": "CITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATE": {"name": "STATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY": {"name": "COUNTRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LATITUDE": {"name": "LATITUDE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_AIRPORT_INFO", "created_at": 1695341479.7771387}, "source.dbt_gx_demo.flight_demo.RAW_AIRLINE_INFO": {"database": "BRONZE", "schema": "RAW", "name": "RAW_AIRLINE_INFO", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.flight_demo.RAW_AIRLINE_INFO", "fqn": ["dbt_gx_demo", "bronze", "raw", "flight_demo", "RAW_AIRLINE_INFO"], "source_name": "flight_demo", "source_description": "", "loader": "", "identifier": "RAW_AIRLINE_INFO", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_date_timestamp", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"IATA_CODE": {"name": "IATA_CODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_AIRLINE_INFO", "created_at": 1695341479.7773693}, "source.dbt_gx_demo.flight_demo.RAW_FLIGHT_INFO": {"database": "BRONZE", "schema": "RAW", "name": "RAW_FLIGHT_INFO", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.flight_demo.RAW_FLIGHT_INFO", "fqn": ["dbt_gx_demo", "bronze", "raw", "flight_demo", "RAW_FLIGHT_INFO"], "source_name": "flight_demo", "source_description": "", "loader": "", "identifier": "RAW_FLIGHT_INFO", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_date_timestamp", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"YEAR": {"name": "YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH": {"name": "MONTH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY_OF_WEEK": {"name": "DAY_OF_WEEK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRLINE": {"name": "AIRLINE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FLIGHT_NUMBER": {"name": "FLIGHT_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAIL_NUMBER": {"name": "TAIL_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_AIRPORT": {"name": "ORIGIN_AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESTINATION_AIRPORT": {"name": "DESTINATION_AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_DEPARTURE": {"name": "SCHEDULE_DEPARTURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPARTURE_TIME": {"name": "DEPARTURE_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPARTURE_DELAY": {"name": "DEPARTURE_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAXI_OUT": {"name": "TAXI_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WHEELS_OFF": {"name": "WHEELS_OFF", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_TIME": {"name": "SCHEDULE_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ELAPSED_TIME": {"name": "ELAPSED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIR_TIME": {"name": "AIR_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DISTANCE": {"name": "DISTANCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WHEELS_ON": {"name": "WHEELS_ON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAXI_IN": {"name": "TAXI_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_ARRIVAL": {"name": "SCHEDULE_ARRIVAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARRIVAL_TIME": {"name": "ARRIVAL_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARRIVAL_DELAY": {"name": "ARRIVAL_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIVERTED": {"name": "DIVERTED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CANCELLED": {"name": "CANCELLED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CANCELLATION_REASON": {"name": "CANCELLATION_REASON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIR_SYSTEM_DELAY": {"name": "AIR_SYSTEM_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SECURITY_DELAY": {"name": "SECURITY_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRLINE_DELAY": {"name": "AIRLINE_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LATE_AIRCRAFT_DELAY": {"name": "LATE_AIRCRAFT_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEATHER_DELAY": {"name": "WEATHER_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_FLIGHT_INFO", "created_at": 1695341479.7776654}, "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_MOVIE": {"database": "BRONZE", "schema": "RAW", "name": "RAW_NETFLIX_BEST_MOVIE", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_MOVIE", "fqn": ["dbt_gx_demo", "bronze", "raw", "NETFLIX", "RAW_NETFLIX_BEST_MOVIE"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "RAW_NETFLIX_BEST_MOVIE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "etl_create_date", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_VOTES": {"name": "NUMBER_OF_VOTES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DURATION": {"name": "DURATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_NETFLIX_BEST_MOVIE", "created_at": 1695341479.7779164}, "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_MOVIE_BY_YEAR": {"database": "BRONZE", "schema": "RAW", "name": "RAW_NETFLIX_BEST_MOVIE_BY_YEAR", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_MOVIE_BY_YEAR", "fqn": ["dbt_gx_demo", "bronze", "raw", "NETFLIX", "RAW_NETFLIX_BEST_MOVIE_BY_YEAR"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "RAW_NETFLIX_BEST_MOVIE_BY_YEAR", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "etl_create_date", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOVIE_BUDGET": {"name": "MOVIE_BUDGET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCTION_START_DATE": {"name": "PRODUCTION_START_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_NETFLIX_BEST_MOVIE_BY_YEAR", "created_at": 1695341479.7781608}, "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_SHOW": {"database": "BRONZE", "schema": "RAW", "name": "RAW_NETFLIX_BEST_SHOW", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_SHOW", "fqn": ["dbt_gx_demo", "bronze", "raw", "NETFLIX", "RAW_NETFLIX_BEST_SHOW"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "RAW_NETFLIX_BEST_SHOW", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "etl_create_date", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_VOTES": {"name": "NUMBER_OF_VOTES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DURATION": {"name": "DURATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_SEASONS": {"name": "NUMBER_OF_SEASONS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_NETFLIX_BEST_SHOW", "created_at": 1695341479.778406}, "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_SHOW_BY_YEAR": {"database": "BRONZE", "schema": "RAW", "name": "RAW_NETFLIX_BEST_SHOW_BY_YEAR", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_SHOW_BY_YEAR", "fqn": ["dbt_gx_demo", "bronze", "raw", "NETFLIX", "RAW_NETFLIX_BEST_SHOW_BY_YEAR"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "RAW_NETFLIX_BEST_SHOW_BY_YEAR", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "etl_create_date", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_SEASONS": {"name": "NUMBER_OF_SEASONS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_NETFLIX_BEST_SHOW_BY_YEAR", "created_at": 1695341479.7786784}, "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_DATASET_MOVIE": {"database": "BRONZE", "schema": "RAW", "name": "RAW_NETFLIX_DATASET_MOVIE", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_DATASET_MOVIE", "fqn": ["dbt_gx_demo", "bronze", "raw", "NETFLIX", "RAW_NETFLIX_DATASET_MOVIE"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "RAW_NETFLIX_DATASET_MOVIE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "etl_create_date", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"MOVIE_ID": {"name": "MOVIE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "YEAR": {"name": "YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_NETFLIX_DATASET_MOVIE", "created_at": 1695341479.7789211}, "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_DATASET_RATING": {"database": "BRONZE", "schema": "RAW", "name": "RAW_NETFLIX_DATASET_RATING", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_DATASET_RATING", "fqn": ["dbt_gx_demo", "bronze", "raw", "NETFLIX", "RAW_NETFLIX_DATASET_RATING"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "RAW_NETFLIX_DATASET_RATING", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "etl_create_date", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"USER_ID": {"name": "USER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATING": {"name": "RATING", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOVIE_ID": {"name": "MOVIE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_NETFLIX_DATASET_RATING", "created_at": 1695341479.7791488}, "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_ORIGINALS": {"database": "BRONZE", "schema": "RAW", "name": "RAW_NETFLIX_ORIGINALS", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_ORIGINALS", "fqn": ["dbt_gx_demo", "bronze", "raw", "NETFLIX", "RAW_NETFLIX_ORIGINALS"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "RAW_NETFLIX_ORIGINALS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "etl_create_date", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GENRE": {"name": "GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREMIERE": {"name": "PREMIERE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNTIME": {"name": "RUNTIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMDBSCORE": {"name": "IMDBSCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LANGUAGE": {"name": "LANGUAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_NETFLIX_ORIGINALS", "created_at": 1695341479.779384}, "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_CREDITS": {"database": "BRONZE", "schema": "RAW", "name": "RAW_NETFLIX_CREDITS", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_CREDITS", "fqn": ["dbt_gx_demo", "bronze", "raw", "NETFLIX", "RAW_NETFLIX_CREDITS"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "RAW_NETFLIX_CREDITS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "etl_create_date", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PERSON_ID": {"name": "PERSON_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHARACTER": {"name": "CHARACTER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_NETFLIX_CREDITS", "created_at": 1695341479.7796154}, "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_TITLES": {"database": "BRONZE", "schema": "RAW", "name": "RAW_NETFLIX_TITLES", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/bronze/raw/raw_schema.yml", "original_file_path": "models/bronze/raw/raw_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_TITLES", "fqn": ["dbt_gx_demo", "bronze", "raw", "NETFLIX", "RAW_NETFLIX_TITLES"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "RAW_NETFLIX_TITLES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "etl_create_date", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AGE_CERTIFICATION": {"name": "AGE_CERTIFICATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNTIME": {"name": "RUNTIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GENRES": {"name": "GENRES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.RAW.RAW_NETFLIX_TITLES", "created_at": 1695341479.779854}, "source.dbt_gx_demo.tpch_sample.LINEITEM": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF10", "name": "LINEITEM", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpch_sample.LINEITEM", "fqn": ["dbt_gx_demo", "source", "tpch_sample", "LINEITEM"], "source_name": "tpch_sample", "source_description": "", "loader": "", "identifier": "LINEITEM", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF10.LINEITEM", "created_at": 1695341479.7802517}, "source.dbt_gx_demo.tpch_sample.CUSTOMER": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF10", "name": "CUSTOMER", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpch_sample.CUSTOMER", "fqn": ["dbt_gx_demo", "source", "tpch_sample", "CUSTOMER"], "source_name": "tpch_sample", "source_description": "", "loader": "", "identifier": "CUSTOMER", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF10.CUSTOMER", "created_at": 1695341479.7804983}, "source.dbt_gx_demo.tpch_sample.ORDERS": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF10", "name": "ORDERS", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpch_sample.ORDERS", "fqn": ["dbt_gx_demo", "source", "tpch_sample", "ORDERS"], "source_name": "tpch_sample", "source_description": "", "loader": "", "identifier": "ORDERS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF10.ORDERS", "created_at": 1695341479.7807148}, "source.dbt_gx_demo.tpch_sample.PARTSUPP": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF10", "name": "PARTSUPP", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpch_sample.PARTSUPP", "fqn": ["dbt_gx_demo", "source", "tpch_sample", "PARTSUPP"], "source_name": "tpch_sample", "source_description": "", "loader": "", "identifier": "PARTSUPP", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF10.PARTSUPP", "created_at": 1695341479.7809327}, "source.dbt_gx_demo.tpch_sample.SUPPLIER": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF10", "name": "SUPPLIER", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpch_sample.SUPPLIER", "fqn": ["dbt_gx_demo", "source", "tpch_sample", "SUPPLIER"], "source_name": "tpch_sample", "source_description": "", "loader": "", "identifier": "SUPPLIER", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF10.SUPPLIER", "created_at": 1695341479.7811484}, "source.dbt_gx_demo.tpch_sample.PART": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF10", "name": "PART", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpch_sample.PART", "fqn": ["dbt_gx_demo", "source", "tpch_sample", "PART"], "source_name": "tpch_sample", "source_description": "", "loader": "", "identifier": "PART", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF10.PART", "created_at": 1695341479.781363}, "source.dbt_gx_demo.tpch_sample.NATION": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF10", "name": "NATION", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpch_sample.NATION", "fqn": ["dbt_gx_demo", "source", "tpch_sample", "NATION"], "source_name": "tpch_sample", "source_description": "", "loader": "", "identifier": "NATION", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF10.NATION", "created_at": 1695341479.7815738}, "source.dbt_gx_demo.tpch_sample.REGION": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCH_SF10", "name": "REGION", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpch_sample.REGION", "fqn": ["dbt_gx_demo", "source", "tpch_sample", "REGION"], "source_name": "tpch_sample", "source_description": "", "loader": "", "identifier": "REGION", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCH_SF10.REGION", "created_at": 1695341479.781785}, "source.dbt_gx_demo.tpcds_sample.CUSTOMER": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCDS_SF10TCL", "name": "CUSTOMER", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpcds_sample.CUSTOMER", "fqn": ["dbt_gx_demo", "source", "tpcds_sample", "CUSTOMER"], "source_name": "tpcds_sample", "source_description": "", "loader": "", "identifier": "CUSTOMER", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"C_CUSTOMER_SK": {"name": "C_CUSTOMER_SK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_CUSTOMER_ID": {"name": "C_CUSTOMER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_CURRENT_CDEMO_SK": {"name": "C_CURRENT_CDEMO_SK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_CURRENT_HDEMO_SK": {"name": "C_CURRENT_HDEMO_SK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_CURRENT_ADDR_SK": {"name": "C_CURRENT_ADDR_SK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_FIRST_SHIPTO_DATE_SK": {"name": "C_FIRST_SHIPTO_DATE_SK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_FIRST_SALES_DATE_SK": {"name": "C_FIRST_SALES_DATE_SK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_SALUTATION": {"name": "C_SALUTATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_FIRST_NAME": {"name": "C_FIRST_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_LAST_NAME": {"name": "C_LAST_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_PREFERRED_CUST_FLAG": {"name": "C_PREFERRED_CUST_FLAG", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_BIRTH_DAY": {"name": "C_BIRTH_DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_BIRTH_MONTH": {"name": "C_BIRTH_MONTH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_BIRTH_YEAR": {"name": "C_BIRTH_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_BIRTH_COUNTRY": {"name": "C_BIRTH_COUNTRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_LOGIN": {"name": "C_LOGIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_EMAIL_ADDRESS": {"name": "C_EMAIL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "C_LAST_REVIEW_DATE": {"name": "C_LAST_REVIEW_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.CUSTOMER", "created_at": 1695341479.7820482}, "source.dbt_gx_demo.tpcds_sample.CUSTOMER_ADDRESS": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCDS_SF10TCL", "name": "CUSTOMER_ADDRESS", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpcds_sample.CUSTOMER_ADDRESS", "fqn": ["dbt_gx_demo", "source", "tpcds_sample", "CUSTOMER_ADDRESS"], "source_name": "tpcds_sample", "source_description": "", "loader": "", "identifier": "CUSTOMER_ADDRESS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.CUSTOMER_ADDRESS", "created_at": 1695341479.7822628}, "source.dbt_gx_demo.tpcds_sample.CUSTOMER_DEMOGRAPHICS": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCDS_SF10TCL", "name": "CUSTOMER_DEMOGRAPHICS", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpcds_sample.CUSTOMER_DEMOGRAPHICS", "fqn": ["dbt_gx_demo", "source", "tpcds_sample", "CUSTOMER_DEMOGRAPHICS"], "source_name": "tpcds_sample", "source_description": "", "loader": "", "identifier": "CUSTOMER_DEMOGRAPHICS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.CUSTOMER_DEMOGRAPHICS", "created_at": 1695341479.7824857}, "source.dbt_gx_demo.tpcds_sample.HOUSEHOLD_DEMOGRAPHICS": {"database": "SNOWFLAKE_SAMPLE_DATA", "schema": "TPCDS_SF10TCL", "name": "HOUSEHOLD_DEMOGRAPHICS", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.tpcds_sample.HOUSEHOLD_DEMOGRAPHICS", "fqn": ["dbt_gx_demo", "source", "tpcds_sample", "HOUSEHOLD_DEMOGRAPHICS"], "source_name": "tpcds_sample", "source_description": "", "loader": "", "identifier": "HOUSEHOLD_DEMOGRAPHICS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.HOUSEHOLD_DEMOGRAPHICS", "created_at": 1695341479.7827027}, "source.dbt_gx_demo.DEMO.AIRPORT": {"database": "DATA_REPOSITORY", "schema": "DEMO", "name": "AIRPORT", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.DEMO.AIRPORT", "fqn": ["dbt_gx_demo", "source", "DEMO", "AIRPORT"], "source_name": "DEMO", "source_description": "", "loader": "", "identifier": "AIRPORT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"IATA_CODE": {"name": "IATA_CODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRPORT": {"name": "AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CITY": {"name": "CITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATE": {"name": "STATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COUNTRY": {"name": "COUNTRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LATITUDE": {"name": "LATITUDE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LONGITUDE": {"name": "LONGITUDE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATA_REPOSITORY.DEMO.AIRPORT", "created_at": 1695341479.782943}, "source.dbt_gx_demo.DEMO.AIRLINE": {"database": "DATA_REPOSITORY", "schema": "DEMO", "name": "AIRLINE", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.DEMO.AIRLINE", "fqn": ["dbt_gx_demo", "source", "DEMO", "AIRLINE"], "source_name": "DEMO", "source_description": "", "loader": "", "identifier": "AIRLINE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"IATA_CODE": {"name": "IATA_CODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATA_REPOSITORY.DEMO.AIRLINE", "created_at": 1695341479.783168}, "source.dbt_gx_demo.DEMO.FLIGHT": {"database": "DATA_REPOSITORY", "schema": "DEMO", "name": "FLIGHT", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.DEMO.FLIGHT", "fqn": ["dbt_gx_demo", "source", "DEMO", "FLIGHT"], "source_name": "DEMO", "source_description": "", "loader": "", "identifier": "FLIGHT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"YEAR": {"name": "YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH": {"name": "MONTH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY_OF_WEEK": {"name": "DAY_OF_WEEK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRLINE": {"name": "AIRLINE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FLIGHT_NUMBER": {"name": "FLIGHT_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAIL_NUMBER": {"name": "TAIL_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_AIRPORT": {"name": "ORIGIN_AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESTINATION_AIRPORT": {"name": "DESTINATION_AIRPORT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_DEPARTURE": {"name": "SCHEDULE_DEPARTURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPARTURE_TIME": {"name": "DEPARTURE_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPARTURE_DELAY": {"name": "DEPARTURE_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAXI_OUT": {"name": "TAXI_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WHEELS_OFF": {"name": "WHEELS_OFF", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_TIME": {"name": "SCHEDULE_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ELAPSED_TIME": {"name": "ELAPSED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIR_TIME": {"name": "AIR_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DISTANCE": {"name": "DISTANCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WHEELS_ON": {"name": "WHEELS_ON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TAXI_IN": {"name": "TAXI_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCHEDULE_ARRIVAL": {"name": "SCHEDULE_ARRIVAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARRIVAL_TIME": {"name": "ARRIVAL_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ARRIVAL_DELAY": {"name": "ARRIVAL_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIVERTED": {"name": "DIVERTED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CANCELLED": {"name": "CANCELLED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CANCELLATION_REASON": {"name": "CANCELLATION_REASON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIR_SYSTEM_DELAY": {"name": "AIR_SYSTEM_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SECURITY_DELAY": {"name": "SECURITY_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AIRLINE_DELAY": {"name": "AIRLINE_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LATE_AIRCRAFT_DELAY": {"name": "LATE_AIRCRAFT_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WEATHER_DELAY": {"name": "WEATHER_DELAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOAD_DATE_TIMESTAMP": {"name": "LOAD_DATE_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DATA_REPOSITORY.DEMO.FLIGHT", "created_at": 1695341479.7834563}, "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE": {"database": "BRONZE", "schema": "LANDING", "name": "NETFLIX_BEST_MOVIE", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE", "fqn": ["dbt_gx_demo", "source", "NETFLIX", "NETFLIX_BEST_MOVIE"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "NETFLIX_BEST_MOVIE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_VOTES": {"name": "NUMBER_OF_VOTES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DURATION": {"name": "DURATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.LANDING.NETFLIX_BEST_MOVIE", "created_at": 1695341479.7837179}, "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE_BY_YEAR": {"database": "BRONZE", "schema": "LANDING", "name": "NETFLIX_BEST_MOVIE_BY_YEAR", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE_BY_YEAR", "fqn": ["dbt_gx_demo", "source", "NETFLIX", "NETFLIX_BEST_MOVIE_BY_YEAR"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "NETFLIX_BEST_MOVIE_BY_YEAR", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOVIE_BUDGET": {"name": "MOVIE_BUDGET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRODUCTION_START_DATE": {"name": "PRODUCTION_START_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.LANDING.NETFLIX_BEST_MOVIE_BY_YEAR", "created_at": 1695341479.783974}, "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW": {"database": "BRONZE", "schema": "LANDING", "name": "NETFLIX_BEST_SHOW", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW", "fqn": ["dbt_gx_demo", "source", "NETFLIX", "NETFLIX_BEST_SHOW"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "NETFLIX_BEST_SHOW", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_VOTES": {"name": "NUMBER_OF_VOTES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DURATION": {"name": "DURATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_SEASONS": {"name": "NUMBER_OF_SEASONS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.LANDING.NETFLIX_BEST_SHOW", "created_at": 1695341479.7842987}, "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW_BY_YEAR": {"database": "BRONZE", "schema": "LANDING", "name": "NETFLIX_BEST_SHOW_BY_YEAR", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW_BY_YEAR", "fqn": ["dbt_gx_demo", "source", "NETFLIX", "NETFLIX_BEST_SHOW_BY_YEAR"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "NETFLIX_BEST_SHOW_BY_YEAR", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SCORE": {"name": "SCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NUMBER_OF_SEASONS": {"name": "NUMBER_OF_SEASONS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_GENRE": {"name": "MAIN_GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAIN_PRODUCTION": {"name": "MAIN_PRODUCTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.LANDING.NETFLIX_BEST_SHOW_BY_YEAR", "created_at": 1695341479.7845511}, "source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_MOVIE": {"database": "BRONZE", "schema": "LANDING", "name": "NETFLIX_DATASET_MOVIE", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_MOVIE", "fqn": ["dbt_gx_demo", "source", "NETFLIX", "NETFLIX_DATASET_MOVIE"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "NETFLIX_DATASET_MOVIE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"MOVIE_ID": {"name": "MOVIE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "YEAR": {"name": "YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.LANDING.NETFLIX_DATASET_MOVIE", "created_at": 1695341479.7847853}, "source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_RATING": {"database": "BRONZE", "schema": "LANDING", "name": "NETFLIX_DATASET_RATING", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_RATING", "fqn": ["dbt_gx_demo", "source", "NETFLIX", "NETFLIX_DATASET_RATING"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "NETFLIX_DATASET_RATING", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"USER_ID": {"name": "USER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATING": {"name": "RATING", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MOVIE_ID": {"name": "MOVIE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.LANDING.NETFLIX_DATASET_RATING", "created_at": 1695341479.7850146}, "source.dbt_gx_demo.NETFLIX.NETFLIX_ORIGINALS": {"database": "BRONZE", "schema": "LANDING", "name": "NETFLIX_ORIGINALS", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.NETFLIX_ORIGINALS", "fqn": ["dbt_gx_demo", "source", "NETFLIX", "NETFLIX_ORIGINALS"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "NETFLIX_ORIGINALS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GENRE": {"name": "GENRE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREMIERE": {"name": "PREMIERE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNTIME": {"name": "RUNTIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMDBSCORE": {"name": "IMDBSCORE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LANGUAGE": {"name": "LANGUAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.LANDING.NETFLIX_ORIGINALS", "created_at": 1695341479.7852452}, "source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_CREDITS": {"database": "BRONZE", "schema": "LANDING", "name": "NETFLIX_RAW_CREDITS", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_CREDITS", "fqn": ["dbt_gx_demo", "source", "NETFLIX", "NETFLIX_RAW_CREDITS"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "NETFLIX_RAW_CREDITS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PERSON_ID": {"name": "PERSON_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHARACTER": {"name": "CHARACTER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.LANDING.NETFLIX_RAW_CREDITS", "created_at": 1695341479.7854764}, "source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_TITLES": {"database": "BRONZE", "schema": "LANDING", "name": "NETFLIX_RAW_TITLES", "resource_type": "source", "package_name": "dbt_gx_demo", "path": "models/source/source_schema.yml", "original_file_path": "models/source/source_schema.yml", "unique_id": "source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_TITLES", "fqn": ["dbt_gx_demo", "source", "NETFLIX", "NETFLIX_RAW_TITLES"], "source_name": "NETFLIX", "source_description": "", "loader": "", "identifier": "NETFLIX_RAW_TITLES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELEASE_YEAR": {"name": "RELEASE_YEAR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AGE_CERTIFICATION": {"name": "AGE_CERTIFICATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNTIME": {"name": "RUNTIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GENRES": {"name": "GENRES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETL_CREATE_DATE": {"name": "ETL_CREATE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "BRONZE.LANDING.NETFLIX_RAW_TITLES", "created_at": 1695341479.785722}, "source.dbt_snowflake_monitoring.snowflake_account_usage.access_history": {"database": "snowflake", "schema": "account_usage", "name": "access_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.access_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "access_history"], "source_name": "snowflake_account_usage", "source_description": "", "loader": "", "identifier": "access_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.access_history", "created_at": 1695341479.7859595}, "source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history": {"database": "snowflake", "schema": "account_usage", "name": "database_storage_usage_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "database_storage_usage_history"], "source_name": "snowflake_account_usage", "source_description": "", "loader": "", "identifier": "database_storage_usage_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.database_storage_usage_history", "created_at": 1695341479.786187}, "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history": {"database": "snowflake", "schema": "account_usage", "name": "metering_daily_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "metering_daily_history"], "source_name": "snowflake_account_usage", "source_description": "", "loader": "", "identifier": "metering_daily_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.metering_daily_history", "created_at": 1695341479.7864108}, "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history": {"database": "snowflake", "schema": "account_usage", "name": "metering_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "metering_history"], "source_name": "snowflake_account_usage", "source_description": "", "loader": "", "identifier": "metering_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.metering_history", "created_at": 1695341479.7866511}, "source.dbt_snowflake_monitoring.snowflake_account_usage.query_history": {"database": "snowflake", "schema": "account_usage", "name": "query_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.query_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "query_history"], "source_name": "snowflake_account_usage", "source_description": "", "loader": "", "identifier": "query_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.query_history", "created_at": 1695341479.7868783}, "source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history": {"database": "snowflake", "schema": "account_usage", "name": "serverless_task_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "serverless_task_history"], "source_name": "snowflake_account_usage", "source_description": "", "loader": "", "identifier": "serverless_task_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.serverless_task_history", "created_at": 1695341479.7871072}, "source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history": {"database": "snowflake", "schema": "account_usage", "name": "stage_storage_usage_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "stage_storage_usage_history"], "source_name": "snowflake_account_usage", "source_description": "", "loader": "", "identifier": "stage_storage_usage_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.stage_storage_usage_history", "created_at": 1695341479.7873337}, "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_events_history": {"database": "snowflake", "schema": "account_usage", "name": "warehouse_events_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_events_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "warehouse_events_history"], "source_name": "snowflake_account_usage", "source_description": "", "loader": "", "identifier": "warehouse_events_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.warehouse_events_history", "created_at": 1695341479.7875583}, "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history": {"database": "snowflake", "schema": "account_usage", "name": "warehouse_metering_history", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_account_usage", "warehouse_metering_history"], "source_name": "snowflake_account_usage", "source_description": "", "loader": "", "identifier": "warehouse_metering_history", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.account_usage.warehouse_metering_history", "created_at": 1695341479.7877831}, "source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily": {"database": "snowflake", "schema": "organization_usage", "name": "rate_sheet_daily", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_organization_usage", "rate_sheet_daily"], "source_name": "snowflake_organization_usage", "source_description": "", "loader": "", "identifier": "rate_sheet_daily", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.organization_usage.rate_sheet_daily", "created_at": 1695341479.7880325}, "source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily": {"database": "snowflake", "schema": "organization_usage", "name": "remaining_balance_daily", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_organization_usage", "remaining_balance_daily"], "source_name": "snowflake_organization_usage", "source_description": "", "loader": "", "identifier": "remaining_balance_daily", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.organization_usage.remaining_balance_daily", "created_at": 1695341479.7882617}, "source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily": {"database": "snowflake", "schema": "organization_usage", "name": "usage_in_currency_daily", "resource_type": "source", "package_name": "dbt_snowflake_monitoring", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily", "fqn": ["dbt_snowflake_monitoring", "staging", "snowflake_organization_usage", "usage_in_currency_daily"], "source_name": "snowflake_organization_usage", "source_description": "", "loader": "", "identifier": "usage_in_currency_daily", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "snowflake.organization_usage.usage_in_currency_daily", "created_at": 1695341479.7884881}}, "macros": {"macro.dbt_gx_demo.evaluate_datatype": {"name": "evaluate_datatype", "resource_type": "macro", "package_name": "dbt_gx_demo", "path": "macros/evaluate_datatype.sql", "original_file_path": "macros/evaluate_datatype.sql", "unique_id": "macro.dbt_gx_demo.evaluate_datatype", "macro_sql": "{% macro evaluate_datatype(column_name,column_alias) -%}\n\n{% set return_value = column_name %}\n\n{% if \"_DT\" == column_alias[-3:].upper() -%}\n    {% set return_value = \"CAST(\" ~ column_name ~ \" AS date)\" %}\n{% elif \"_AMT\" == column_alias[-4:].upper() -%}\n    {% set return_value = \"CAST(\" ~ column_name ~ \" AS decimal(10,2))\" %}\n{% elif \"_STR\" == column_alias[-4:].upper() -%}\n    {% set return_value = \"CAST(\" ~ column_name ~ \" AS VARCHAR)\" %}\n{% elif \"_VAR\" == column_alias[-4:].upper() -%}\n    {% set return_value = \"CAST(\" ~ column_name ~ \" AS VARIANT)\" %}\n{% elif \"_BOOL\" == column_alias[-5:].upper() -%}\n    {% set return_value = \"CAST(\" ~ column_name ~ \" AS BOOLEAN)\" %}\n{% elif \"_TS\" == column_alias[-3:].upper() -%}\n    {% set return_value = \"CAST(\" ~ column_name ~ \" AS TIMESTAMP)\" %}\n{% elif \"_GEO\" == column_alias[-4:].upper() -%}\n    {% set return_value = \"CAST(\" ~ column_name ~ \"  AS GEOGRAPHY)\" %}\n{% elif \"_GEOM\" == column_alias[-5:].upper() -%}\n    {% set return_value = \"CAST(\" ~ column_name ~ \" AS GEOMETRY)\" %}\n{% elif \"_TM\" == column_alias[-3:].upper() -%}\n    {% set return_value = \"CAST(\" ~ column_name ~ \" AS TIME)\" %}\n{% elif \"_BIN\" == column_alias[-3:].upper() -%}\n    {% set return_value = \"CAST(\" ~ column_name ~ \" AS BINARY)\" %}\n{% endif -%}\n\n\n{{return(return_value)}}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.0794578, "supported_languages": null}, "macro.dbt_gx_demo.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt_gx_demo", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.dbt_gx_demo.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.0802717, "supported_languages": null}, "macro.dbt_gx_demo.get_column_name": {"name": "get_column_name", "resource_type": "macro", "package_name": "dbt_gx_demo", "path": "macros/get_column_name.sql", "original_file_path": "macros/get_column_name.sql", "unique_id": "macro.dbt_gx_demo.get_column_name", "macro_sql": "{% macro get_column_name(table_name) -%}\n\n\n{% set get_column_name_query -%}\nselect\nCOLUMN_NAME,\nCOLUMN_ALIAS\nFROM BRONZE.LANDING.DATA_CATALOG\nWHERE TABLE_NAME = {{'table_name'}};\n{% endset -%}\n\n{% set results = run_query(get_column_name_query) -%}\n\n{% if execute %}\n\n{% set column_name =  results.columns[0].values() %}\n{% set column_alias =  results.columns[1].values() %}\n\n\n{% for i in  range(column_name|length) -%}\n{{evaluate_datatype(column_name[i],column_alias[i])}}  AS {{column_alias[i]}}{% if not loop.last %},{% endif %}\n{% endfor -%}\n\n{% endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_gx_demo.evaluate_datatype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.0820892, "supported_languages": null}, "macro.dbt_gx_demo.log_governance_results": {"name": "log_governance_results", "resource_type": "macro", "package_name": "dbt_gx_demo", "path": "macros/testing/log_governance_results.sql", "original_file_path": "macros/testing/log_governance_results.sql", "unique_id": "macro.dbt_gx_demo.log_governance_results", "macro_sql": "{% macro log_governance_results(model, path, error) %}\n\n{% set query %}\n\ninsert into bronze.dbt.governance_test_errors\n(model, modelpath, error)\nvalues\n('{{model}}', '{{path}}', '{{error}}')\n\n{% endset %}\n\n{% do run_query(query) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.082838, "supported_languages": null}, "macro.dbt_gx_demo.test_primary_key_validation": {"name": "test_primary_key_validation", "resource_type": "macro", "package_name": "dbt_gx_demo", "path": "macros/testing/primary_key_validation.sql", "original_file_path": "macros/testing/primary_key_validation.sql", "unique_id": "macro.dbt_gx_demo.test_primary_key_validation", "macro_sql": "{% test primary_key_validation(model) %}\n\n\n\nwith validation as (\n\nSELECT COUNT(*) as pk_count FROM BRONZE.INFORMATION_SCHEMA.TABLE_CONSTRAINTS\nWHERE LOWER(TABLE_NAME) = '{{model.name}}'\n\n),\n\nvalidation_errors as (\n\n    select\n        pk_count\n\n    from validation\n    where pk_count < 1\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.0832517, "supported_languages": null}, "macro.dbt_gx_demo.log_dbt_results": {"name": "log_dbt_results", "resource_type": "macro", "package_name": "dbt_gx_demo", "path": "macros/testing/log_dbt_results.sql", "original_file_path": "macros/testing/log_dbt_results.sql", "unique_id": "macro.dbt_gx_demo.log_dbt_results", "macro_sql": "{% macro log_dbt_results(results) %}\n\n    -- depends_on: {{ ref('failures') }}\n\n    {%- if execute -%}\n        {%- set parsed_results = parse_dbt_results(results) -%}\n        {%- if parsed_results | length  > 0 -%}\n            {% set insert_dbt_results_query -%}\n                insert into {{ ref('failures') }}\n                    (\n                        result_id,\n                        invocation_id,\n                        unique_id,\n                        database_name,\n                        schema_name,\n                        name,\n                        resource_type,\n                        status,\n                        execution_time,\n                        rows_affected,\n                        error_message\n                ) values\n                    {%- for parsed_result_dict in parsed_results -%}\n                        (\n                            '{{ parsed_result_dict.get('result_id') }}',\n                            '{{ parsed_result_dict.get('invocation_id') }}',\n                            '{{ parsed_result_dict.get('unique_id') }}',\n                            '{{ parsed_result_dict.get('database_name') }}',\n                            '{{ parsed_result_dict.get('schema_name') }}',\n                            '{{ parsed_result_dict.get('name') }}',\n                            '{{ parsed_result_dict.get('resource_type') }}',\n                            '{{ parsed_result_dict.get('status') }}',\n                            {{ parsed_result_dict.get('execution_time') }},\n                            {{ parsed_result_dict.get('rows_affected') }},\n                            CASE WHEN '{{ parsed_result_dict.get('status') }}'  not in ('pass','success') THEN '{{ parsed_result_dict.get('error_message') }}' ELSE '' END\n                        ) {{- \",\" if not loop.last else \"\" -}}\n                    {%- endfor -%}\n            {%- endset -%}\n            {%- do run_query(insert_dbt_results_query) -%}\n        {%- endif -%}\n    {%- endif -%}\n    {{ return ('') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_gx_demo.parse_dbt_results", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.088047, "supported_languages": null}, "macro.dbt_gx_demo.project_governance_check": {"name": "project_governance_check", "resource_type": "macro", "package_name": "dbt_gx_demo", "path": "macros/testing/project_governance_check.sql", "original_file_path": "macros/testing/project_governance_check.sql", "unique_id": "macro.dbt_gx_demo.project_governance_check", "macro_sql": "{% macro project_governance_check() %}\n    {{ log('Validating object: ' ~ this.identifier, info=True) }}\n\n\n    {% if 'staging' in model.path %}\n\n        {% if not model.name.startswith('stg_') %}\n            {{ exceptions.warn('Invalid naming convention. Staging objects must start with \"stg_\": ' ~ model.path) }}\n            {{log_governance_results( model.name, model.path,'Invalid naming convention. Staging objects must start with \"stg_\": ' )}}\n        {% endif %}\n\n    {% elif 'stage' in model.path %}\n\n        {% if not model.name.startswith('v_') %}\n            {{ exceptions.warn('Invalid naming convention. Stage objects must start with \"stg_\": ' ~ model.path) }}\n             {{log_governance_results( model.name, model.path,'Invalid naming convention. Staging objects must start with \"v_\": ' )}}           \n        {% endif %}\n\n    {% elif 'processed' in model.path %}\n\n        {% if not model.name.startswith('processed_') %}\n            {{ exceptions.warn('Invalid naming convention. Processed objects must start with \"processed_\": ' ~ model.path) }}\n            {{log_governance_results( model.name, model.path,'Invalid naming convention. Staging objects must start with \"processed_\": ' )}}\n        {% endif %}\n\n    {% elif 'hubs' in model.path %}\n\n        {% if not model.name.startswith('hub_') %}\n            {{ exceptions.warn('Invalid naming convention. Hub objects must start with \"hub_\": ' ~ model.path) }}\n            {{log_governance_results( model.name, model.path,'Invalid naming convention. Staging objects must start with \"hub_\": ' )}}           \n        {% endif %}\n\n    {% elif 'links' in model.path %}\n\n        {% if not model.name.startswith('link_') %}\n            {{ exceptions.warn('Invalid naming convention. Link objects must start with \"link_\": ' ~ model.path) }}\n            {{log_governance_results( model.name, model.path,'Invalid naming convention. Staging objects must start with \"link_\": ' )}}\n        {% endif %}\n\n    {% elif 'sats' in model.path %}\n\n        {% if not model.name.startswith('sat_') %}\n            {{ exceptions.warn('Invalid naming convention. Sat objects must start with \"sat_\": ' ~ model.path) }}\n            {{log_governance_results( model.name, model.path,'Invalid naming convention. Staging objects must start with \"sat_\": ' )}}\n        {% endif %}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_gx_demo.log_governance_results"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.094246, "supported_languages": null}, "macro.dbt_gx_demo.parse_dbt_results": {"name": "parse_dbt_results", "resource_type": "macro", "package_name": "dbt_gx_demo", "path": "macros/testing/parse_dbt_results.sql", "original_file_path": "macros/testing/parse_dbt_results.sql", "unique_id": "macro.dbt_gx_demo.parse_dbt_results", "macro_sql": "{% macro parse_dbt_results(results) %}\n    -- Create a list of parsed results\n    {%- set parsed_results = [] %}\n    -- Flatten results and add to list\n    {% for run_result in results %}\n        -- Convert the run result object to a simple dictionary\n        {% set run_result_dict = run_result.to_dict() %}\n        -- Get the underlying dbt graph node that was executed\n        {% set node = run_result_dict.get('node') %}\n        {% set rows_affected = run_result_dict.get('adapter_response', {}).get('rows_affected', 0) %}\n        {%- if not rows_affected -%}\n            {% set rows_affected = 0 %}\n        {%- endif -%}\n\n        {% set error_messsage = \"\" %}\n        {% if run_result_dict.get('message') is not none %}\n        {% set error_messsage = run_result_dict.get('message').replace(\"'\",\"\") %}\n        {%- endif -%}\n\n\n        {% set parsed_result_dict = {\n                'result_id': invocation_id ~ '.' ~ node.get('unique_id'),\n                'invocation_id': invocation_id,\n                'unique_id': node.get('unique_id'),\n                'database_name': node.get('database'),\n                'schema_name': node.get('schema'),\n                'name': node.get('name'),\n                'resource_type': node.get('resource_type'),\n                'status': run_result_dict.get('status'),\n                'execution_time': run_result_dict.get('execution_time'),\n                'rows_affected': rows_affected,\n                'error_message': error_messsage\n                } %}\n        {% do parsed_results.append(parsed_result_dict) %}\n    {% endfor %}\n    {{ return(parsed_results) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.0983613, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.120773, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1223235, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1230845, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1248677, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.125215, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1268642, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1280985, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1292214, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.129936, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.130372, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1309352, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.131391, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1325223, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.132947, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1333232, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1343577, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1349144, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1360059, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1376677, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1381645, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.138733, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1403947, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1410084, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.14127, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1418188, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.142219, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1424677, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.142722, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbtvault.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.143023, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1433399, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1438267, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.144282, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1446927, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1450748, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.146229, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1470246, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1520057, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1595144, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.15991, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1622715, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1629596, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.163527, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1643276, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1689193, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.169416, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1696403, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1737986, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1744716, "supported_languages": ["sql"]}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1750479, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1761234, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.176869, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1780376, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1805322, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1811235, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.181543, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.181908, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.182313, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1828735, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1833332, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.184167, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1846023, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1849885, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.185848, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1867738, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1877015, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1880734, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1884077, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.188656, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1890304, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1892116, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.18958, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1899545, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1951056, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1954937, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1959987, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1966393, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.197175, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1978712, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1982884, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.198782, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1991892, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.1995587, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.200153, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2008061, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2013586, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2025568, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.203073, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2033992, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2038403, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2068334, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2071145, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2074935, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2077553, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2085886, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2090356, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2092834, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2097805, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2102072, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2107198, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2111466, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2116463, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.21312, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2135594, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2141159, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2146382, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2172406, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2184997, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2188902, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2193608, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.21975, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2203712, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2214167, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2221978, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2226381, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2230103, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.223428, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2262132, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2265902, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.227275, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2276886, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.228458, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2289667, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2302556, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2308242, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2326906, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.23361, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2339275, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2342885, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.235178, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2360287, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2366054, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2376144, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2382102, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.23886, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2396343, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2401752, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.243136, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2444007, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.245062, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2481403, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2508376, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2525046, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2530403, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.253759, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2541366, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2547414, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2550538, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2556632, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2559876, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2565372, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.256781, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2573206, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2575653, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2582722, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2588665, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.259209, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2597117, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2598953, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2604585, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2607489, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2614412, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2618144, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2624378, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2627676, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.263301, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.263693, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2643173, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2646196, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2651532, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2655208, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.266691, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2675815, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2685854, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2689624, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2694604, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2701712, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2705595, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.271127, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.271497, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2720952, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.272419, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2729857, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2732415, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2740333, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2745879, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2750976, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2752795, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.275894, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2762423, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2770095, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.277339, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2791142, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2794645, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2798314, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2802067, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2805793, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2809262, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.281293, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.28169, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2820551, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.282396, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2827792, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2831137, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2834783, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2838087, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2859495, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2863953, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2867374, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.287062, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.287388, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2881515, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2888308, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2896583, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2906513, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2910607, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2920194, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.2929242, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.297863, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3006492, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3018563, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3033104, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3038416, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3054314, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3067575, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.316567, "supported_languages": ["sql"]}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3255792, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3290155, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3295968, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3317606, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3323724, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.333764, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3420959, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3447492, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3474689, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.349334, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3509357, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.351461, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.351885, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3525515, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3529727, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3536167, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.354037, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3546255, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3550453, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.355432, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3561308, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3610542, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3640954, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3647416, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.365235, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.365962, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.366327, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3667457, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3673236, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3746169, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.376724, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.377249, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3783016, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3787463, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3790565, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.379377, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3796453, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3800273, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3803053, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.381344, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3817613, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3844185, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.3910527, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4018035, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4027112, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4033155, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4092128, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.409856, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.410239, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4104524, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4108908, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4111826, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4116442, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4135516, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4139915, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4145672, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4155054, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4215238, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.421917, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4224248, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4239788, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.424365, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4247582, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.427891, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.430706, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4314885, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4323452, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.43322, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4338903, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4380243, "supported_languages": ["sql"]}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4403272, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4406815, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4415631, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.442453, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.443735, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4447734, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.444957, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4459448, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4464679, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4471104, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.447719, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4482064, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4490635, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4495325, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.449996, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4506073, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4508562, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.451093, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4514832, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4521298, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4523158, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4524894, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4526806, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4528542, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.453023, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4536278, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4541876, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.454971, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.455155, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4553301, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.455503, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4558604, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4560673, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4562411, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4564123, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4599054, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4622667, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4642289, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4652262, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4660003, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.468317, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4705706, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.471821, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.472989, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4736295, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4759538, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4774554, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4782128, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4798603, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4806516, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4815543, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4823856, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4841795, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4848444, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.487489, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4893253, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4908128, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.493191, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4956117, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4980137, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.4996455, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5009732, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5047903, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5059438, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5084338, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5089512, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5103009, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.512028, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.513774, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.51433, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5151718, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5160668, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5169413, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5190544, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5216339, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5238843, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5249233, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5259311, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5281706, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5301857, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5316238, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5326371, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5345027, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.536394, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.536961, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5382645, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.539601, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5412357, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.541875, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5432224, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5441487, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.54544, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5527449, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5539563, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5549743, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5578146, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5583613, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.558618, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5605185, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.562112, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.569584, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5711212, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5723655, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5786324, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5797968, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5829885, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5841622, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5858443, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5872638, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5889988, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5905502, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5926247, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5934575, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5948806, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5964513, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.597572, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.5990436, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.600725, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6021497, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6035728, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6047149, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6064131, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6092217, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6108818, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6123374, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6144323, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.615203, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6161625, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6172156, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6178708, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6185982, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6193511, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.620356, "supported_languages": null}, "macro.dbt_snowflake_monitoring.create_merge_objects_udf": {"name": "create_merge_objects_udf", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/create_merge_objects_udf.sql", "original_file_path": "macros/create_merge_objects_udf.sql", "unique_id": "macro.dbt_snowflake_monitoring.create_merge_objects_udf", "macro_sql": "{% macro create_merge_objects_udf(relation) %}\n\ncreate or replace function {{ relation.database }}.{{ relation.schema }}.merge_objects(obj1 variant, obj2 variant)\nreturns variant\nlanguage javascript\ncomment = 'Created by dbt-snowflake-monitoring dbt package.'\nas\n$$\n    return x = Object.assign(OBJ1, OBJ2)\n$$\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.620856, "supported_languages": null}, "macro.dbt_snowflake_monitoring.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_monitoring.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6215458, "supported_languages": null}, "macro.dbt_snowflake_monitoring.default__set_query_tag": {"name": "default__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_monitoring.default__set_query_tag", "macro_sql": "{% macro default__set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_monitoring.set_query_tag", "macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.621915, "supported_languages": null}, "macro.dbt_snowflake_monitoring.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_monitoring.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6223137, "supported_languages": null}, "macro.dbt_snowflake_monitoring.default__unset_query_tag": {"name": "default__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_monitoring.default__unset_query_tag", "macro_sql": "{% macro default__unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_monitoring.unset_query_tag", "macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6227295, "supported_languages": null}, "macro.dbt_snowflake_monitoring.get_query_comment": {"name": "get_query_comment", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/query_comment.sql", "original_file_path": "macros/query_comment.sql", "unique_id": "macro.dbt_snowflake_monitoring.get_query_comment", "macro_sql": "{% macro get_query_comment(node) %}\n    {{ return(dbt_snowflake_query_tags.get_query_comment(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.get_query_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.623151, "supported_languages": null}, "macro.dbt_snowflake_monitoring.account_locator": {"name": "account_locator", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/account_locator.sql", "original_file_path": "macros/account_locator.sql", "unique_id": "macro.dbt_snowflake_monitoring.account_locator", "macro_sql": "{% macro account_locator() %}\n{%- if var('account_locator', none) -%}\n'{{ var('account_locator') }}'\n{%- else -%}\ncurrent_account()\n{%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6237447, "supported_languages": null}, "macro.dbt_snowflake_monitoring.create_regexp_replace_udf": {"name": "create_regexp_replace_udf", "resource_type": "macro", "package_name": "dbt_snowflake_monitoring", "path": "macros/create_regexp_replace_udf.sql", "original_file_path": "macros/create_regexp_replace_udf.sql", "unique_id": "macro.dbt_snowflake_monitoring.create_regexp_replace_udf", "macro_sql": "{% macro create_regexp_replace_udf(relation) %}\n\ncreate or replace function {{ relation.database }}.{{ relation.schema }}.dbt_snowflake_monitoring_regexp_replace(subject text, pattern text, replacement text)\nreturns string\nlanguage javascript\ncomment = 'Created by dbt-snowflake-monitoring dbt package.'\nas\n$$\n    const p = SUBJECT;\n    let regex = new RegExp(PATTERN, 'g')\n    return p.replace(regex, REPLACEMENT);\n$$\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6242714, "supported_languages": null}, "macro.dbt_artifacts.upload_exposures": {"name": "upload_exposures", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.upload_exposures", "macro_sql": "{% macro upload_exposures(graph) -%}\n    {% set exposures = [] %}\n    {% for node in graph.exposures.values() %}\n        {% do exposures.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_exposures_dml_sql', 'dbt_artifacts')(exposures)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_exposures_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6285107, "supported_languages": null}, "macro.dbt_artifacts.default__get_exposures_dml_sql": {"name": "default__get_exposures_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.default__get_exposures_dml_sql", "macro_sql": "{% macro default__get_exposures_dml_sql(exposures) -%}\n\n    {% if exposures != [] %}\n        {% set exposure_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(6)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n        from values\n        {% for exposure in exposures -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n                '{{ exposure.type }}', {# type #}\n                '{{ tojson(exposure.owner) }}', {# owner #}\n                '{{ exposure.maturity }}', {# maturity #}\n                '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ exposure.description | replace(\"'\",\"\\\\'\") }}', {# description #}\n                '{{ exposure.url }}', {# url #}\n                '{{ exposure.package_name }}', {# package_name #}\n                '{{ tojson(exposure.depends_on.nodes) }}' {# depends_on_nodes #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ exposure_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6328642, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_exposures_dml_sql": {"name": "bigquery__get_exposures_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_exposures_dml_sql", "macro_sql": "{% macro bigquery__get_exposures_dml_sql(exposures) -%}\n    {% if exposures != [] %}\n        {% set exposure_values %}\n            {% for exposure in exposures -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n                    '{{ exposure.type }}', {# type #}\n                    parse_json('{{ tojson(exposure.owner) | replace(\"'\",\"\\\\'\") }}'), {# owner #}\n                    '{{ exposure.maturity }}', {# maturity #}\n                    '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    \"\"\"{{ exposure.description | replace(\"'\",\"\\\\'\") }}\"\"\", {# description #}\n                    '{{ exposure.url }}', {# url #}\n                    '{{ exposure.package_name }}', {# package_name #}\n                    {{ tojson(exposure.depends_on.nodes) }} {# depends_on_nodes #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ exposure_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.635145, "supported_languages": null}, "macro.dbt_artifacts.upload_test_executions": {"name": "upload_test_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.upload_test_executions", "macro_sql": "{% macro upload_test_executions(results) -%}\n    {% set tests = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"test\" %}\n            {% do tests.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_test_executions_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_test_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6393442, "supported_languages": null}, "macro.dbt_artifacts.default__get_test_executions_dml_sql": {"name": "default__get_test_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_test_executions_dml_sql", "macro_sql": "{% macro default__get_test_executions_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }} {# failures #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ test_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.64443, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql": {"name": "bigquery__get_test_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql", "macro_sql": "{% macro bigquery__get_test_executions_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }} {# failures #}\n            )\n            {%- if not loop.last %},{%- endif %}\n\n        {%- endfor %}\n        {% endset %}\n        {{ test_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6476133, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshot_executions": {"name": "upload_snapshot_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.upload_snapshot_executions", "macro_sql": "{% macro upload_snapshot_executions(results) -%}\n    {% set snapshots = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"snapshot\" %}\n            {% do snapshots.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_snapshot_executions_dml_sql', 'dbt_artifacts')(snapshots)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.654771, "supported_languages": null}, "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql": {"name": "default__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql", "macro_sql": "{% macro default__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}\n        from values\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6605067, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql": {"name": "bigquery__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql", "macro_sql": "{% macro bigquery__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.663877, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql": {"name": "snowflake__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql", "macro_sql": "{% macro snowflake__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.669603, "supported_languages": null}, "macro.dbt_artifacts.get_relation": {"name": "get_relation", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "unique_id": "macro.dbt_artifacts.get_relation", "macro_sql": "{% macro get_relation(get_relation_name) %}\n    {% if execute %}\n        {% set model_get_relation_node = graph.nodes.values() | selectattr('name', 'equalto', get_relation_name) | first %}\n        {% set relation = api.Relation.create(\n            database = model_get_relation_node.database,\n            schema = model_get_relation_node.schema,\n            identifier = model_get_relation_node.alias\n        )\n        %}\n        {% do return(relation) %}\n    {% else %}\n        {% do return(api.Relation.create()) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6783478, "supported_languages": null}, "macro.dbt_artifacts.upload_results": {"name": "upload_results", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "unique_id": "macro.dbt_artifacts.upload_results", "macro_sql": "{% macro upload_results(results) -%}\n\n    {% if execute %}\n\n        {% if results != [] %}\n            {% do log(\"Uploading model executions\", true) %}\n            {% set model_executions = dbt_artifacts.get_relation('model_executions') %}\n            {% set content_model_executions = dbt_artifacts.upload_model_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=model_executions.database,\n                schema_name=model_executions.schema,\n                table_name=model_executions.identifier,\n                content=content_model_executions\n                )\n            }}\n\n            {% do log(\"Uploading seed executions\", true) %}\n            {% set seed_executions = dbt_artifacts.get_relation('seed_executions') %}\n            {% set content_seed_executions = dbt_artifacts.upload_seed_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=seed_executions.database,\n                schema_name=seed_executions.schema,\n                table_name=seed_executions.identifier,\n                content=content_seed_executions\n                )\n            }}\n\n            {% do log(\"Uploading snapshot executions\", true) %}\n            {% set snapshot_executions = dbt_artifacts.get_relation('snapshot_executions') %}\n            {% set content_snapshot_executions = dbt_artifacts.upload_snapshot_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=snapshot_executions.database,\n                schema_name=snapshot_executions.schema,\n                table_name=snapshot_executions.identifier,\n                content=content_snapshot_executions\n                )\n            }}\n\n            {% do log(\"Uploading test executions\", true) %}\n            {% set test_executions = dbt_artifacts.get_relation('test_executions') %}\n            {% set content_test_executions = dbt_artifacts.upload_test_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=test_executions.database,\n                schema_name=test_executions.schema,\n                table_name=test_executions.identifier,\n                content=content_test_executions\n                )\n            }}\n\n        {% endif %}\n\n        {% do log(\"Uploading exposures\", true) %}\n        {% set exposures = dbt_artifacts.get_relation('exposures') %}\n        {% set content_exposures = dbt_artifacts.upload_exposures(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=exposures.database,\n            schema_name=exposures.schema,\n            table_name=exposures.identifier,\n            content=content_exposures\n            )\n        }}\n\n        {% do log(\"Uploading tests\", true) %}\n        {% set tests = dbt_artifacts.get_relation('tests') %}\n        {% set content_tests = dbt_artifacts.upload_tests(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=tests.database,\n            schema_name=tests.schema,\n            table_name=tests.identifier,\n            content=content_tests\n            )\n        }}\n\n        {% do log(\"Uploading seeds\", true) %}\n        {% set seeds = dbt_artifacts.get_relation('seeds') %}\n        {% set content_seeds = dbt_artifacts.upload_seeds(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=seeds.database,\n            schema_name=seeds.schema,\n            table_name=seeds.identifier,\n            content=content_seeds\n            )\n        }}\n\n        {% do log(\"Uploading models\", true) %}\n        {% set models = dbt_artifacts.get_relation('models') %}\n        {% set content_models = dbt_artifacts.upload_models(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=models.database,\n            schema_name=models.schema,\n            table_name=models.identifier,\n            content=content_models\n            )\n        }}\n\n        {% do log(\"Uploading sources\", true) %}\n        {% set sources = dbt_artifacts.get_relation('sources') %}\n        {% set content_sources = dbt_artifacts.upload_sources(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=sources.database,\n            schema_name=sources.schema,\n            table_name=sources.identifier,\n            content=content_sources\n            )\n        }}\n\n        {% do log(\"Uploading snapshots\", true) %}\n        {% set snapshots = dbt_artifacts.get_relation('snapshots') %}\n        {% set content_snapshots = dbt_artifacts.upload_snapshots(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=snapshots.database,\n            schema_name=snapshots.schema,\n            table_name=snapshots.identifier,\n            content=content_snapshots\n            )\n        }}\n\n        {% do log(\"Uploading invocations\", true) %}\n        {% set invocations = dbt_artifacts.get_relation('invocations') %}\n        {% set content_invocations = dbt_artifacts.upload_invocations() %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=invocations.database,\n            schema_name=invocations.schema,\n            table_name=invocations.identifier,\n            content=content_invocations\n            )\n        }}\n\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.get_relation", "macro.dbt_artifacts.upload_model_executions", "macro.dbt_artifacts.insert_into_metadata_table", "macro.dbt_artifacts.upload_seed_executions", "macro.dbt_artifacts.upload_snapshot_executions", "macro.dbt_artifacts.upload_test_executions", "macro.dbt_artifacts.upload_exposures", "macro.dbt_artifacts.upload_tests", "macro.dbt_artifacts.upload_seeds", "macro.dbt_artifacts.upload_models", "macro.dbt_artifacts.upload_sources", "macro.dbt_artifacts.upload_snapshots", "macro.dbt_artifacts.upload_invocations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6868746, "supported_languages": null}, "macro.dbt_artifacts.parse_json": {"name": "parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "unique_id": "macro.dbt_artifacts.parse_json", "macro_sql": "{% macro parse_json(field) -%}\n  {{ return(adapter.dispatch('parse_json')(field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6875331, "supported_languages": null}, "macro.dbt_artifacts.default__parse_json": {"name": "default__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "unique_id": "macro.dbt_artifacts.default__parse_json", "macro_sql": "{% macro default__parse_json(field) -%}\n    {{ field }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6877606, "supported_languages": null}, "macro.dbt_artifacts.snowflake__parse_json": {"name": "snowflake__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "unique_id": "macro.dbt_artifacts.snowflake__parse_json", "macro_sql": "{% macro snowflake__parse_json(field) -%}\n    parse_json({{ field }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6880124, "supported_languages": null}, "macro.dbt_artifacts.bigquery__parse_json": {"name": "bigquery__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "unique_id": "macro.dbt_artifacts.bigquery__parse_json", "macro_sql": "{% macro bigquery__parse_json(field) -%}\n    parse_json({{ field }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6882472, "supported_languages": null}, "macro.dbt_artifacts.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_boolean", "macro_sql": "{% macro type_boolean() %}\n    {{ return(adapter.dispatch('type_boolean', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.689127, "supported_languages": null}, "macro.dbt_artifacts.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_boolean", "macro_sql": "{% macro default__type_boolean() %}\n   {{ return(api.Column.translate_type(\"boolean\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6894708, "supported_languages": null}, "macro.dbt_artifacts.type_json": {"name": "type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_json", "macro_sql": "{% macro type_json() %}\n    {{ return(adapter.dispatch('type_json', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__type_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6898475, "supported_languages": null}, "macro.dbt_artifacts.default__type_json": {"name": "default__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_json", "macro_sql": "{% macro default__type_json() %}\n   {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6901937, "supported_languages": null}, "macro.dbt_artifacts.snowflake__type_json": {"name": "snowflake__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.snowflake__type_json", "macro_sql": "{% macro snowflake__type_json() %}\n   OBJECT\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.690372, "supported_languages": null}, "macro.dbt_artifacts.bigquery__type_json": {"name": "bigquery__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.bigquery__type_json", "macro_sql": "{% macro bigquery__type_json() %}\n   JSON\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6905553, "supported_languages": null}, "macro.dbt_artifacts.type_array": {"name": "type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_array", "macro_sql": "{% macro type_array() %}\n    {{ return(adapter.dispatch('type_array', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__type_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6909301, "supported_languages": null}, "macro.dbt_artifacts.default__type_array": {"name": "default__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_array", "macro_sql": "{% macro default__type_array() %}\n   {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6912732, "supported_languages": null}, "macro.dbt_artifacts.snowflake__type_array": {"name": "snowflake__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.snowflake__type_array", "macro_sql": "{% macro snowflake__type_array() %}\n   ARRAY\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.691451, "supported_languages": null}, "macro.dbt_artifacts.bigquery__type_array": {"name": "bigquery__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "unique_id": "macro.dbt_artifacts.bigquery__type_array", "macro_sql": "{% macro bigquery__type_array() %}\n   ARRAY<string>\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.691621, "supported_languages": null}, "macro.dbt_artifacts.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/surrogate_key.sql", "original_file_path": "macros/surrogate_key.sql", "unique_id": "macro.dbt_artifacts.surrogate_key", "macro_sql": "\n\n{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_artifacts')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.6927698, "supported_languages": null}, "macro.dbt_artifacts.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/surrogate_key.sql", "original_file_path": "macros/surrogate_key.sql", "unique_id": "macro.dbt_artifacts.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.type_string", "macro.dbtvault.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.694758, "supported_languages": null}, "macro.dbt_artifacts.upload_sources": {"name": "upload_sources", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "unique_id": "macro.dbt_artifacts.upload_sources", "macro_sql": "{% macro upload_sources(graph) -%}\n    {% set sources = [] %}\n    {% for node in graph.sources.values() %}\n        {% do sources.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_sources_dml_sql', 'dbt_artifacts')(sources)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_sources_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.698551, "supported_languages": null}, "macro.dbt_artifacts.default__get_sources_dml_sql": {"name": "default__get_sources_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "unique_id": "macro.dbt_artifacts.default__get_sources_dml_sql", "macro_sql": "{% macro default__get_sources_dml_sql(sources) -%}\n\n    {% if sources != [] %}\n        {% set source_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(11)) }}\n        from values\n        {% for source in sources -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ source.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ source.database }}', {# database #}\n                '{{ source.schema }}', {# schema #}\n                '{{ source.source_name }}', {# source_name #}\n                '{{ source.loader }}', {# loader #}\n                '{{ source.name }}', {# name #}\n                '{{ source.identifier }}', {# identifier #}\n                '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                '{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}' {# freshness #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ source_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7025113, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_sources_dml_sql": {"name": "bigquery__get_sources_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_sources_dml_sql", "macro_sql": "{% macro bigquery__get_sources_dml_sql(sources) -%}\n    {% if sources != [] %}\n        {% set source_values %}\n            {% for source in sources -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ source.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ source.database }}', {# database #}\n                    '{{ source.schema }}', {# schema #}\n                    '{{ source.source_name }}', {# source_name #}\n                    '{{ source.loader }}', {# loader #}\n                    '{{ source.name }}', {# name #}\n                    '{{ source.identifier }}', {# identifier #}\n                    '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                    parse_json('{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}')  {# freshness #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ source_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7044342, "supported_languages": null}, "macro.dbt_artifacts.upload_seeds": {"name": "upload_seeds", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.upload_seeds", "macro_sql": "{% macro upload_seeds(graph) -%}\n    {% set seeds = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"seed\") %}\n        {% do seeds.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_seeds_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_seeds_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.708156, "supported_languages": null}, "macro.dbt_artifacts.default__get_seeds_dml_sql": {"name": "default__get_seeds_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.default__get_seeds_dml_sql", "macro_sql": "{% macro default__get_seeds_dml_sql(seeds) -%}\n\n    {% if seeds != [] %}\n        {% set seed_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(10)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}\n        from values\n        {% for seed in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ seed.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ seed.database }}', {# database #}\n                '{{ seed.schema }}', {# schema #}\n                '{{ seed.name }}', {# name #}\n                '{{ seed.package_name }}', {# package_name #}\n                '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ seed.checksum.checksum }}', {# checksum #}\n                '{{ tojson(seed.config.meta) }}', {# meta #}\n                '{{ seed.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7118723, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_seeds_dml_sql": {"name": "bigquery__get_seeds_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_seeds_dml_sql", "macro_sql": "{% macro bigquery__get_seeds_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_values %}\n            {% for seed in seeds -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ seed.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ seed.database }}', {# database #}\n                    '{{ seed.schema }}', {# schema #}\n                    '{{ seed.name }}', {# name #}\n                    '{{ seed.package_name }}', {# package_name #}\n                    '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ seed.checksum.checksum }}', {# checksum #}\n                    parse_json('{{ tojson(seed.config.meta) }}'), {# meta #}\n                    '{{ seed.alias }}' {# alias #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ seed_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.713756, "supported_languages": null}, "macro.dbt_artifacts.upload_models": {"name": "upload_models", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "unique_id": "macro.dbt_artifacts.upload_models", "macro_sql": "{% macro upload_models(graph) -%}\n    {% set models = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"model\") %}\n        {% do models.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_models_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_models_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7185493, "supported_languages": null}, "macro.dbt_artifacts.default__get_models_dml_sql": {"name": "default__get_models_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "unique_id": "macro.dbt_artifacts.default__get_models_dml_sql", "macro_sql": "{% macro default__get_models_dml_sql(models) -%}\n\n    {% if models != [] %}\n        {% set model_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ model.database }}', {# database #}\n                '{{ model.schema }}', {# schema #}\n                '{{ model.name }}', {# name #}\n                '{{ tojson(model.depends_on.nodes) | replace('\\\\', '\\\\\\\\') }}', {# depends_on_nodes #}\n                '{{ model.package_name }}', {# package_name #}\n                '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ model.checksum.checksum }}', {# checksum #}\n                '{{ model.config.materialized }}', {# materialization #}\n                '{{ tojson(model.tags) }}', {# tags #}\n                '{{ tojson(model.config.meta) }}', {# meta #}\n                '{{ model.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7235384, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_models_dml_sql": {"name": "bigquery__get_models_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_models_dml_sql", "macro_sql": "{% macro bigquery__get_models_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_values %}\n            {% for model in models -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ model.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ model.database }}', {# database #}\n                    '{{ model.schema }}', {# schema #}\n                    '{{ model.name }}', {# name #}\n                    {{ tojson(model.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ model.package_name }}', {# package_name #}\n                    '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ model.checksum.checksum }}', {# checksum #}\n                    '{{ model.config.materialized }}', {# materialization #}\n                    {{ tojson(model.tags) }}, {# tags #}\n                    parse_json('{{ tojson(model.config.meta) }}'), {# meta #}\n                    '{{ model.alias }}' {# alias #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ model_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7257285, "supported_languages": null}, "macro.dbt_artifacts.column_identifier": {"name": "column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "unique_id": "macro.dbt_artifacts.column_identifier", "macro_sql": "{% macro column_identifier(column_index) -%}\n  {{ return(adapter.dispatch('column_identifier')(column_index)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7263703, "supported_languages": null}, "macro.dbt_artifacts.default__column_identifier": {"name": "default__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "unique_id": "macro.dbt_artifacts.default__column_identifier", "macro_sql": "{% macro default__column_identifier(column_index) -%}\n    {{ column_index }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7267053, "supported_languages": null}, "macro.dbt_artifacts.snowflake__column_identifier": {"name": "snowflake__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "unique_id": "macro.dbt_artifacts.snowflake__column_identifier", "macro_sql": "{% macro snowflake__column_identifier(column_index) -%}\n    ${{ column_index }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7269578, "supported_languages": null}, "macro.dbt_artifacts.spark__column_identifier": {"name": "spark__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "unique_id": "macro.dbt_artifacts.spark__column_identifier", "macro_sql": "{% macro spark__column_identifier(column_index) -%}\n    col{{ column_index }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7271888, "supported_languages": null}, "macro.dbt_artifacts.upload_model_executions": {"name": "upload_model_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.upload_model_executions", "macro_sql": "{% macro upload_model_executions(results) -%}\n    {% set models = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"model\" %}\n            {% do models.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_model_executions_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_model_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7347791, "supported_languages": null}, "macro.dbt_artifacts.default__get_model_executions_dml_sql": {"name": "default__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_model_executions_dml_sql", "macro_sql": "{% macro default__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake & BigQuery #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7405477, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql": {"name": "bigquery__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql", "macro_sql": "{% macro bigquery__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        {% for model in models -%}\n            (\n            '{{ invocation_id }}', {# command_invocation_id #}\n            '{{ model.node.unique_id }}', {# node_id #}\n            '{{ run_started_at }}', {# run_started_at #}\n\n            {% set config_full_refresh = model.node.config.full_refresh %}\n            {% if config_full_refresh is none %}\n                {% set config_full_refresh = flags.FULL_REFRESH %}\n            {% endif %}\n            {{ config_full_refresh }}, {# was_full_refresh #}\n\n            '{{ model.thread_id }}', {# thread_id #}\n            '{{ model.status }}', {# status #}\n\n            {% if model.timing != [] %}\n                {% for stage in model.timing if stage.name == \"compile\" %}\n                    {% if loop.length == 0 %}\n                        null, {# compile_started_at #}\n                    {% else %}\n                        '{{ stage.started_at }}', {# compile_started_at #}\n                    {% endif %}\n                {% endfor %}\n\n                {% for stage in model.timing if stage.name == \"execute\" %}\n                    {% if loop.length == 0 %}\n                        null, {# query_completed_at #}\n                    {% else %}\n                        '{{ stage.completed_at }}', {# query_completed_at #}\n                    {% endif %}\n                {% endfor %}\n            {% else %}\n                null, {# compile_started_at #}\n                null, {# query_completed_at #}\n            {% endif %}\n\n            {{ model.execution_time }}, {# total_node_runtime #}\n            safe_cast('{{ model.adapter_response.rows_affected }}' as int64),\n            safe_cast('{{ model.adapter_response.bytes_processed }}' as int64),\n            '{{ model.node.config.materialized }}', {# materialization #}\n            '{{ model.node.schema }}', {# schema #}\n            '{{ model.node.name }}', {# name #}\n            '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7440236, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql": {"name": "snowflake__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql", "macro_sql": "{% macro snowflake__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7497191, "supported_languages": null}, "macro.dbt_artifacts.upload_seed_executions": {"name": "upload_seed_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.upload_seed_executions", "macro_sql": "{% macro upload_seed_executions(results) -%}\n    {% set seeds = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"seed\" %}\n            {% do seeds.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_seed_executions_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7569494, "supported_languages": null}, "macro.dbt_artifacts.default__get_seed_executions_dml_sql": {"name": "default__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_seed_executions_dml_sql", "macro_sql": "{% macro default__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.76273, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql": {"name": "bigquery__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql", "macro_sql": "{% macro bigquery__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7660923, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql": {"name": "snowflake__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql", "macro_sql": "{% macro snowflake__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}\n        from values\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7719996, "supported_languages": null}, "macro.dbt_artifacts.upload_tests": {"name": "upload_tests", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "unique_id": "macro.dbt_artifacts.upload_tests", "macro_sql": "{% macro upload_tests(graph) -%}\n    {% set tests = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\") %}\n        {% do tests.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_tests_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_tests_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7751217, "supported_languages": null}, "macro.dbt_artifacts.default__get_tests_dml_sql": {"name": "default__get_tests_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "unique_id": "macro.dbt_artifacts.default__get_tests_dml_sql", "macro_sql": "{% macro default__get_tests_dml_sql(tests) -%}\n\n    {% if tests != [] %}\n        {% set test_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(5)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(8)) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ test.name }}', {# name #}\n                '{{ tojson(test.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ test.package_name }}', {# package_name #}\n                '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                '{{ tojson(test.tags) }}' {# tags #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ test_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7783098, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_tests_dml_sql": {"name": "bigquery__get_tests_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_tests_dml_sql", "macro_sql": "{% macro bigquery__get_tests_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_values %}\n            {% for test in tests -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ test.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ test.name }}', {# name #}\n                    {{ tojson(test.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ test.package_name }}', {# package_name #}\n                    '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                    {{ tojson(test.tags) }} {# tags #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ test_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7799714, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshots": {"name": "upload_snapshots", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.upload_snapshots", "macro_sql": "{% macro upload_snapshots(graph) -%}\n    {% set snapshots = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"snapshot\") %}\n        {% do snapshots.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_snapshots_dml_sql', 'dbt_artifacts')(snapshots)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_snapshots_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7844117, "supported_languages": null}, "macro.dbt_artifacts.default__get_snapshots_dml_sql": {"name": "default__get_snapshots_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.default__get_snapshots_dml_sql", "macro_sql": "{% macro default__get_snapshots_dml_sql(snapshots) -%}\n\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}\n        from values\n        {% for snapshot in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ snapshot.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ snapshot.database }}', {# database #}\n                '{{ snapshot.schema }}', {# schema #}\n                '{{ snapshot.name }}', {# name #}\n                '{{ tojson(snapshot.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ snapshot.package_name }}', {# package_name #}\n                '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ snapshot.checksum.checksum }}', {# checksum #}\n                '{{ snapshot.config.strategy }}', {# strategy #}\n                '{{ tojson(snapshot.config.meta) }}', {# meta #}\n                '{{ snapshot.alias }}' {# alias #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7888074, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql": {"name": "bigquery__get_snapshots_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql", "macro_sql": "{% macro bigquery__get_snapshots_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n            {% for snapshot in snapshots -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ snapshot.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ snapshot.database }}', {# database #}\n                    '{{ snapshot.schema }}', {# schema #}\n                    '{{ snapshot.name }}', {# name #}\n                    {{ tojson(snapshot.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ snapshot.package_name }}', {# package_name #}\n                    '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ snapshot.checksum.checksum }}', {# checksum #}\n                    '{{ snapshot.config.strategy }}', {# strategy #}\n                    parse_json('{{ tojson(snapshot.config.meta) }}'), {# meta #}\n                    '{{ snapshot.alias }}' {# alias #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ snapshot_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7909765, "supported_languages": null}, "macro.dbt_artifacts.insert_into_metadata_table": {"name": "insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.insert_into_metadata_table", "macro_sql": "{% macro insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% if content != \"\" %}\n        {{ return(adapter.dispatch('insert_into_metadata_table', 'dbt_artifacts')(database_name, schema_name, table_name, content)) }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7929516, "supported_languages": null}, "macro.dbt_artifacts.spark__insert_into_metadata_table": {"name": "spark__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.spark__insert_into_metadata_table", "macro_sql": "{% macro spark__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% set insert_into_table_query %}\n    insert into {% if database_name %}{{ database_name }}.{% endif %}{{ schema_name }}.{{ table_name }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7936578, "supported_languages": null}, "macro.dbt_artifacts.snowflake__insert_into_metadata_table": {"name": "snowflake__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.snowflake__insert_into_metadata_table", "macro_sql": "{% macro snowflake__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% set insert_into_table_query %}\n    insert into {{database_name}}.{{ schema_name }}.{{ table_name }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7942672, "supported_languages": null}, "macro.dbt_artifacts.bigquery__insert_into_metadata_table": {"name": "bigquery__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.bigquery__insert_into_metadata_table", "macro_sql": "{% macro bigquery__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n\n        {% set insert_into_table_query %}\n        insert into `{{database_name}}.{{ schema_name }}.{{ table_name }}`\n        VALUES\n        {{ content }}\n        {% endset %}\n\n        {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.7948904, "supported_languages": null}, "macro.dbt_artifacts.default__insert_into_metadata_table": {"name": "default__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.default__insert_into_metadata_table", "macro_sql": "{% macro default__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.795135, "supported_languages": null}, "macro.dbt_artifacts.migrate_from_v0_to_v1": {"name": "migrate_from_v0_to_v1", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/migrate_from_v0_to_v1.sql", "original_file_path": "macros/migrate_from_v0_to_v1.sql", "unique_id": "macro.dbt_artifacts.migrate_from_v0_to_v1", "macro_sql": "{%- macro migrate_from_v0_to_v1(old_database, old_schema, new_database, new_schema) -%}\n\n    {% set migrate_model_executions %}\n        insert into {{new_database}}.{{new_schema}}.model_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            model_materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            model_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__model_executions\n    {% endset %}\n\n    {{ log(\"Migrating model_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_model_executions }}\n    {%- endcall -%}\n\n    {% set migrate_tests %}\n        insert into {{new_database}}.{{new_schema}}.tests (\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            tags,\n            test_path,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            [],\n            test_path,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__tests\n    {% endset %}\n\n    {{ log(\"Migrating tests\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_tests }}\n    {%- endcall -%}\n\n    {% set migrate_test_executions %}\n        insert into {{new_database}}.{{new_schema}}.test_executions (\n            command_invocation_id,\n            compile_started_at,\n            failures,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            null,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__test_executions\n    {% endset %}\n\n    {{ log(\"Migrating test_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_test_executions }}\n    {%- endcall -%}\n\n    {% set migrate_models %}\n        insert into {{new_database}}.{{new_schema}}.models (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            materialization,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            model_database,\n            depends_on_nodes,\n            model_materialization,\n            name,\n            node_id,\n            package_name,\n            model_path,\n            model_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__models\n    {% endset %}\n\n    {{ log(\"Migrating models\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_models }}\n    {%- endcall -%}\n\n    {% set migrate_seeds %}\n        insert into {{new_database}}.{{new_schema}}.seeds (\n            checksum,\n            command_invocation_id,\n            database,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            seed_database,\n            name,\n            node_id,\n            package_name,\n            seed_path,\n            seed_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__seeds\n    {% endset %}\n\n    {{ log(\"Migrating seeds\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seeds }}\n    {%- endcall -%}\n\n    {% set migrate_seed_executions %}\n        insert into {{new_database}}.{{new_schema}}.seed_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'seed',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            seed_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__seed_executions\n    {% endset %}\n\n    {{ log(\"Migrating seed_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seed_executions }}\n    {%- endcall -%}\n\n    {% set migrate_exposures %}\n        insert into {{new_database}}.{{new_schema}}.exposures (\n            command_invocation_id,\n            depends_on_nodes,\n            description,\n            maturity,\n            name,\n            node_id,\n            owner,\n            package_name,\n            path,\n            type,\n            url,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            array_agg(output_feeds), {#- Here we un-flatten the transformation originally done -#}\n            null,\n            any_value(maturity) as maturity,\n            name,\n            node_id,\n            null, {#- v0 is a string, v1 is a variant -#}\n            any_value(package_name) as package_name,\n            null,\n            any_value(type) as type,\n            null,\n            any_value(artifact_generated_at) as artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__exposures\n        group by command_invocation_id, node_id, name, artifact_generated_at\n    {% endset %}\n\n    {{ log(\"Migrating exposures\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_exposures }}\n    {%- endcall -%}\n\n    {% set migrate_snapshots %}\n        insert into {{new_database}}.{{new_schema}}.snapshots (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            strategy,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            snapshot_database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            snapshot_path,\n            snapshot_schema,\n            null,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__snapshots\n    {% endset %}\n\n    {{ log(\"Migrating snapshots\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshots }}\n    {%- endcall -%}\n\n    {% set migrate_snapshot_executions %}\n        insert into {{new_database}}.{{new_schema}}.snapshot_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'snapshot',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            snapshot_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__snapshot_executions\n    {% endset %}\n\n    {{ log(\"Migrating snapshot_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshot_executions }}\n    {%- endcall -%}\n\n    {% set migrate_sources %}\n        insert into {{new_database}}.{{new_schema}}.sources (\n            command_invocation_id,\n            database,\n            freshness,\n            identifier,\n            loaded_at_field,\n            loader,\n            name,\n            node_id,\n            schema,\n            source_name,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            node_database,\n            parse_json('[{\"error_after\":{\"count\":null,\"period\":null},\"filter\":null,\"warn_after\":{\"count\":null,\"period\":null}}]'),\n            name,\n            null,\n            source_loader,\n            name,\n            node_id,\n            source_schema,\n            source_name,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__sources\n    {% endset %}\n\n    {{ log(\"Migrating sources\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_sources }}\n    {%- endcall -%}\n\n    {{ log(\"Migration complete. You can now safely delete any data from before 1.0.0\", info=True) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8140805, "supported_languages": null}, "macro.dbt_artifacts.upload_invocations": {"name": "upload_invocations", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.upload_invocations", "macro_sql": "{% macro upload_invocations() -%}\n    {{ return(adapter.dispatch('get_invocations_dml_sql', 'dbt_artifacts')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_invocations_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.819544, "supported_languages": null}, "macro.dbt_artifacts.default__get_invocations_dml_sql": {"name": "default__get_invocations_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.default__get_invocations_dml_sql", "macro_sql": "{% macro default__get_invocations_dml_sql() -%}\n    {% set invocation_values %}\n    select\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }}, ''),\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(17)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(18)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(19)) }}\n    from values\n    (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        '{{ flags.FULL_REFRESH }}', {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: env_var(env_variable)}) %}\n            {% endfor %}\n            '{{ tojson(env_vars_dict) }}', {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: var(dbt_var)}) %}\n            {% endfor %}\n            '{{ tojson(dbt_vars_dict) }}', {# dbt_vars #}\n        {% else %}\n            null, {# dbt_vars #}\n        {% endif %}\n\n        '{{ tojson(invocation_args_dict) | replace('\\\\', '\\\\\\\\') }}', {# invocation_args #}\n        '{{ tojson(dbt_metadata_envs) }}' {# dbt_custom_envs #}\n\n    )\n    {% endset %}\n    {{ invocation_values }}\n\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8268096, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_invocations_dml_sql": {"name": "bigquery__get_invocations_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_invocations_dml_sql", "macro_sql": "{% macro bigquery__get_invocations_dml_sql() -%}\n    {% set invocation_values %}\n        (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        {{ flags.FULL_REFRESH }}, {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: env_var(env_variable)}) %}\n            {% endfor %}\n            parse_json('{{ tojson(env_vars_dict) }}'), {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: var(dbt_var)}) %}\n            {% endfor %}\n            parse_json('{{ tojson(dbt_vars_dict) }}'), {# dbt_vars #}\n        {% else %}\n            null, {# dbt_vars #}\n        {% endif %}\n\n        parse_json('{{ tojson(invocation_args_dict) }}'), {# invocation_args #}\n        parse_json('{{ tojson(dbt_metadata_envs) }}') {# dbt_custom_envs #}\n\n        )\n    {% endset %}\n    {{ invocation_values }}\n\n{% endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8303986, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8323781, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8341968, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.836372, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8394015, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8401875, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8405118, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8408244, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8417056, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.843125, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8444517, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8449278, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8453724, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.845801, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8461773, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8465693, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.847356, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.847878, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.848674, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.849953, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8512287, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8526878, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8532085, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8539932, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8559926, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8592222, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8598542, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.860429, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8631153, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8639095, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.865484, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8666072, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8672976, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8681638, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.869072, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8697627, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8704185, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8707442, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8720047, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8738222, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8750818, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8770514, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8778422, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8790207, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8808274, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8814323, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8826435, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.884393, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8866634, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8900738, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.891557, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8924985, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8929522, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8942003, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8952591, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.896907, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.8992, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.900241, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9012547, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.901685, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.902382, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9031389, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.907956, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.916301, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9172974, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9189801, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9198453, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9203455, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9213252, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9227629, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9245842, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9252274, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9256663, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9262466, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9268086, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9275928, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.928378, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9292986, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9307234, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9314775, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9325085, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9333942, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9342146, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9351275, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9365776, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9381578, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9401581, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.941356, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9431162, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.944073, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9450858, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9464679, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9484358, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9500594, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9524395, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9534905, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9543357, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9595199, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9629438, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9642057, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9649642, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9659874, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.966667, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9678292, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9688814, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.970702, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9729147, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9740903, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.975498, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.976887, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9786801, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9797144, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.980509, "supported_languages": null}, "macro.dbt_snowflake_query_tags.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9818423, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__set_query_tag": {"name": "default__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__set_query_tag", "macro_sql": "{% macro default__set_query_tag() -%}\n    {# Start with any model-configured dict #}\n    {% set query_tag = config.get('query_tag', default={}) %}\n\n    {% if query_tag is not mapping %}\n    {% do log(\"dbt-snowflake-query-tags warning: the query_tag config value of '{}' is not a mapping type, so is being ignored. If you'd like to add additional query tag information, use a mapping type instead, or remove it to avoid this message.\".format(query_tag), True) %}\n    {% set query_tag = {} %} {# If the user has set the query tag config as a non mapping type, start fresh #}\n    {% endif %}\n\n\n    {%- do query_tag.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.3.1',\n    ) -%}\n\n    {% if thread_id %}\n        {%- do query_tag.update(\n            thread_id=thread_id\n        ) -%}\n    {% endif %}\n\n\n    {# We have to bring is_incremental through here because its not available in the comment context #}\n    {% if model.resource_type == 'model' %}\n        {%- do query_tag.update(\n            is_incremental=is_incremental()\n        ) -%}\n    {% endif %}\n\n    {% set query_tag_json = tojson(query_tag) %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ query_tag_json ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(query_tag_json)) %}\n    {{ return(original_query_tag)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9840903, "supported_languages": null}, "macro.dbt_snowflake_query_tags.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9846876, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__unset_query_tag": {"name": "default__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__unset_query_tag", "macro_sql": "{% macro default__unset_query_tag(original_query_tag) -%}\n    {% if original_query_tag %}\n    {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n    {{ log(\"No original query_tag, unsetting parameter.\") }}\n    {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.9855301, "supported_languages": null}, "macro.dbt_snowflake_query_tags.get_query_comment": {"name": "get_query_comment", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_comment.sql", "original_file_path": "macros/query_comment.sql", "unique_id": "macro.dbt_snowflake_query_tags.get_query_comment", "macro_sql": "{% macro get_query_comment(node) %}\n    {%- set comment_dict = {} -%}\n    {%- do comment_dict.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.3.1',\n        dbt_version=dbt_version,\n        project_name=project_name,\n        target_name=target.name,\n        target_database=target.database,\n        target_schema=target.schema,\n        invocation_id=invocation_id\n    ) -%}\n\n    {%- if node is not none -%}\n        {%- do comment_dict.update(\n            node_name=node.name,\n            node_alias=node.alias,\n            node_package_name=node.package_name,\n            node_original_file_path=node.original_file_path,\n            node_database=node.database,\n            node_schema=node.schema,\n            node_id=node.unique_id,\n            node_resource_type=node.resource_type,\n            node_meta=node.config.meta,\n            node_tags=node.tags,\n            full_refresh=flags.FULL_REFRESH,\n            which=flags.WHICH,\n        ) -%}\n\n        {%- if flags.INVOCATION_COMMAND -%}\n            {%- do comment_dict.update(\n                invocation_command=flags.INVOCATION_COMMAND\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.resource_type != ('seed') -%} {# Otherwise this throws an error saying 'Seeds cannot depend on other nodes.' #}\n            {%- if node.refs is defined -%}\n                {% set refs = [] %}\n                {% for ref in node.refs %}\n                    {%- if dbt_version >= '1.5.0' -%}\n                        {%- do refs.append(ref.name) -%}\n                    {%- else -%}\n                        {%- do refs.append(ref[0]) -%}\n                    {%- endif -%}\n                {% endfor %}\n                {%- do comment_dict.update(\n                    node_refs=refs | unique | list\n                ) -%}\n            {%- endif -%}\n        {%- endif -%}\n        {%- if node.resource_type == 'model' -%}\n            {%- do comment_dict.update(\n                materialized=node.config.materialized,\n            ) -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_PROJECT_ID', False) -%}\n    {%- do comment_dict.update(\n        dbt_cloud_project_id=env_var('DBT_CLOUD_PROJECT_ID')\n    ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_JOB_ID', False) -%}\n    {%- do comment_dict.update(\n        dbt_cloud_job_id=env_var('DBT_CLOUD_JOB_ID')\n    ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_ID', False) -%}\n    {%- do comment_dict.update(\n        dbt_cloud_run_id=env_var('DBT_CLOUD_RUN_ID')\n    ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON_CATEGORY', False) -%}\n    {%- do comment_dict.update(\n        dbt_cloud_run_reason_category=env_var('DBT_CLOUD_RUN_REASON_CATEGORY')\n    ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON', False) -%}\n    {%- do comment_dict.update(\n        dbt_cloud_run_reason=env_var('DBT_CLOUD_RUN_REASON')\n    ) -%}\n    {%- endif -%}\n\n    {{ return(tojson(comment_dict)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341473.99237, "supported_languages": null}, "macro.dbt_constraints.redshift__create_primary_key": {"name": "redshift__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_primary_key", "macro_sql": "\n{%- macro redshift__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.001472, "supported_languages": null}, "macro.dbt_constraints.redshift__create_unique_key": {"name": "redshift__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_unique_key", "macro_sql": "\n{%- macro redshift__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.004276, "supported_languages": null}, "macro.dbt_constraints.redshift__create_not_null": {"name": "redshift__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_not_null", "macro_sql": "\n{%- macro redshift__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false, lookup_cache=none) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0050805, "supported_languages": null}, "macro.dbt_constraints.redshift__create_foreign_key": {"name": "redshift__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_foreign_key", "macro_sql": "\n{%- macro redshift__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- set query -%}\n                --Note: ON DELETE not supported in Redshift\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) --ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endset -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0088422, "supported_languages": null}, "macro.dbt_constraints.redshift__unique_constraint_exists": {"name": "redshift__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__unique_constraint_exists", "macro_sql": "\n{%- macro redshift__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0109951, "supported_languages": null}, "macro.dbt_constraints.redshift__foreign_key_exists": {"name": "redshift__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__foreign_key_exists", "macro_sql": "\n{%- macro redshift__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0130198, "supported_languages": null}, "macro.dbt_constraints.redshift__have_references_priv": {"name": "redshift__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__have_references_priv", "macro_sql": "{%- macro redshift__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.014416, "supported_languages": null}, "macro.dbt_constraints.redshift__have_ownership_priv": {"name": "redshift__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__have_ownership_priv", "macro_sql": "{%- macro redshift__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.015794, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_referential_constraints": {"name": "redshift__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__drop_referential_constraints", "macro_sql": "{% macro redshift__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- set query -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\" CASCADE\n        {%- endset -%}\n        {%- do run_query(query) -%}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0170405, "supported_languages": null}, "macro.dbt_constraints.redshift__truncate_relation": {"name": "redshift__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__truncate_relation", "macro_sql": "{% macro redshift__truncate_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.01754, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_relation": {"name": "redshift__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__drop_relation", "macro_sql": "{% macro redshift__drop_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.018019, "supported_languages": null}, "macro.dbt_constraints.default__test_primary_key": {"name": "default__test_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_primary_key", "macro_sql": "\n{%- macro default__test_primary_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"primary key\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns. In\n    addition, if the unique constraint was defined with PRIMARY KEY,\n    then it requires that none of the values in the specified column or\n    columns be the null value.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return for any duplicates and if any of the key columns is null -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}, count(*) as row_count\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n        {% for column in column_names -%}\n        or {{column}} is null\n        {% endfor %}\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0205054, "supported_languages": null}, "macro.dbt_constraints.default__test_unique_key": {"name": "default__test_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_unique_key", "macro_sql": "\n{%- macro default__test_unique_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"unique constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return any duplicates -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0211139, "supported_languages": null}, "macro.dbt_constraints.default__test_foreign_key": {"name": "default__test_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_foreign_key", "macro_sql": "\n{%- macro default__test_foreign_key(model, fk_column_names, pk_table_name, pk_column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"referential constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A referential constraint is satisfied if one of the following con-\n    ditions is true, depending on the <match option> specified in the\n    <referential constraint definition>:\n\n    -  If no <match type> was specified then, for each row R1 of the\n        referencing table, either at least one of the values of the\n        referencing columns in R1 shall be a null value, or the value of\n        each referencing column in R1 shall be equal to the value of the\n        corresponding referenced column in some row of the referenced\n        table.\"\n\nThe implications of this standard is that if one column is NULL in a compound foreign key, the other column\ndoes NOT need to match a row in a referenced unique key. This is implemented by first excluding any\nrows from the test that have a NULL value in any of the columns.\n#}\n\n{%- set fk_columns_list=dbt_constraints.get_quoted_column_list(fk_column_names, quote_columns) %}\n{%- set pk_columns_list=dbt_constraints.get_quoted_column_list(pk_column_names, quote_columns) %}\n{%- set fk_columns_csv=dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) %}\n{%- set pk_columns_csv=dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) %}\n{%- set join_conditions = [] -%}\n{%- for x in range(fk_columns_list|count) -%}\n    {%- set join_conditions = join_conditions.append( 'parent.' ~ pk_columns_list[x] ~ ' = child.' ~ fk_columns_list[x] ) -%}\n{%- endfor -%}\n\n{#- This test will return if all the columns are not null\n    and the values are not found in the referenced PK table #}\nwith child as (\n  select\n    {{fk_columns_csv}}\n  from {{model}}\n  where 1=1\n        {% for column in fk_columns_list -%}\n        and {{column}} is not null\n        {% endfor %}\n),\n\nparent as (\n    select\n        {{pk_columns_csv}}\n    from {{pk_table_name}}\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on {{join_conditions | join(' and ')}}\n\n    where parent.{{pk_columns_list | first}} is null\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.023159, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_list": {"name": "get_quoted_column_list", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.get_quoted_column_list", "macro_sql": "{%- macro get_quoted_column_list(column_array, quote_columns=false) -%}\n\n    {%- if not quote_columns -%}\n        {%- set column_list=column_array -%}\n    {%- elif quote_columns -%}\n        {%- set column_list=[] -%}\n        {%- for column in column_array -%}\n            {%- set column_list = column_list.append( adapter.quote(column) ) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\n            \"`quote_columns` argument must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n        ) }}\n    {%- endif -%}\n\n    {{ return(column_list) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.024324, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_csv": {"name": "get_quoted_column_csv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.get_quoted_column_csv", "macro_sql": "{%- macro get_quoted_column_csv(column_array, quote_columns=false) -%}\n\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n    {%- set columns_csv=column_list | join(', ') -%}\n    {{ return(columns_csv) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0249527, "supported_languages": null}, "macro.dbt_constraints.postgres__create_primary_key": {"name": "postgres__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_primary_key", "macro_sql": "\n{%- macro postgres__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0346582, "supported_languages": null}, "macro.dbt_constraints.postgres__create_unique_key": {"name": "postgres__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_unique_key", "macro_sql": "\n{%- macro postgres__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0377128, "supported_languages": null}, "macro.dbt_constraints.postgres__create_not_null": {"name": "postgres__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_not_null", "macro_sql": "\n{%- macro postgres__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false, lookup_cache=none) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"ALTER COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- call statement('add_nn', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{table_relation}} {{ modify_statement_csv }};\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.039876, "supported_languages": null}, "macro.dbt_constraints.postgres__create_foreign_key": {"name": "postgres__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_foreign_key", "macro_sql": "\n{%- macro postgres__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.043715, "supported_languages": null}, "macro.dbt_constraints.postgres__unique_constraint_exists": {"name": "postgres__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__unique_constraint_exists", "macro_sql": "\n{%- macro postgres__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as constraint_name\n        , upper(col.attname) as column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('p', 'u')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0457852, "supported_languages": null}, "macro.dbt_constraints.postgres__foreign_key_exists": {"name": "postgres__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__foreign_key_exists", "macro_sql": "\n{%- macro postgres__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as fk_name\n        , upper(col.attname) as fk_column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('f')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by fk_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0478015, "supported_languages": null}, "macro.dbt_constraints.postgres__have_references_priv": {"name": "postgres__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__have_references_priv", "macro_sql": "{%- macro postgres__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0492196, "supported_languages": null}, "macro.dbt_constraints.postgres__have_ownership_priv": {"name": "postgres__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__have_ownership_priv", "macro_sql": "{%- macro postgres__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0506084, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_referential_constraints": {"name": "postgres__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__drop_referential_constraints", "macro_sql": "{% macro postgres__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT IF EXISTS \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.051965, "supported_languages": null}, "macro.dbt_constraints.postgres__truncate_relation": {"name": "postgres__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__truncate_relation", "macro_sql": "{% macro postgres__truncate_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0524738, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_relation": {"name": "postgres__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__drop_relation", "macro_sql": "{% macro postgres__drop_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0529604, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_primary_key": {"name": "snowflake__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_primary_key", "macro_sql": "\n{%- macro snowflake__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0641744, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_unique_key": {"name": "snowflake__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_unique_key", "macro_sql": "\n{%- macro snowflake__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0666113, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_foreign_key": {"name": "snowflake__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_foreign_key", "macro_sql": "\n{%- macro snowflake__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) RELY\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0699801, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_not_null": {"name": "snowflake__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_not_null", "macro_sql": "\n{%- macro snowflake__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n\n    {%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n    {%- set columns_to_change = [] -%}\n    {%- for column_name in column_names if column_name not in existing_not_null_col -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endfor -%}\n    {%- if columns_to_change|count > 0 -%}\n        {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set modify_statements= [] -%}\n                {%- for column in columns_list -%}\n                    {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n                {%- endfor -%}\n                {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n                {%- set query -%}\n                    ALTER TABLE {{table_relation}} MODIFY {{ modify_statement_csv }};\n                {%- endset -%}\n                {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n                {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0735967, "supported_languages": null}, "macro.dbt_constraints.snowflake__unique_constraint_exists": {"name": "snowflake__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__unique_constraint_exists", "macro_sql": "\n{%- macro snowflake__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.unique_keys -%}\n        {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n        {%- for cached_columns in cached_unique_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW UNIQUE KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW PRIMARY KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0783768, "supported_languages": null}, "macro.dbt_constraints.snowflake__foreign_key_exists": {"name": "snowflake__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__foreign_key_exists", "macro_sql": "\n{%- macro snowflake__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.foreign_keys -%}\n        {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n        {%- for cached_columns in cached_foreign_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW IMPORTED KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.08155, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_references_priv": {"name": "snowflake__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__have_references_priv", "macro_sql": "{%- macro snowflake__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0825737, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_ownership_priv": {"name": "snowflake__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__have_ownership_priv", "macro_sql": "{%- macro snowflake__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0835013, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_privileges": {"name": "snowflake__lookup_table_privileges", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__lookup_table_privileges", "macro_sql": "{%- macro snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n    {%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- set lookup_query -%}\n        select distinct\n            upper(tp.table_schema) as \"table_schema\",\n            upper(tp.table_name) as \"table_name\",\n            tp.privilege_type as \"privilege_type\"\n        from {{table_relation.database}}.information_schema.table_privileges tp\n        where is_role_in_session(tp.grantee)\n            and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n    {%- set tab_priv_list = [] -%}\n    {%- set schema_name = table_relation.schema|upper -%}\n    {%- set table_name = table_relation.identifier|upper -%}\n    {%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0855489, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_columns": {"name": "snowflake__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__lookup_table_columns", "macro_sql": "{%- macro snowflake__lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n        SHOW COLUMNS IN TABLE {{table_relation}}\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['null?'] == 'false' -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0874531, "supported_languages": null}, "macro.dbt_constraints.test_primary_key": {"name": "test_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_primary_key", "macro_sql": "\n\n{%- test primary_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_primary_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_primary_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.0975053, "supported_languages": null}, "macro.dbt_constraints.test_unique_key": {"name": "test_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_unique_key", "macro_sql": "{%- test unique_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_unique_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_unique_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.098424, "supported_languages": null}, "macro.dbt_constraints.test_foreign_key": {"name": "test_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_foreign_key", "macro_sql": "{%- test foreign_key(model,\n        column_name=none, fk_column_name=none, fk_column_names=[],\n        pk_table_name=none, to=none,\n        pk_column_name=none, pk_column_names=[], field=none,\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if pk_column_names|count == 0 and (pk_column_name or field) -%}\n        {%- do pk_column_names.append( (pk_column_name or field) ) -%}\n    {%- endif -%}\n    {%- if fk_column_names|count == 0 and (fk_column_name or column_name) -%}\n        {%- do fk_column_names.append( (fk_column_name or column_name) ) -%}\n    {%- endif -%}\n    {%- set pk_table_name = pk_table_name or to -%}\n\n    {{ return(adapter.dispatch('test_foreign_key', 'dbt_constraints')(model, fk_column_names, pk_table_name, pk_column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1002474, "supported_languages": null}, "macro.dbt_constraints.create_primary_key": {"name": "create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_primary_key", "macro_sql": "\n\n{%- macro create_primary_key(table_model, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {{ return(adapter.dispatch('create_primary_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_primary_key"]}, "description": "Calls the adapter-specific version of the macro to create a primary key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1695341479.710277, "supported_languages": null}, "macro.dbt_constraints.create_unique_key": {"name": "create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_unique_key", "macro_sql": "{%- macro create_unique_key(table_model, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {{ return(adapter.dispatch('create_unique_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_unique_key"]}, "description": "Calls the adapter-specific version of the macro to create a unique key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1695341479.7137356, "supported_languages": null}, "macro.dbt_constraints.create_foreign_key": {"name": "create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_foreign_key", "macro_sql": "{%- macro create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {{ return(adapter.dispatch('create_foreign_key', 'dbt_constraints')(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_foreign_key"]}, "description": "Calls the adapter-specific version of the macro to create a foreign key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "test_model", "type": "results node", "description": "Accepts the result node of the test related to this constraint"}, {"name": "pk_model", "type": "graph node", "description": "Accepts the graph node of the parent table that has a PK or UK"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the FK reference"}, {"name": "fk_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "fk_column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1695341479.7195425, "supported_languages": null}, "macro.dbt_constraints.create_not_null": {"name": "create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_not_null", "macro_sql": "{%- macro create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n    {{ return(adapter.dispatch('create_not_null', 'dbt_constraints')(table_relation, column_names, verify_permissions, quote_columns, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1029863, "supported_languages": null}, "macro.dbt_constraints.unique_constraint_exists": {"name": "unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.unique_constraint_exists", "macro_sql": "\n\n{%- macro unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('unique_constraint_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__unique_constraint_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a PK or UK already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1695341479.721602, "supported_languages": null}, "macro.dbt_constraints.foreign_key_exists": {"name": "foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.foreign_key_exists", "macro_sql": "{%- macro foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('foreign_key_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__foreign_key_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a foreign key already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1695341479.7236357, "supported_languages": null}, "macro.dbt_constraints.have_references_priv": {"name": "have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.have_references_priv", "macro_sql": "\n\n{%- macro have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_references_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1045105, "supported_languages": null}, "macro.dbt_constraints.have_ownership_priv": {"name": "have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.have_ownership_priv", "macro_sql": "{%- macro have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_ownership_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache)) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1050212, "supported_languages": null}, "macro.dbt_constraints.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1054025, "supported_languages": null}, "macro.dbt_constraints.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.105783, "supported_languages": null}, "macro.dbt_constraints.create_constraints": {"name": "create_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_constraints", "macro_sql": "\n{%- macro create_constraints(\n        constraint_types=[\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships',\n            'not_null'],\n        quote_columns=false) -%}\n    {%- if execute and var('dbt_constraints_enabled', false) and results -%}\n        {%- do log(\"Running dbt Constraints\", info=true) -%}\n\n        {%- set lookup_cache = {\n            \"table_columns\": { },\n            \"table_privileges\": { },\n            \"unique_keys\": { },\n            \"not_null_col\": { },\n            \"foreign_keys\": { } } -%}\n\n        {%- if 'not_null' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['not_null'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'primary_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['primary_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_combination_of_columns' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_combination_of_columns'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'foreign_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['foreign_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'relationships' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['relationships'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n\n        {%- do log(\"Finished dbt Constraints\", info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.create_constraints_by_type"]}, "description": "Primary macro automatically called `on-run-end` to generate primary keys, unique keys, and foreign keys. The `dbt_constraints_enabled` variable can be set to `false` in your project to disable this macro.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "constraint_types", "type": "array of constraint types", "description": "Accepts a list of tests to consider for constraint creation and whether columns should be quoted. By default it will create all the constraint types. Valid values are ['primary_key', 'unique_key', 'unique_combination_of_columns', 'unique', 'foreign_key', 'relationships']"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1695341479.7065334, "supported_languages": null}, "macro.dbt_constraints.create_constraints_by_type": {"name": "create_constraints_by_type", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_constraints_by_type", "macro_sql": "\n{%- macro create_constraints_by_type(constraint_types, quote_columns, lookup_cache) -%}\n\n    {#- Loop through the results and find all tests that passed and match the constraint_types -#}\n    {#- Issue #2: added condition that the where config must be empty -#}\n    {%- for res in results\n        if res.status == \"pass\"\n            and res.node.config.materialized == \"test\"\n            and res.node.test_metadata\n            and res.node.test_metadata.name is in( constraint_types )\n            and res.node.config.where is none -%}\n\n        {%- set test_model = res.node -%}\n        {%- set test_parameters = test_model.test_metadata.kwargs -%}\n        {% set ns = namespace(verify_permissions=false) %}\n\n        {#- Find the table models that are referenced by this test.\n            These models must be physical tables and cannot be sources -#}\n        {%- set table_models = [] -%}\n        {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes)\n                if node.resource_type in ( ( \"model\", \"snapshot\", \"seed\") )\n                    if node.config.materialized in( (\"table\", \"incremental\", \"snapshot\", \"seed\") ) -%}\n\n                        {#- Append to our list of models &or snapshots for this test -#}\n                        {%- do table_models.append(node) -%}\n\n        {% endfor %}\n\n        {#- Check if we allow constraints on sources overall and for this specific type of constraint -#}\n        {%- if var('dbt_constraints_sources_enabled', false) and (\n                ( var('dbt_constraints_sources_pk_enabled', false) and test_model.test_metadata.name in(\"primary_key\") )\n             or ( var('dbt_constraints_sources_uk_enabled', false) and test_model.test_metadata.name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\") )\n             or ( var('dbt_constraints_sources_fk_enabled', false) and test_model.test_metadata.name in(\"foreign_key\", \"relationships\") )\n             or ( var('dbt_constraints_sources_nn_enabled', false) and test_model.test_metadata.name in(\"not_null\") )\n            ) -%}\n            {%- for node in graph.sources.values()\n                | selectattr(\"resource_type\", \"equalto\", \"source\")\n                | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes) -%}\n\n                    {%- do node.update({'alias': node.alias or node.name }) -%}\n                    {#- Append to our list of models for this test -#}\n                    {%- do table_models.append(node) -%}\n                    {#- If we are using a sources, we will need to verify permissions -#}\n                    {%- set ns.verify_permissions = true -%}\n\n            {%- endfor -%}\n        {%- endif -%}\n\n\n        {#- We only create PK/UK if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- if 1 == table_models|count\n            and test_model.test_metadata.name in(\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for primary/unique key constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                {%- if test_model.test_metadata.name == \"primary_key\" -%}\n                    {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache) -%}\n                    {%- do dbt_constraints.create_primary_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_unique_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping primary/unique key because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create FK if there are two models referenced by the test\n            and if all the columns exist as physical columns on the tables -#}\n        {%- elif 2 == table_models|count\n            and test_model.test_metadata.name in( \"foreign_key\", \"relationships\") -%}\n\n            {%- set fk_model = none -%}\n            {%- set pk_model = none -%}\n            {%- set fk_model_names = modules.re.findall( \"(models|snapshots|seeds)\\W+(\\w+)\" , test_model.file_key_name)  -%}\n            {%- set fk_source_names = modules.re.findall( \"source\\W+(\\w+)\\W+(\\w+)\" , test_parameters.model)  -%}\n\n            {%- if 1 == fk_model_names | count -%}\n                {%- set fk_model = table_models | selectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n                {%- set pk_model = table_models | rejectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n            {%- elif 1 == fk_source_names | count  -%}\n                {%- if table_models[0].source_name == fk_source_names[0][0] and table_models[0].name == fk_source_names[0][1] -%}\n                    {%- set fk_model = table_models[0] -%}\n                    {%- set pk_model = table_models[1] -%}\n                {%- else  -%}\n                    {%- set fk_model = table_models[1] -%}\n                    {%- set pk_model = table_models[0] -%}\n                {%- endif -%}\n            {%- endif -%}\n            {# {%- set fk_model_name = test_model.file_key_name |replace(\"models.\", \"\") -%} #}\n\n            {%- if fk_model and pk_model -%}\n\n                {%- set fk_table_relation = api.Relation.create(\n                    database=fk_model.database,\n                    schema=fk_model.schema,\n                    identifier=fk_model.alias) -%}\n\n                {%- set pk_table_relation = api.Relation.create(\n                    database=pk_model.database,\n                    schema=pk_model.schema,\n                    identifier=pk_model.alias) -%}\n\n                {# Attempt to identify parameters we can use for the column names #}\n                {%- set pk_column_names = [] -%}\n                {%- if  test_parameters.pk_column_names -%}\n                    {%- set pk_column_names = test_parameters.pk_column_names -%}\n                {%- elif  test_parameters.field -%}\n                    {%- set pk_column_names = [test_parameters.field] -%}\n                {%- elif test_parameters.pk_column_name -%}\n                    {%- set pk_column_names = [test_parameters.pk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`pk_column_names`, `pk_column_name`, or `field` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- set fk_column_names = [] -%}\n                {%- if  test_parameters.fk_column_names -%}\n                    {%- set fk_column_names = test_parameters.fk_column_names -%}\n                {%- elif test_parameters.column_name -%}\n                    {%- set fk_column_names = [test_parameters.column_name] -%}\n                {%- elif test_parameters.fk_column_name -%}\n                    {%- set fk_column_names = [test_parameters.fk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`fk_column_names`, `fk_column_name`, or `column_name` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- if not dbt_constraints.table_columns_all_exist(pk_table_relation, pk_column_names, lookup_cache) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the pk table: \" ~ pk_model.name ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- elif not dbt_constraints.table_columns_all_exist(fk_table_relation, fk_column_names, lookup_cache) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the fk table: \" ~ fk_model.name ~ \" \" ~ fk_column_names, info=true) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping foreign key because a we couldn't find the child table: model=\" ~ fk_model_names ~ \" or source=\" ~ fk_source_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create NN if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- elif 1 == table_models|count\n            and test_model.test_metadata.name in(\"not_null\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for not null constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache) -%}\n            {%- else  -%}\n                {%- do log(\"Skipping not null constraint because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.table_columns_all_exist", "macro.dbt_constraints.create_not_null", "macro.dbt_constraints.create_primary_key", "macro.dbt_constraints.create_unique_key", "macro.dbt_constraints.create_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1256661, "supported_languages": null}, "macro.dbt_constraints.table_columns_all_exist": {"name": "table_columns_all_exist", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.table_columns_all_exist", "macro_sql": "\n{%- macro table_columns_all_exist(table_relation, column_list, lookup_cache) -%}\n    {%- set tab_column_list = dbt_constraints.lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- for column in column_list|map('upper') if column not in tab_column_list -%}\n        {{ return(false) }}\n    {%- endfor -%}\n    {{ return(true) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1265657, "supported_languages": null}, "macro.dbt_constraints.lookup_table_columns": {"name": "lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.lookup_table_columns", "macro_sql": "{%- macro lookup_table_columns(table_relation, lookup_cache) -%}\n    {{ return(adapter.dispatch('lookup_table_columns', 'dbt_constraints')(table_relation, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1271565, "supported_languages": null}, "macro.dbt_constraints.default__lookup_table_columns": {"name": "default__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.default__lookup_table_columns", "macro_sql": "{%- macro default__lookup_table_columns(table_relation, lookup_cache) -%}\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set tab_Columns = adapter.get_columns_in_relation(table_relation) -%}\n\n        {%- set tab_column_list = [] -%}\n        {%- for column in tab_Columns -%}\n            {{ tab_column_list.append(column.name|upper) }}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: tab_column_list }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.128307, "supported_languages": null}, "macro.dbt_constraints.column_list_matches": {"name": "column_list_matches", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.column_list_matches", "macro_sql": "\n{%- macro column_list_matches(listA, listB) -%}\n    {# Test if A is empty or the lists are not the same size #}\n    {%- if listA | count > 0 and listA | count == listB | count  -%}\n        {# Fail if there are any columns in A that are not in B #}\n        {%- for valueFromA in listA|map('upper') -%}\n            {%- if valueFromA|upper not in listB| map('upper')  -%}\n                {{ return(false) }}\n            {%- endif -%}\n        {% endfor %}\n        {# Since we know the count is the same, A must equal B #}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1294682, "supported_languages": null}, "macro.dbt_constraints.oracle__create_primary_key": {"name": "oracle__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_primary_key", "macro_sql": "\n{%- macro oracle__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'PK_' ||  ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1377008, "supported_languages": null}, "macro.dbt_constraints.oracle__create_unique_key": {"name": "oracle__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_unique_key", "macro_sql": "\n{%- macro oracle__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1405246, "supported_languages": null}, "macro.dbt_constraints.oracle__create_foreign_key": {"name": "oracle__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_foreign_key", "macro_sql": "\n{%- macro oracle__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1442819, "supported_languages": null}, "macro.dbt_constraints.oracle__create_not_null": {"name": "oracle__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_not_null", "macro_sql": "\n{%- macro oracle__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( column ~ \" NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} MODIFY ( {{ modify_statement_csv }} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1462612, "supported_languages": null}, "macro.dbt_constraints.oracle__unique_constraint_exists": {"name": "oracle__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__unique_constraint_exists", "macro_sql": "\n{%- macro oracle__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"constraint_name\",\n    upper(cols.column_name) as \"column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'P', 'U' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1482916, "supported_languages": null}, "macro.dbt_constraints.oracle__foreign_key_exists": {"name": "oracle__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__foreign_key_exists", "macro_sql": "\n{%- macro oracle__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"fk_name\",\n    upper(cols.column_name) as \"fk_column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'R' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1502857, "supported_languages": null}, "macro.dbt_constraints.oracle__have_references_priv": {"name": "oracle__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__have_references_priv", "macro_sql": "\n{%- macro oracle__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.150634, "supported_languages": null}, "macro.dbt_constraints.oracle__have_ownership_priv": {"name": "oracle__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__have_ownership_priv", "macro_sql": "\n{%- macro oracle__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1509485, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_referential_constraints": {"name": "oracle__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__drop_referential_constraints", "macro_sql": "{% macro oracle__drop_referential_constraints(relation) -%}\n    {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1514857, "supported_languages": null}, "macro.dbt_constraints.oracle__truncate_relation": {"name": "oracle__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n    {%- do log(\"Truncating table \" ~ relation, info=true) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.oracle__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1521578, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_relation": {"name": "oracle__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n    {%- do log(\"Dropping table \" ~ relation, info=true) -%}\n        {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\n    FOR REC IN (\n        SELECT owner, table_name\n        FROM all_tables\n        WHERE upper(owner) = '{{relation.schema|upper}}'\n            AND upper(table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'DROP TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" CASCADE CONSTRAINTS';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop table: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1530628, "supported_languages": null}, "macro.dbtvault.materialization_pit_incremental_default": {"name": "materialization_pit_incremental_default", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/incremental_pit_materialization.sql", "original_file_path": "macros/materialisations/incremental_pit_materialization.sql", "unique_id": "macro.dbtvault.materialization_pit_incremental_default", "macro_sql": "\n\n{%- materialization pit_incremental, default -%}\n\n  {%- set full_refresh_mode = should_full_refresh() -%}\n\n  {% if target.type == \"sqlserver\" %}\n      {%- set target_relation = this.incorporate(type='table') -%}\n  {%  else %}\n      {%- set target_relation = this -%}\n  {% endif %}\n  {%- set existing_relation = load_relation(this) -%}\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {%- set to_drop = [] -%}\n  {%- if existing_relation is none -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\n      {%- do adapter.drop_relation(backup_relation) -%}\n\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n      {%- do to_drop.append(backup_relation) -%}\n  {%- else -%}\n\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\n      {%- do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) -%}\n      {%- set build_sql = dbtvault.incremental_pit_replace(tmp_relation, target_relation) -%}\n{%- endif -%}\n\n  {%- call statement(\"main\") -%}\n      {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {%- do adapter.commit() -%}\n\n  {%- for rel in to_drop -%}\n      {%- do adapter.drop_relation(rel) -%}\n  {%- endfor -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbtvault.incremental_pit_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.158188, "supported_languages": ["sql"]}, "macro.dbtvault.materialization_bridge_incremental_default": {"name": "materialization_bridge_incremental_default", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/incremental_bridge_materialization.sql", "original_file_path": "macros/materialisations/incremental_bridge_materialization.sql", "unique_id": "macro.dbtvault.materialization_bridge_incremental_default", "macro_sql": "\n\n{%- materialization bridge_incremental, default -%}\n\n  {%- set full_refresh_mode = should_full_refresh() -%}\n\n  {% if target.type == \"sqlserver\" %}\n      {%- set target_relation = this.incorporate(type='table') -%}\n  {%  else %}\n      {%- set target_relation = this -%}\n  {% endif %}\n  {%- set existing_relation = load_relation(this) -%}\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {%- set to_drop = [] -%}\n  {%- if existing_relation is none -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\n      {%- do adapter.drop_relation(backup_relation) -%}\n\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n      {%- do to_drop.append(backup_relation) -%}\n  {%- else -%}\n\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\n      {%- do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) -%}\n      {%- set build_sql = dbtvault.incremental_bridge_replace(tmp_relation, target_relation) -%}\n{%- endif -%}\n\n  {%- call statement(\"main\") -%}\n      {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {%- do adapter.commit() -%}\n\n  {%- for rel in to_drop -%}\n      {%- do adapter.drop_relation(rel) -%}\n  {%- endfor -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbtvault.incremental_bridge_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1649706, "supported_languages": ["sql"]}, "macro.dbtvault.materialization_vault_insert_by_period_default": {"name": "materialization_vault_insert_by_period_default", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/vault_insert_by_period_materialization.sql", "original_file_path": "macros/materialisations/vault_insert_by_period_materialization.sql", "unique_id": "macro.dbtvault.materialization_vault_insert_by_period_default", "macro_sql": "{% materialization vault_insert_by_period, default -%}\n\n    {% if target.type == \"postgres\" and execute %}\n        {{ exceptions.raise_compiler_error(\"The vault_insert_by_period materialisation is currently unavailable on Postgres.\") }}\n    {% endif %}\n\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n    {% if target.type == \"sqlserver\" %}\n        {%- set target_relation = this.incorporate(type='table') -%}\n    {%  else %}\n        {%- set target_relation = this -%}\n    {% endif %}\n    {%- set existing_relation = load_relation(this) -%}\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n    {%- set timestamp_field = config.require('timestamp_field') -%}\n    {%- set date_source_models = config.get('date_source_models', default=none) -%}\n\n    {%- set start_stop_dates = dbtvault.get_start_stop_dates(timestamp_field, date_source_models) | as_native -%}\n\n    {%- set period = config.get('period', default='day') -%}\n    {%- set to_drop = [] -%}\n\n    {%- do dbtvault.check_placeholder(sql) -%}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% if existing_relation is none %}\n\n        {% set filtered_sql = dbtvault.replace_placeholder_with_period_filter(sql, timestamp_field,\n                                                                       start_stop_dates.start_date,\n                                                                       start_stop_dates.stop_date,\n                                                                       0, period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n        {% do to_drop.append(tmp_relation) %}\n\n    {% elif existing_relation.is_view %}\n\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_period).\") }}\n        {% do adapter.drop_relation(existing_relation) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n        {% set filtered_sql = dbtvault.replace_placeholder_with_period_filter(sql, timestamp_field,\n                                                                       start_stop_dates.start_date,\n                                                                       start_stop_dates.stop_date,\n                                                                       0, period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n    {% elif full_refresh_mode %}\n        {% set filtered_sql = dbtvault.replace_placeholder_with_period_filter(sql, timestamp_field,\n                                                                       start_stop_dates.start_date,\n                                                                       start_stop_dates.stop_date,\n                                                                       0, period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n    {% else %}\n        {% set period_boundaries = dbtvault.get_period_boundaries(target_relation,\n                                                                  timestamp_field,\n                                                                  start_stop_dates.start_date,\n                                                                  start_stop_dates.stop_date,\n                                                                  period) %}\n\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n        {% for i in range(period_boundaries.num_periods) -%}\n\n            {%- set iteration_number = i + 1 -%}\n\n            {%- set period_of_load = dbtvault.get_period_of_load(period, i, period_boundaries.start_timestamp) -%}\n\n            {{ dbt_utils.log_info(\"Running for {} {} of {} ({}) [{}]\".format(period, iteration_number, period_boundaries.num_periods, period_of_load, model.unique_id)) }}\n\n            {% set tmp_relation = make_temp_relation(target_relation) %}\n\n            {% set tmp_table_sql = dbtvault.get_period_filter_sql(target_cols_csv, sql, timestamp_field, period,\n                                                                  period_boundaries.start_timestamp,\n                                                                  period_boundaries.stop_timestamp, i) %}\n\n\n\n            {# This call statement drops and then creates a temporary table #}\n            {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\n            {# See MSSQL note and drop code below #}\n\n            {# [ ] TODO check dbt postgres implementation for a possible fix #}\n            {% call statement() -%}\n                {{ create_table_as(True, tmp_relation, tmp_table_sql) }}\n            {%- endcall %}\n\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                                  to_relation=target_relation) }}\n\n            {%- set insert_query_name = 'main-' ~ i -%}\n            {% call statement(insert_query_name, fetch_result=True) -%}\n                INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\n                (\n                    SELECT {{ target_cols_csv }}\n                    FROM {{ tmp_relation.include(schema=True) }}\n                );\n            {%- endcall %}\n\n            {% set result = load_result(insert_query_name) %}\n\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n                {%- if not result['response']['rows_affected'] %}\n                    {% if target.type == \"databricks\" and result['data'] | length > 0 %}\n                        {% set rows_inserted = result['data'][0][1] | int %}\n                    {% else %}\n                        {% set rows_inserted = 0 %}\n                    {% endif %}\n                {%- else %}\n                    {% set rows_inserted = result['response']['rows_affected'] %}\n                {%- endif %}\n            {% else %} {# older versions #}\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n            {% endif %}\n\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\n\n            {{ dbt_utils.log_info(\"Ran for {} {} of {} ({}); {} records inserted [{}]\".format(period, iteration_number,\n                                                                                              period_boundaries.num_periods,\n                                                                                              period_of_load, rows_inserted,\n                                                                                              model.unique_id)) }}\n\n            {# In databricks and sqlserver a temporary view/table can only be dropped by #}\n            {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\n            {% if target.type in ['databricks', 'sqlserver'] %}\n                {{ dbtvault.drop_temporary_special(tmp_relation) }}\n            {% else %}\n                {% do to_drop.append(tmp_relation) %}\n            {% endif %}\n\n            {% do adapter.commit() %}\n\n        {% endfor %}\n\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\n            {{ tmp_table_sql }}\n        {%- endcall %}\n\n    {% endif %}\n\n    {% if build_sql is defined %}\n        {% call statement(\"main\", fetch_result=True) %}\n            {{ build_sql }}\n        {% endcall %}\n\n        {% set result = load_result('main') %}\n\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n            {%- if not result['response']['rows_affected'] %}\n                {% if target.type == \"databricks\" and result['data'] | length > 0 %}\n                    {% set rows_inserted = result['data'][0][1] | int %}\n                {% else %}\n                    {% set rows_inserted = 0 %}\n                {% endif %}\n            {%- else %}\n                {% set rows_inserted = result['response']['rows_affected'] %}\n            {%- endif %}\n        {% else %} {# older versions #}\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n        {% endif %}\n\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\n            {{ build_sql }}\n        {%- endcall %}\n\n        -- `COMMIT` happens here\n        {% do adapter.commit() %}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {% for rel in to_drop %}\n        {% if rel.type is not none %}\n            {% do adapter.drop_relation(rel) %}\n        {% endif %}\n    {% endfor %}\n\n    {% set target_relation = target_relation.incorporate(type='table') %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbtvault.get_start_stop_dates", "macro.dbtvault.check_placeholder", "macro.dbt.run_hooks", "macro.dbtvault.replace_placeholder_with_period_filter", "macro.dbt.create_table_as", "macro.dbtvault.get_period_boundaries", "macro.dbtvault.get_period_of_load", "macro.dbt_utils.log_info", "macro.dbtvault.get_period_filter_sql", "macro.dbt.statement", "macro.dbtvault.drop_temporary_special", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1919749, "supported_languages": ["sql"]}, "macro.dbtvault.drop_temporary_special": {"name": "drop_temporary_special", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/drop_temporary.sql", "original_file_path": "macros/materialisations/drop_temporary.sql", "unique_id": "macro.dbtvault.drop_temporary_special", "macro_sql": "{% macro drop_temporary_special(tmp_relation) %}\n    {# In databricks and sqlserver a temporary view/table can only be dropped by #}\n    {# the connection or session that created it so drop it now before the commit below closes this session #}\n\n    {%- set drop_query_name = 'DROP_QUERY-' ~ i -%}\n    {% call statement(drop_query_name, fetch_result=True) -%}\n        {% if target.type == 'databricks' %}\n            DROP VIEW {{ tmp_relation }};\n        {% elif target.type == 'sqlserver' %}\n            DROP TABLE {{ tmp_relation }};\n        {% endif %}\n    {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1932087, "supported_languages": null}, "macro.dbtvault.incremental_pit_replace": {"name": "incremental_pit_replace", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.dbtvault.incremental_pit_replace", "macro_sql": "{% macro incremental_pit_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    TRUNCATE TABLE {{ target_relation }};\n\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       SELECT {{ dest_cols_csv }}\n       FROM {{ tmp_relation }}\n    );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1945672, "supported_languages": null}, "macro.dbtvault.incremental_bridge_replace": {"name": "incremental_bridge_replace", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.dbtvault.incremental_bridge_replace", "macro_sql": "{% macro incremental_bridge_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    TRUNCATE TABLE {{ target_relation }};\n\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       SELECT {{ dest_cols_csv }}\n       FROM {{ tmp_relation }}\n    );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1954045, "supported_languages": null}, "macro.dbtvault.is_any_incremental": {"name": "is_any_incremental", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.dbtvault.is_any_incremental", "macro_sql": "\n\n{%- macro is_any_incremental() -%}\n    {%- if dbtvault.is_vault_insert_by_period() or dbtvault.is_vault_insert_by_rank() or dbtvault.is_pit_incremental() or dbtvault.is_bridge_incremental() or is_incremental() -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbtvault.is_vault_insert_by_period", "macro.dbtvault.is_vault_insert_by_rank", "macro.dbtvault.is_pit_incremental", "macro.dbtvault.is_bridge_incremental", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1973796, "supported_languages": null}, "macro.dbtvault.is_vault_insert_by_period": {"name": "is_vault_insert_by_period", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.dbtvault.is_vault_insert_by_period", "macro_sql": "{% macro is_vault_insert_by_period() %}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'vault_insert_by_period'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.1984053, "supported_languages": null}, "macro.dbtvault.is_vault_insert_by_rank": {"name": "is_vault_insert_by_rank", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.dbtvault.is_vault_insert_by_rank", "macro_sql": "{% macro is_vault_insert_by_rank() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'vault_insert_by_rank'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.199454, "supported_languages": null}, "macro.dbtvault.is_bridge_incremental": {"name": "is_bridge_incremental", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.dbtvault.is_bridge_incremental", "macro_sql": "{% macro is_bridge_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'bridge_incremental'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2005246, "supported_languages": null}, "macro.dbtvault.is_pit_incremental": {"name": "is_pit_incremental", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.dbtvault.is_pit_incremental", "macro_sql": "{% macro is_pit_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'pit_incremental'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.201573, "supported_languages": null}, "macro.dbtvault.check_placeholder": {"name": "check_placeholder", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/shared_helpers.sql", "original_file_path": "macros/materialisations/shared_helpers.sql", "unique_id": "macro.dbtvault.check_placeholder", "macro_sql": "\n\n{%- macro check_placeholder(model_sql, placeholder='__PERIOD_FILTER__') -%}\n\n    {%- if model_sql.find(placeholder) == -1 -%}\n    {%- set error_message -%}\n    Model '{{ model.unique_id }}' does not include the required string '{{ placeholder }}' in its sql\n        {%- endset -%}\n        {{- exceptions.raise_compiler_error(error_message) -}}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2025304, "supported_languages": null}, "macro.dbtvault.materialization_vault_insert_by_rank_default": {"name": "materialization_vault_insert_by_rank_default", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/vault_insert_by_rank_materialization.sql", "original_file_path": "macros/materialisations/vault_insert_by_rank_materialization.sql", "unique_id": "macro.dbtvault.materialization_vault_insert_by_rank_default", "macro_sql": "{% materialization vault_insert_by_rank, default -%}\n\n    {% if target.type == \"postgres\" and execute %}\n        {{ exceptions.raise_compiler_error(\"The vault_insert_by_rank materialisation is currently unavailable on Postgres.\") }}\n    {% endif %}\n\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n    {% if target.type == \"sqlserver\" %}\n        {%- set target_relation = this.incorporate(type='table') -%}\n    {%  else %}\n        {%- set target_relation = this -%}\n    {% endif %}\n    {%- set existing_relation = load_relation(this) -%}\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n    {%- set rank_column = config.require('rank_column') -%}\n    {%- set rank_source_models = config.require('rank_source_models') -%}\n\n    {%- set min_max_ranks = dbtvault.get_min_max_ranks(rank_column, rank_source_models) | as_native -%}\n\n    {%- set to_drop = [] -%}\n\n    {%- do dbtvault.check_placeholder(sql, \"__RANK_FILTER__\") -%}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% if existing_relation is none %}\n\n        {% set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n        {% do to_drop.append(tmp_relation) %}\n\n    {% elif existing_relation.is_view %}\n\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_rank).\") }}\n        {% do adapter.drop_relation(existing_relation) %}\n\n        {% set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n    {% elif full_refresh_mode %}\n        {% set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n    {% else %}\n\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n        {% for i in range(min_max_ranks.max_rank | int ) -%}\n\n            {%- set iteration_number = i + 1 -%}\n\n            {%- set filtered_sql = dbtvault.replace_placeholder_with_rank_filter(sql, rank_column, iteration_number) -%}\n\n            {{ dbt_utils.log_info(\"Running for {} {} of {} on column '{}' [{}]\".format('rank', iteration_number, min_max_ranks.max_rank, rank_column, model.unique_id)) }}\n\n            {% set tmp_relation = make_temp_relation(target_relation) %}\n\n            {# This call statement drops and then creates a temporary table #}\n            {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\n            {# See MSSQL note and drop code below #}\n            {% call statement() -%}\n                {{ create_table_as(True, tmp_relation, filtered_sql) }}\n            {%- endcall %}\n\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                                  to_relation=target_relation) }}\n\n            {%- set insert_query_name = 'main-' ~ i -%}\n            {% call statement(insert_query_name, fetch_result=True) -%}\n                INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\n                (\n                    SELECT {{ target_cols_csv }}\n                    FROM {{ tmp_relation.include(schema=True) }}\n                );\n            {%- endcall %}\n\n            {% set result = load_result(insert_query_name) %}\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n                {# Investigate for Databricks #}\n                {%- if result['response']['rows_affected'] == None %}\n                    {% set rows_inserted = 0 %}\n                {%- else %}\n                    {% set rows_inserted = result['response']['rows_affected'] %}\n                {%- endif %}\n\n            {% else %} {# older versions #}\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n            {% endif %}\n\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\n\n            {{ dbt_utils.log_info(\"Ran for {} {} of {}; {} records inserted [{}]\".format('rank', iteration_number,\n                                                                                          min_max_ranks.max_rank,\n                                                                                          rows_inserted,\n                                                                                          model.unique_id)) }}\n\n            {# In databricks and sqlserver a temporary view/table can only be dropped by #}\n            {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\n            {% if target.type in ['databricks', 'sqlserver'] %}\n                {{ dbtvault.drop_temporary_special(tmp_relation) }}\n            {% else %}\n                {% do to_drop.append(tmp_relation) %}\n            {% endif %}\n\n            {% do adapter.commit() %}\n\n        {% endfor %}\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\n            {{ filtered_sql }}\n        {%- endcall %}\n\n    {% endif %}\n\n    {% if build_sql is defined %}\n        {% call statement(\"main\", fetch_result=True) %}\n            {{ build_sql }}\n        {% endcall %}\n\n        {% set result = load_result('main') %}\n\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n            {% set rows_inserted = result['response']['rows_affected'] %}\n        {% else %} {# older versions #}\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n        {% endif %}\n\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\n            {{ build_sql }}\n        {%- endcall %}\n\n        -- `COMMIT` happens here\n        {% do adapter.commit() %}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {% for rel in to_drop %}\n        {% if rel.type is not none %}\n            {% do adapter.drop_relation(rel) %}\n        {% endif %}\n    {% endfor %}\n\n    {% set target_relation = target_relation.incorporate(type='table') %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbtvault.get_min_max_ranks", "macro.dbtvault.check_placeholder", "macro.dbt.run_hooks", "macro.dbtvault.replace_placeholder_with_rank_filter", "macro.dbt.create_table_as", "macro.dbt_utils.log_info", "macro.dbt.statement", "macro.dbtvault.drop_temporary_special", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2192218, "supported_languages": ["sql"]}, "macro.dbtvault.get_start_stop_dates": {"name": "get_start_stop_dates", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_start_stop_dates.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_start_stop_dates.sql", "unique_id": "macro.dbtvault.get_start_stop_dates", "macro_sql": "{% macro get_start_stop_dates(timestamp_field, date_source_models) %}\n\n    {% if config.get('start_date', default=none) is not none %}\n\n        {%- set start_date = config.get('start_date') -%}\n        {%- set stop_date = config.get('stop_date', default=none) -%}\n\n        {% do return({'start_date': start_date,'stop_date': stop_date}) %}\n\n    {% elif date_source_models is not none %}\n\n        {% if date_source_models is string %}\n            {% set date_source_models = [date_source_models] %}\n        {% endif %}\n        {% set query_sql %}\n            WITH stage AS (\n            {% for source_model in date_source_models %}\n                SELECT {{ timestamp_field }} FROM {{ ref(source_model) }}\n                {% if not loop.last %} UNION ALL {% endif %}\n            {% endfor %})\n\n            SELECT MIN({{ timestamp_field }}) AS MIN, MAX({{ timestamp_field }}) AS MAX\n            FROM stage\n        {% endset %}\n\n        {% set min_max_dict = dbtvault.get_query_results_as_dict(query_sql) %}\n\n        {% set start_date = min_max_dict['MIN'][0] | string %}\n        {% set stop_date = min_max_dict['MAX'][0] | string %}\n        {% set min_max_dates = {\"start_date\": start_date, \"stop_date\": stop_date} %}\n\n        {% do return(min_max_dates) %}\n\n    {% else %}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_period' configuration. Must provide 'start_date' and 'stop_date', just 'stop_date', and/or 'date_source_models' options.\") }}\n        {%- endif -%}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2234993, "supported_languages": null}, "macro.dbtvault.get_period_filter_sql": {"name": "get_period_filter_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.dbtvault.get_period_filter_sql", "macro_sql": "\n\n{%- macro get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {% set macro = adapter.dispatch('get_period_filter_sql',\n                                    'dbtvault')(target_cols_csv=target_cols_csv,\n                                                base_sql=base_sql,\n                                                timestamp_field=timestamp_field,\n                                                period=period,\n                                                start_timestamp=start_timestamp,\n                                                stop_timestamp=stop_timestamp,\n                                                offset=offset) %}\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__get_period_filter_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.227206, "supported_languages": null}, "macro.dbtvault.default__get_period_filter_sql": {"name": "default__get_period_filter_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.dbtvault.default__get_period_filter_sql", "macro_sql": "{% macro default__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': dbtvault.replace_placeholder_with_period_filter(filtered_sql.sql,\n                                                                                       timestamp_field,\n                                                                                       start_timestamp,\n                                                                                       stop_timestamp,\n                                                                                       offset, period)}) -%}\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2281735, "supported_languages": null}, "macro.dbtvault.sqlserver__get_period_filter_sql": {"name": "sqlserver__get_period_filter_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.dbtvault.sqlserver__get_period_filter_sql", "macro_sql": "{% macro sqlserver__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': dbtvault.replace_placeholder_with_period_filter(filtered_sql.sql,\n                                                                                       timestamp_field,\n                                                                                       start_timestamp,\n                                                                                       stop_timestamp,\n                                                                                       offset, period)}) -%}\n    {# MSSQL does not allow CTEs in a subquery #}\n    {{ filtered_sql.sql }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2290766, "supported_languages": null}, "macro.dbtvault.postgres__get_period_filter_sql": {"name": "postgres__get_period_filter_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.dbtvault.postgres__get_period_filter_sql", "macro_sql": "{% macro postgres__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': dbtvault.replace_placeholder_with_period_filter(filtered_sql.sql,\n                                                                                       timestamp_field,\n                                                                                       start_timestamp,\n                                                                                       stop_timestamp,\n                                                                                       offset, period)}) -%}\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2300055, "supported_languages": null}, "macro.dbtvault.replace_placeholder_with_period_filter": {"name": "replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.dbtvault.replace_placeholder_with_period_filter", "macro_sql": "\n\n{%- macro replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) -%}\n\n    {% set macro = adapter.dispatch('replace_placeholder_with_period_filter',\n                                    'dbtvault')(core_sql=core_sql,\n                                                timestamp_field=timestamp_field,\n                                                start_timestamp=start_timestamp,\n                                                stop_timestamp=stop_timestamp,\n                                                offset=offset,\n                                                period=period) %}\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2340803, "supported_languages": null}, "macro.dbtvault.default__replace_placeholder_with_period_filter": {"name": "default__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.dbtvault.default__replace_placeholder_with_period_filter", "macro_sql": "{% macro default__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n\n    {%- set period_filter -%}\n        (TO_DATE({{ timestamp_field }})\n        >= DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}') AND\n             TO_DATE({{ timestamp_field }}) < DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}'))\n      AND (TO_DATE({{ timestamp_field }}) >= TO_DATE('{{ start_timestamp }}'))\n    {%- endset -%}\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2352707, "supported_languages": null}, "macro.dbtvault.bigquery__replace_placeholder_with_period_filter": {"name": "bigquery__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.dbtvault.bigquery__replace_placeholder_with_period_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n\n    {%- set period_filter -%}\n            (DATE({{ timestamp_field }}) >= DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }} ) AND\n             DATE({{ timestamp_field }}) < DATE_TRUNC(DATE_ADD(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), INTERVAL 1 {{ period }}), {{ period }} )\n      AND DATE({{ timestamp_field }}) >= DATE('{{ start_timestamp }}'))\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2364776, "supported_languages": null}, "macro.dbtvault.sqlserver__replace_placeholder_with_period_filter": {"name": "sqlserver__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.dbtvault.sqlserver__replace_placeholder_with_period_filter", "macro_sql": "{% macro sqlserver__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\n    {% set start_timestamp_mssql = start_timestamp[0:27] %}\n\n    {%- set period_filter -%}\n            (CAST({{ timestamp_field }} AS DATE) >= DATEADD({{ period }}, DATEDIFF({{ period }}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AND\n             CAST({{ timestamp_field }} AS DATE) < DATEADD({{ period }}, 1, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2)))\n      AND (CAST({{ timestamp_field }} AS DATE) >= CAST('{{ start_timestamp_mssql }}' AS DATE)))\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2378411, "supported_languages": null}, "macro.dbtvault.postgres__replace_placeholder_with_period_filter": {"name": "postgres__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.dbtvault.postgres__replace_placeholder_with_period_filter", "macro_sql": "{% macro postgres__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n\n    {%- set period_filter -%}\n        {{ timestamp_field }}::DATE >= DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}', 'YYYY-MM-DD') + INTERVAL '{{ offset }} {{ period }}')\n        AND {{ timestamp_field }}::DATE < DATE_TRUNC('{{ period }}', TO_DATE('{{ start_timestamp }}','YYYY-MM-DD') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}')\n        AND {{ timestamp_field }}::DATE >= TO_DATE('{{ start_timestamp }}','YYYY-MM-DD')\n    {%- endset -%}\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.239019, "supported_languages": null}, "macro.dbtvault.get_period_of_load": {"name": "get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.dbtvault.get_period_of_load", "macro_sql": "\n\n{%- macro get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set macro = adapter.dispatch('get_period_of_load',\n                                    'dbtvault')(period=period,\n                                                offset=offset,\n                                                start_timestamp=start_timestamp) %}\n\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2412188, "supported_languages": null}, "macro.dbtvault.default__get_period_of_load": {"name": "default__get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.dbtvault.default__get_period_of_load", "macro_sql": "\n\n\n{%- macro default__get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set period_of_load_sql -%}\n        SELECT DATE_TRUNC('{{ period }}', DATEADD({{ period }}, {{ offset }}, TO_DATE('{{ start_timestamp }}'))) AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2421505, "supported_languages": null}, "macro.dbtvault.bigquery__get_period_of_load": {"name": "bigquery__get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.dbtvault.bigquery__get_period_of_load", "macro_sql": "{%- macro bigquery__get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set period_of_load_sql -%}\n        SELECT DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }}  ) AS PERIOD_OF_LOAD\n    {%- endset %}\n\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2430995, "supported_languages": null}, "macro.dbtvault.sqlserver__get_period_of_load": {"name": "sqlserver__get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.dbtvault.sqlserver__get_period_of_load", "macro_sql": "{%- macro sqlserver__get_period_of_load(period, offset, start_timestamp) -%}\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\n    {% set start_timestamp_mssql = start_timestamp[0:23] %}\n\n    {% set period_of_load_sql -%}\n        SELECT DATEADD({{ period }}, DATEDIFF({{period}}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.244283, "supported_languages": null}, "macro.dbtvault.databricks__get_period_of_load": {"name": "databricks__get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.dbtvault.databricks__get_period_of_load", "macro_sql": "{%- macro databricks__get_period_of_load(period, offset, start_timestamp) -%}\n    {% do return(dbtvault.default__get_period_of_load(period=period, offset=offset, start_timestamp=start_timestamp)) %}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbtvault.default__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2447739, "supported_languages": null}, "macro.dbtvault.postgres__get_period_of_load": {"name": "postgres__get_period_of_load", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.dbtvault.postgres__get_period_of_load", "macro_sql": "{%- macro postgres__get_period_of_load(period, offset, start_timestamp) -%}\n    {# Postgres uses different DateTime arithmetic #}\n    {% set period_of_load_sql -%}\n        SELECT DATE_TRUNC('{{ period }}',\n               TO_TIMESTAMP('{{ start_timestamp }}', 'YYYY-MM-DD HH24:MI:SS') + interval '{{ offset }} {{ period }}'\n        ) AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = dbtvault.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2457337, "supported_languages": null}, "macro.dbtvault.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.dbtvault.get_period_boundaries", "macro_sql": "\n\n{%- macro get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {% set macro = adapter.dispatch('get_period_boundaries',\n                                    'dbtvault')(target_relation=target_relation,\n                                                timestamp_field=timestamp_field,\n                                                start_date=start_date,\n                                                stop_date=stop_date,\n                                                period=period) %}\n\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2535546, "supported_languages": null}, "macro.dbtvault.default__get_period_boundaries": {"name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.dbtvault.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\n\n    {% set period_boundary_sql -%}\n        WITH period_data AS (\n            SELECT\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\n                COALESCE({{ dbtvault.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\n                         {{ current_timestamp() }} ) AS stop_timestamp\n            FROM {{ target_relation }}\n        )\n        SELECT\n            start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp',\n                                  'stop_timestamp',\n                                  period) }} + 1 AS num_periods\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2555437, "supported_languages": null}, "macro.dbtvault.bigquery__get_period_boundaries": {"name": "bigquery__get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.dbtvault.bigquery__get_period_boundaries", "macro_sql": "{% macro bigquery__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')\".format(stop_date | lower) -%}\n\n    {% set period_boundary_sql -%}\n        with data as (\n            select\n                COALESCE(CAST(MAX({{ timestamp_field }}) AS DATETIME), CAST('{{ start_date }}' AS DATETIME)) as START_TIMESTAMP,\n                COALESCE({{ dbtvault.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\n                         CAST({{ current_timestamp() }} AS DATETIME)) as STOP_TIMESTAMP\n            from {{ target_relation }}\n        )\n        select\n            START_TIMESTAMP,\n            STOP_TIMESTAMP,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 as NUM_PERIODS\n        from data\n    {%- endset %}\n\n\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2574792, "supported_languages": null}, "macro.dbtvault.sqlserver__get_period_boundaries": {"name": "sqlserver__get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.dbtvault.sqlserver__get_period_boundaries", "macro_sql": "{% macro sqlserver__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\n    {% set start_date = start_date[0:27] %}\n    {% set stop_date = stop_date[0:27] %}\n    {%- set from_date_or_timestamp = \"CAST(NULLIF('{}','none') AS DATETIME2)\".format(stop_date | lower) %}\n\n    {% set period_boundary_sql -%}\n        WITH period_data AS (\n            SELECT\n                CAST(COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS DATETIME2)) AS DATETIME2) AS start_timestamp,\n                COALESCE({{ dbtvault.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\n                         {{ current_timestamp() }} ) AS stop_timestamp\n            FROM {{ target_relation }}\n        )\n        SELECT\n            start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.259681, "supported_languages": null}, "macro.dbtvault.databricks__get_period_boundaries": {"name": "databricks__get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.dbtvault.databricks__get_period_boundaries", "macro_sql": "{% macro databricks__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\n\n    {% set period_boundary_sql -%}\n\n        WITH period_data AS (\n            SELECT\n                COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS TIMESTAMP)) AS start_timestamp,\n                COALESCE({{ dbtvault.dateadd('millisecond', 86399999, from_date_or_timestamp) }},\n                         {{ current_timestamp() }}) AS stop_timestamp\n            FROM {{ target_relation }}\n        )\n        SELECT\n            IF(stop_timestamp < start_timestamp, stop_timestamp, start_timestamp) AS start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\n\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2615757, "supported_languages": null}, "macro.dbtvault.postgres__get_period_boundaries": {"name": "postgres__get_period_boundaries", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.dbtvault.postgres__get_period_boundaries", "macro_sql": "{% macro postgres__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {% set period_boundary_sql -%}\n        WITH period_data AS (\n            SELECT\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\n                COALESCE({{ dbtvault.dateadd('millisecond', 86399999, \"NULLIF('\" ~ stop_date | lower ~ \"','none')::TIMESTAMP\") }},\n                         {{ current_timestamp() }} ) AS stop_timestamp\n            FROM {{ target_relation }}\n        )\n        SELECT\n            start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = dbtvault.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2633436, "supported_languages": null}, "macro.dbtvault.get_min_max_ranks": {"name": "get_min_max_ranks", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/rank_mat_helpers/get_min_max_ranks.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/get_min_max_ranks.sql", "unique_id": "macro.dbtvault.get_min_max_ranks", "macro_sql": "{% macro get_min_max_ranks(rank_column, rank_source_models) %}\n\n    {% if rank_source_models is not none %}\n\n        {% if rank_source_models is string %}\n            {% set rank_source_models = [rank_source_models] %}\n        {% endif %}\n\n        {% set query_sql %}\n            WITH stage AS (\n            {% for source_model in rank_source_models %}\n                SELECT {{ rank_column }} FROM {{ ref(source_model) }}\n                {% if not loop.last %} UNION ALL {% endif %}\n            {% endfor %})\n\n            SELECT MIN({{ rank_column }}) AS MIN, MAX({{ rank_column }}) AS MAX\n            FROM stage\n        {% endset %}\n\n        {% set min_max_dict = dbtvault.get_query_results_as_dict(query_sql) %}\n\n        {% set min_rank = min_max_dict['MIN'][0] | string %}\n        {% set max_rank = min_max_dict['MAX'][0] | string %}\n        {% set min_max_ranks = {\"min_rank\": min_rank, \"max_rank\": max_rank} %}\n\n        {% do return(min_max_ranks) %}\n\n    {% else %}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_rank' configuration. Must provide 'rank_column', and 'rank_source_models' options.\") }}\n        {%- endif -%}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2665832, "supported_languages": null}, "macro.dbtvault.replace_placeholder_with_rank_filter": {"name": "replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.dbtvault.replace_placeholder_with_rank_filter", "macro_sql": "\n\n{%- macro replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) -%}\n\n    {% set macro = adapter.dispatch('replace_placeholder_with_rank_filter',\n                                    'dbtvault')(core_sql=core_sql,\n                                                rank_column=rank_column,\n                                                rank_iteration=rank_iteration) %}\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__replace_placeholder_with_rank_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2682157, "supported_languages": null}, "macro.dbtvault.default__replace_placeholder_with_rank_filter": {"name": "default__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.dbtvault.default__replace_placeholder_with_rank_filter", "macro_sql": "{% macro default__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\n\n    {%- set rank_filter -%}\n    {{ rank_column }}:: INTEGER = {{ rank_iteration }}::INTEGER\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2688994, "supported_languages": null}, "macro.dbtvault.sqlserver__replace_placeholder_with_rank_filter": {"name": "sqlserver__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.dbtvault.sqlserver__replace_placeholder_with_rank_filter", "macro_sql": "{% macro sqlserver__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\n\n    {%- set rank_filter -%}\n        CAST({{ rank_column }} AS INT) = CAST({{ rank_iteration }} AS INT)\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2695837, "supported_languages": null}, "macro.dbtvault.bigquery__replace_placeholder_with_rank_filter": {"name": "bigquery__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.dbtvault.bigquery__replace_placeholder_with_rank_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\n    {%- set rank_filter -%}\n        CAST({{ rank_column }} AS INTEGER) = CAST({{ rank_iteration }} AS INTEGER)\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2702594, "supported_languages": null}, "macro.dbtvault.hash_columns": {"name": "hash_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "unique_id": "macro.dbtvault.hash_columns", "macro_sql": "\n\n{%- macro hash_columns(columns=none, columns_to_escape=none) -%}\n\n    {{- adapter.dispatch('hash_columns', 'dbtvault')(columns=columns, columns_to_escape=columns_to_escape) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__hash_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2717383, "supported_languages": null}, "macro.dbtvault.default__hash_columns": {"name": "default__hash_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "unique_id": "macro.dbtvault.default__hash_columns", "macro_sql": "\n\n{%- macro default__hash_columns(columns=none, columns_to_escape=none) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- for col in columns -%}\n\n        {%- if columns[col] is mapping and columns[col].is_hashdiff -%}\n\n            {{- dbtvault.hash(columns=columns[col]['columns'],\n                              alias=col,\n                              is_hashdiff=columns[col]['is_hashdiff'],\n                              columns_to_escape=columns_to_escape) -}}\n\n        {%- elif columns[col] is not mapping -%}\n\n            {{- dbtvault.hash(columns=columns[col],\n                              alias=col,\n                              is_hashdiff=false,\n                              columns_to_escape=columns_to_escape) -}}\n\n        {%- elif columns[col] is mapping and not columns[col].is_hashdiff -%}\n\n            {%- if execute -%}\n                {%- do exceptions.warn(\"[\" ~ this ~ \"] Warning: You provided a list of columns under a 'columns' key, but did not provide the 'is_hashdiff' flag. Use list syntax for PKs.\") -%}\n            {% endif %}\n\n            {{- dbtvault.hash(columns=columns[col]['columns'], alias=col, columns_to_escape=columns_to_escape) -}}\n\n        {%- endif -%}\n\n        {{- \",\\n\\n\" if not loop.last -}}\n    {%- endfor -%}\n\n{%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2741017, "supported_languages": null}, "macro.dbtvault.stage": {"name": "stage", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/stage.sql", "original_file_path": "macros/staging/stage.sql", "unique_id": "macro.dbtvault.stage", "macro_sql": "\n\n{%- macro stage(include_source_columns=none, source_model=none, hashed_columns=none, derived_columns=none, null_columns=none, ranked_columns=none) -%}\n\n    {%- if include_source_columns is none -%}\n        {%- set include_source_columns = true -%}\n    {%- endif -%}\n\n    {{- dbtvault.prepend_generated_by() }}\n\n    {{ adapter.dispatch('stage', 'dbtvault')(include_source_columns=include_source_columns,\n                                              source_model=source_model,\n                                              hashed_columns=hashed_columns,\n                                              derived_columns=derived_columns,\n                                              null_columns=null_columns,\n                                              ranked_columns=ranked_columns\n                                              ) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__stage"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.279127, "supported_languages": null}, "macro.dbtvault.default__stage": {"name": "default__stage", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/stage.sql", "original_file_path": "macros/staging/stage.sql", "unique_id": "macro.dbtvault.default__stage", "macro_sql": "{%- macro default__stage(include_source_columns, source_model, hashed_columns, derived_columns, null_columns, ranked_columns) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{#- Check for source format or ref format and create\n    relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = dbtvault.source_columns(source_relation=source_relation) -%}\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = dbtvault.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n{%- set columns_to_escape = dbtvault.process_columns_to_escape(derived_columns) | list -%}\n{%- set derived_column_names = dbtvault.extract_column_names(derived_columns) | list -%}\n{%- set null_column_names = dbtvault.extract_null_column_names(null_columns) | list -%}\n{%- set hashed_column_names = dbtvault.extract_column_names(hashed_columns) | list -%}\n{%- set ranked_column_names = dbtvault.extract_column_names(ranked_columns) | list -%}\n{%- set exclude_column_names = derived_column_names + null_column_names + hashed_column_names | list -%}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n\n{%- set source_columns_to_select = dbtvault.process_columns_to_select(all_source_columns, exclude_column_names) -%}\n{%- set derived_columns_to_select = dbtvault.process_columns_to_select(source_and_derived_column_names, null_column_names + hashed_column_names) | unique | list -%}\n{%- set derived_and_null_columns_to_select = dbtvault.process_columns_to_select(source_and_derived_column_names + null_column_names, hashed_column_names) | unique | list -%}\n{%- set final_columns_to_select = [] -%}\n\n{#- Include source columns in final column selection if true -#}\n{%- if include_source_columns -%}\n    {%- if dbtvault.is_nothing(derived_columns)\n           and dbtvault.is_nothing(null_columns)\n           and dbtvault.is_nothing(hashed_columns)\n           and dbtvault.is_nothing(ranked_columns) -%}\n        {%- set final_columns_to_select = final_columns_to_select + all_source_columns -%}\n    {%- else -%}\n        {#- Only include non-overriden columns if not just source columns -#}\n        {%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n    {%- endif -%}\n{%- endif %}\n\nWITH source_data AS (\n\n    SELECT\n\n    {{- \"\\n\\n    \" ~ dbtvault.print_list(list_to_print=all_source_columns, columns_to_escape=columns_to_escape) if all_source_columns else \" *\" }}\n\n    FROM {{ source_relation }}\n    {%- set last_cte = \"source_data\" %}\n)\n\n{%- if dbtvault.is_something(derived_columns) -%},\n\nderived_columns AS (\n\n    SELECT\n\n    {{ dbtvault.derive_columns(source_relation=source_relation, columns=derived_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"derived_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n)\n{%- endif -%}\n\n{% if dbtvault.is_something(null_columns) -%},\n\nnull_columns AS (\n\n    SELECT\n\n    {{ dbtvault.print_list(list_to_print=derived_columns_to_select, columns_to_escape=columns_to_escape) }}{{\",\" if dbtvault.is_something(derived_columns_to_select) else \"\"}}\n\n    {{ dbtvault.null_columns(source_relation=none, columns=null_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"null_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + null_column_names %}\n)\n{%- endif -%}\n\n\n{% if dbtvault.is_something(hashed_columns) -%},\n\nhashed_columns AS (\n\n    SELECT\n\n    {{ dbtvault.print_list(list_to_print=derived_and_null_columns_to_select, columns_to_escape=columns_to_escape) }},\n\n    {% set processed_hash_columns = dbtvault.process_hash_column_excludes(hashed_columns, all_source_columns) -%}\n    {{- dbtvault.hash_columns(columns=processed_hash_columns, columns_to_escape=columns_to_escape) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n)\n{%- endif -%}\n\n{% if dbtvault.is_something(ranked_columns) -%},\n\nranked_columns AS (\n\n    SELECT *,\n\n    {{ dbtvault.rank_columns(columns=ranked_columns) | indent(4) if dbtvault.is_something(ranked_columns) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"ranked_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + ranked_column_names %}\n)\n{%- endif -%}\n\n,\n\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ dbtvault.print_list(list_to_print=final_columns_to_select | unique | list, columns_to_escape=columns_to_escape) }}\n\n    FROM {{ last_cte }}\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.source_columns", "macro.dbtvault.process_columns_to_escape", "macro.dbtvault.extract_column_names", "macro.dbtvault.extract_null_column_names", "macro.dbtvault.process_columns_to_select", "macro.dbtvault.is_nothing", "macro.dbtvault.print_list", "macro.dbtvault.is_something", "macro.dbtvault.derive_columns", "macro.dbtvault.null_columns", "macro.dbtvault.process_hash_column_excludes", "macro.dbtvault.hash_columns", "macro.dbtvault.rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2872734, "supported_languages": null}, "macro.dbtvault.rank_columns": {"name": "rank_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/rank_columns.sql", "original_file_path": "macros/staging/rank_columns.sql", "unique_id": "macro.dbtvault.rank_columns", "macro_sql": "\n\n{%- macro rank_columns(columns=none) -%}\n\n    {{- adapter.dispatch('rank_columns', 'dbtvault')(columns=columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2911718, "supported_languages": null}, "macro.dbtvault.default__rank_columns": {"name": "default__rank_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/rank_columns.sql", "original_file_path": "macros/staging/rank_columns.sql", "unique_id": "macro.dbtvault.default__rank_columns", "macro_sql": "\n\n{%- macro default__rank_columns(columns=none) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- for col in columns -%}\n\n        {%- if columns[col] is mapping and columns[col].partition_by and columns[col].order_by -%}\n\n            {%- set order_by = columns[col].order_by -%}\n            {%- set partition_by = columns[col].partition_by -%}\n            {%- set dense_rank = columns[col].dense_rank -%}\n\n            {%- if dbtvault.is_nothing(dense_rank) %}\n                {%- set rank_type = \"RANK()\" -%}\n            {%- elif dense_rank is true -%}\n                {%- set rank_type = \"DENSE_RANK()\" -%}\n            {%- else -%}\n                {%- if execute -%}\n                    {%- do exceptions.raise_compiler_error('If dense_rank is provided, it must be true or false, not {}'.format(dense_rank)) -%}\n                {% endif %}\n            {%- endif -%}\n\n            {%- if dbtvault.is_list(order_by) -%}\n\n                {%- set order_by_str_lst = [] -%}\n\n                {% for order_by_col in order_by %}\n\n                    {%- if order_by_col is mapping %}\n                        {%- set column_name, direction = order_by_col.items()|first -%}\n                        {%- set order_by_str = \"{} {}\".format(column_name, direction) | trim -%}\n                    {%- else -%}\n                        {%- set order_by_str = order_by_col -%}\n                    {%- endif -%}\n\n                    {%- do order_by_str_lst.append(order_by_str) -%}\n                {%- endfor -%}\n\n                {%- set order_by_str = order_by_str_lst | join(\", \") -%}\n\n            {%- else -%}\n\n                {%- if order_by is mapping %}\n                    {%- set column_name, direction = order_by.items()|first -%}\n                {%- else -%}\n                    {%- set column_name = order_by -%}\n                    {%- set direction = '' -%}\n                {%- endif -%}\n\n                {%- set order_by_str = \"{} {}\".format(column_name, direction) | trim -%}\n            {%- endif -%}\n\n            {%- if dbtvault.is_list(partition_by) -%}\n                {%- set partition_by_str = partition_by | join(\", \") -%}\n            {%- else -%}\n                {%- set partition_by_str = partition_by -%}\n            {%- endif -%}\n\n            {{- \"{} OVER (PARTITION BY {} ORDER BY {}) AS {}\".format(rank_type, partition_by_str, order_by_str, col) | indent(4) -}}\n\n        {%- endif -%}\n\n        {{- \",\\n\" if not loop.last -}}\n    {%- endfor -%}\n\n{%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_nothing", "macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.2954545, "supported_languages": null}, "macro.dbtvault.null_columns": {"name": "null_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.dbtvault.null_columns", "macro_sql": "\n\n{%- macro null_columns(source_relation=none, columns=none) -%}\n\n    {{- adapter.dispatch('null_columns', 'dbtvault')(source_relation=source_relation, columns=columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__null_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.299732, "supported_languages": null}, "macro.dbtvault.default__null_columns": {"name": "default__null_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.dbtvault.default__null_columns", "macro_sql": "\n\n{%- macro default__null_columns(source_relation=none, columns=none) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- set ns = namespace() -%}\n\n    {%- for col in columns -%}\n        {%- if col.lower() == 'required' -%}\n            {% if dbtvault.is_something(columns[col]) %}\n                {%- if columns[col] is string -%}\n                    {%- set ns.required = [columns[col]] -%}\n                {%- elif dbtvault.is_list(columns[col]) -%}\n                    {%- set ns.required = columns[col] -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n        {%- if col.lower() == 'optional' -%}\n            {% if dbtvault.is_something(columns[col]) %}\n                {%- if columns[col] is string -%}\n                    {%- set ns.optional = [columns[col]] -%}\n                {%- elif dbtvault.is_list(columns[col]) -%}\n                    {%- set ns.optional = columns[col] -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {%- set required_value = var('null_key_required', '-1') -%}\n    {%- set optional_value = var('null_key_optional', '-2') -%}\n\n    {%- if dbtvault.is_something(ns.required) -%}\n        {%- filter indent(width=0) -%}\n        {%- for col_name in ns.required -%}\n            {{ dbtvault.null_column_sql(col_name, required_value) }}{{ \",\\n\" if not loop.last }}{{ \",\\n\" if loop.last and dbtvault.is_something(ns.optional) else \"\" }}\n        {%- endfor -%}\n        {%- endfilter -%}\n    {%- endif -%}\n\n    {%- if dbtvault.is_something(ns.optional) -%}\n        {%- filter indent(width=0) -%}\n        {%- for col_name in ns.optional -%}\n            {{ dbtvault.null_column_sql(col_name, optional_value) }}{{ \",\\n\" if not loop.last }}\n        {%- endfor -%}\n        {%- endfilter -%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.is_list", "macro.dbtvault.null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3038383, "supported_languages": null}, "macro.dbtvault.null_column_sql": {"name": "null_column_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.dbtvault.null_column_sql", "macro_sql": "{%- macro null_column_sql(col_name, default_value) -%}\n\n    {{- adapter.dispatch('null_column_sql', 'dbtvault')(col_name=col_name, default_value=default_value) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3043602, "supported_languages": null}, "macro.dbtvault.default__null_column_sql": {"name": "default__null_column_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.dbtvault.default__null_column_sql", "macro_sql": "{%- macro default__null_column_sql(col_name, default_value) -%}\n\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\n    IFNULL({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3048182, "supported_languages": null}, "macro.dbtvault.sqlserver__null_column_sql": {"name": "sqlserver__null_column_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.dbtvault.sqlserver__null_column_sql", "macro_sql": "{%- macro sqlserver__null_column_sql(col_name, default_value) -%}\n\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\n    ISNULL({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3052566, "supported_languages": null}, "macro.dbtvault.postgres__null_column_sql": {"name": "postgres__null_column_sql", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.dbtvault.postgres__null_column_sql", "macro_sql": "{%- macro postgres__null_column_sql(col_name, default_value) -%}\n\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\n    COALESCE({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.30569, "supported_languages": null}, "macro.dbtvault.derive_columns": {"name": "derive_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "unique_id": "macro.dbtvault.derive_columns", "macro_sql": "\n\n{%- macro derive_columns(source_relation=none, columns=none) -%}\n\n    {{- adapter.dispatch('derive_columns', 'dbtvault')(source_relation=source_relation, columns=columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__derive_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.309733, "supported_languages": null}, "macro.dbtvault.default__derive_columns": {"name": "default__derive_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "unique_id": "macro.dbtvault.default__derive_columns", "macro_sql": "\n\n{%- macro default__derive_columns(source_relation=none, columns=none) -%}\n\n{%- set exclude_columns = [] -%}\n{%- set include_columns = [] -%}\n{%- set src_columns = [] -%}\n{%- set der_columns = [] -%}\n\n{%- set source_cols = dbtvault.source_columns(source_relation=source_relation) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {#- Add aliases of derived columns to excludes and full SQL to includes -#}\n    {%- for derived_column in columns -%}\n        {%- set column_config = columns[derived_column] -%}\n\n        {%- if dbtvault.is_list(column_config) -%}\n            {%- set column_list = [] -%}\n\n            {%- for concat_component in column_config -%}\n                {%- set column_str = dbtvault.as_constant(concat_component) -%}\n                {%- do column_list.append(column_str) -%}\n            {%- endfor -%}\n\n            {%- set concat = dbtvault.concat_ws(column_list, \"||\") -%}\n            {%- set concat_string = concat ~ \" AS \" ~ derived_column -%}\n\n            {%- do der_columns.append(concat_string) -%}\n        {%- else -%}\n            {%- if column_config is mapping and column_config -%}\n                {%- set column_escape = column_config['escape'] -%}\n\n                {%- if dbtvault.is_list(column_config['source_column']) -%}\n                    {%- set column_list = [] -%}\n\n                    {%- for concat_component in column_config['source_column'] -%}\n                        {%- set column_str = dbtvault.as_constant(concat_component) -%}\n                        {%- if column_escape is true %}\n                            {%- set column_str = dbtvault.escape_column_names(column_str) -%}\n                        {% endif %}\n                        {%- do column_list.append(column_str) -%}\n                    {%- endfor -%}\n\n                    {%- set concat = dbtvault.concat_ws(column_list, \"||\") -%}\n                    {%- set concat_string = concat ~ \" AS \" ~ derived_column -%}\n\n                    {%- do der_columns.append(concat_string) -%}\n                {%- else -%}\n                    {%- set column_str = dbtvault.as_constant(column_config['source_column']) -%}\n                    {%- if column_escape is true -%}\n                        {%- do der_columns.append(dbtvault.escape_column_names(column_str) ~ \" AS \" ~ derived_column) -%}\n                    {%- else -%}\n                        {%- do der_columns.append(column_str ~ \" AS \" ~ derived_column) -%}\n                    {%- endif -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- set column_str = dbtvault.as_constant(column_config) -%}\n                {%- do der_columns.append(column_str ~ \" AS \" ~ derived_column) -%}\n            {%- endif -%}\n        {%- endif -%}\n\n        {%- do exclude_columns.append(derived_column) -%}\n\n    {%- endfor -%}\n\n    {#- Add all columns from source_model relation -#}\n    {%- if source_relation is defined and source_relation is not none -%}\n\n        {%- for col in source_cols -%}\n            {%- if col | lower not in exclude_columns | map('lower') | list -%}\n                {%- do src_columns.append(col) -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n    {%- endif -%}\n\n    {#- Makes sure the columns are appended in a logical order. Source columns then derived columns -#}\n    {%- set include_columns = src_columns + der_columns -%}\n    {%- set columns_to_escape = dbtvault.process_columns_to_escape(columns) | list -%}\n\n    {#- Print out all columns in includes -#}\n    {%- for col in include_columns -%}\n        {%- if col | lower in columns_to_escape | map('lower') | list -%}\n            {{- dbtvault.escape_column_name(col) -}}{{ \",\\n\" if not loop.last }}\n        {%- else -%}\n            {{- col -}}{{ \",\\n\" if not loop.last }}\n        {%- endif -%}\n    {%- endfor -%}\n\n{%- else -%}\n\n{%- if execute -%}\n\n{{ exceptions.raise_compiler_error(\"Invalid column configuration:\nexpected format, either: {'source_relation': Relation, 'columns': {column_name: column_value}}\nor: {'source_relation': Relation, 'columns': {column_name: {'source_column': column_value, 'escape': true / false}}}\ngot: {'source_relation': \" ~ source_relation ~ \", 'columns': \" ~ columns ~ \"}\") }}\n{%- endif %}\n\n{%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.source_columns", "macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.concat_ws", "macro.dbtvault.escape_column_names", "macro.dbtvault.process_columns_to_escape", "macro.dbtvault.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3164706, "supported_languages": null}, "macro.dbtvault.source_columns": {"name": "source_columns", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/staging/source_columns.sql", "original_file_path": "macros/staging/source_columns.sql", "unique_id": "macro.dbtvault.source_columns", "macro_sql": "\n\n{%- macro source_columns(source_relation=none) -%}\n\n    {%- if source_relation -%}\n        {%- set source_model_cols = adapter.get_columns_in_relation(source_relation) -%}\n\n        {%- set column_list = [] -%}\n\n        {%- for source_col in source_model_cols -%}\n            {%- do column_list.append(source_col.column) -%}\n        {%- endfor -%}\n\n        {%- do return(column_list) -%}\n    {%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3175795, "supported_languages": null}, "macro.dbtvault.alias_all": {"name": "alias_all", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/alias_all.sql", "original_file_path": "macros/internal/metadata_processing/alias_all.sql", "unique_id": "macro.dbtvault.alias_all", "macro_sql": "\n\n{%- macro alias_all(columns=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias_all', 'dbtvault')(columns=columns, prefix=prefix) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3190017, "supported_languages": null}, "macro.dbtvault.default__alias_all": {"name": "default__alias_all", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/alias_all.sql", "original_file_path": "macros/internal/metadata_processing/alias_all.sql", "unique_id": "macro.dbtvault.default__alias_all", "macro_sql": "\n\n{%- macro default__alias_all(columns, prefix) -%}\n\n{%- if dbtvault.is_list(columns) -%}\n\n    {%- set processed_columns = [] -%}\n\n    {%- for col in columns -%}\n        {%- if col | lower not in processed_columns | map('lower') | list -%}\n\n            {{ dbtvault.alias(alias_config=col, prefix=prefix) }}\n            {%- if not loop.last -%} , {% endif -%}\n\n            {%- if col is mapping -%}\n                {%- if col['source_column'] | lower and col['alias'] | lower -%}\n                    {%- do processed_columns.append(col['source_column']) -%}\n                {% endif -%}\n            {%- else -%}\n                {%- do processed_columns.append(col) -%}\n            {% endif -%}\n        {% endif -%}\n    {%- endfor -%}\n\n{%- elif columns is string -%}\n\n{{ dbtvault.alias(alias_config=columns, prefix=prefix) }}\n\n{%- else -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list or a string.\") }}\n    {%- endif %}\n\n{%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3211179, "supported_languages": null}, "macro.dbtvault.alias": {"name": "alias", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/alias.sql", "original_file_path": "macros/internal/metadata_processing/alias.sql", "unique_id": "macro.dbtvault.alias", "macro_sql": "\n\n{%- macro alias(alias_config=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias', 'dbtvault')(alias_config=alias_config, prefix=prefix) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3225522, "supported_languages": null}, "macro.dbtvault.default__alias": {"name": "default__alias", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/alias.sql", "original_file_path": "macros/internal/metadata_processing/alias.sql", "unique_id": "macro.dbtvault.default__alias", "macro_sql": "\n\n{%- macro default__alias(alias_config=none, prefix=none) -%}\n\n{%- if alias_config is defined and alias_config is not none and alias_config -%}\n\n    {%- if alias_config is mapping -%}\n\n        {%- if alias_config['source_column'] and alias_config['alias'] -%}\n\n            {%- if prefix -%}\n                {{prefix}}.{{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- else -%}\n                {{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- else -%}\n\n        {%- if prefix -%}\n\n        {{- dbtvault.prefix([alias_config], prefix) -}}\n\n        {%- else -%}\n\n        {{ alias_config }}\n\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if execute -%}\n\n        {{ exceptions.raise_compiler_error(\"Invalid alias configuration:\\nexpected format: {source_column: 'column', alias: 'column_alias'}\\ngot: \" ~ alias_config) }}\n\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3243284, "supported_languages": null}, "macro.dbtvault.escape_column_name": {"name": "escape_column_name", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/escape_column_name.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_name.sql", "unique_id": "macro.dbtvault.escape_column_name", "macro_sql": "\n\n{%- macro escape_column_name(column) -%}\n\n    {{- adapter.dispatch('escape_column_name', 'dbtvault')(column=column) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.325029, "supported_languages": null}, "macro.dbtvault.default__escape_column_name": {"name": "default__escape_column_name", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/escape_column_name.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_name.sql", "unique_id": "macro.dbtvault.default__escape_column_name", "macro_sql": "\n\n{%- macro default__escape_column_name(column) -%}\n\n    {# Do not escape a constant (single quoted) value #}\n    {%- if column | first == \"'\" and column | last == \"'\" -%}\n        {%- set escaped_column_name = column -%}\n    {%- else -%}\n        {%- set escape_char_left, escape_char_right = dbtvault.get_escape_characters() -%}\n\n        {%- set escaped_column_name = escape_char_left ~ column | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right -%}\n    {%- endif -%}\n\n    {%- do return(escaped_column_name) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3260992, "supported_languages": null}, "macro.dbtvault.multikey": {"name": "multikey", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/multikey.sql", "original_file_path": "macros/internal/metadata_processing/multikey.sql", "unique_id": "macro.dbtvault.multikey", "macro_sql": "\n\n{%- macro multikey(columns, prefix=none, condition=none, operator='AND') -%}\n\n    {{- adapter.dispatch('multikey', 'dbtvault')(columns=columns, prefix=prefix, condition=condition, operator=operator) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3280647, "supported_languages": null}, "macro.dbtvault.default__multikey": {"name": "default__multikey", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/multikey.sql", "original_file_path": "macros/internal/metadata_processing/multikey.sql", "unique_id": "macro.dbtvault.default__multikey", "macro_sql": "\n\n{%- macro default__multikey(columns, prefix=none, condition=none, operator='AND') -%}\n\n    {%- if prefix is string -%}\n        {%- set prefix = [prefix] -%}\n    {%- endif -%}\n\n    {%- if columns is string -%}\n        {%- set columns = [columns] -%}\n    {%- endif -%}\n\n    {%- if condition in ['<>', '!=', '='] -%}\n        {%- for col in columns -%}\n            {%- if prefix -%}\n                {{- dbtvault.prefix([col], prefix[0], alias_target='target') }} {{ condition }} {{ dbtvault.prefix([col], prefix[1]) -}}\n            {%- endif %}\n            {%- if not loop.last %} {{ operator }} {% endif -%}\n        {% endfor -%}\n    {%- else -%}\n        {%- if dbtvault.is_list(columns) -%}\n            {%- for col in columns -%}\n                {{ (prefix[0] ~ '.') if prefix }}{{ col }} {{ condition if condition else '' }}\n                {%- if not loop.last -%} {{ \"\\n    \" ~ operator }} {% endif -%}\n            {%- endfor -%}\n        {%- else -%}\n            {{ prefix[0] ~ '.' if prefix }}{{ columns }} {{ condition if condition else '' }}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.prefix", "macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3308072, "supported_languages": null}, "macro.dbtvault.expand_column_list": {"name": "expand_column_list", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/expand_column_list.sql", "original_file_path": "macros/internal/metadata_processing/expand_column_list.sql", "unique_id": "macro.dbtvault.expand_column_list", "macro_sql": "\n\n{%- macro expand_column_list(columns=none) -%}\n\n{%- if not columns -%}\n    {%- do return([]) -%}\n{%- endif -%}\n\n{%- set col_list = [] -%}\n\n{%- if dbtvault.is_list(columns) -%}\n\n    {%- set columns = columns | reject(\"none\") %}\n\n    {%- for col in columns -%}\n\n        {%- if col is string -%}\n\n            {%- do col_list.append(col) -%}\n\n        {#- If list of lists -#}\n        {%- elif dbtvault.is_list(col) -%}\n\n            {%- for cols in col -%}\n\n                {%- do col_list.append(cols) -%}\n\n            {%- endfor -%}\n        {%- elif col is mapping -%}\n\n            {%- do col_list.append(col) -%}\n\n        {%- else -%}\n\n            {%- if execute -%}\n                {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list of lists, dictionaries or strings.\") -}}\n            {%- endif %}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n{%- else -%}\n\n    {%- if execute -%}\n        {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list.\") -}}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- do return(col_list) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3336017, "supported_languages": null}, "macro.dbtvault.get_escape_characters": {"name": "get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.dbtvault.get_escape_characters", "macro_sql": "{% macro get_escape_characters() -%}\n\n    {%- set escape_char_left, escape_char_right = adapter.dispatch('get_escape_characters', 'dbtvault')() -%}\n\n    {%- do return((var('escape_char_left', escape_char_left), var('escape_char_right', escape_char_right))) -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.snowflake__get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.334788, "supported_languages": null}, "macro.dbtvault.snowflake__get_escape_characters": {"name": "snowflake__get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.dbtvault.snowflake__get_escape_characters", "macro_sql": "\n\n{%- macro snowflake__get_escape_characters() %}\n    {%- do return (('\"', '\"')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.335125, "supported_languages": null}, "macro.dbtvault.bigquery__get_escape_characters": {"name": "bigquery__get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.dbtvault.bigquery__get_escape_characters", "macro_sql": "\n\n{%- macro bigquery__get_escape_characters() %}\n    {%- do return (('`', '`')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3354461, "supported_languages": null}, "macro.dbtvault.sqlserver__get_escape_characters": {"name": "sqlserver__get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.dbtvault.sqlserver__get_escape_characters", "macro_sql": "\n\n{%- macro sqlserver__get_escape_characters() %}\n    {%- do return (('\"', '\"')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3357625, "supported_languages": null}, "macro.dbtvault.databricks__get_escape_characters": {"name": "databricks__get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.dbtvault.databricks__get_escape_characters", "macro_sql": "\n\n{%- macro databricks__get_escape_characters() %}\n    {%- do return (('`', '`')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3361225, "supported_languages": null}, "macro.dbtvault.postgres__get_escape_characters": {"name": "postgres__get_escape_characters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.dbtvault.postgres__get_escape_characters", "macro_sql": "\n\n{%- macro postgres__get_escape_characters() %}\n    {%- do return (('\"', '\"')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3364465, "supported_languages": null}, "macro.dbtvault.as_constant": {"name": "as_constant", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/as_constant.sql", "original_file_path": "macros/internal/metadata_processing/as_constant.sql", "unique_id": "macro.dbtvault.as_constant", "macro_sql": "\n\n{%- macro as_constant(column_str=none) -%}\n\n    {{- adapter.dispatch('as_constant', 'dbtvault')(column_str=column_str) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.337286, "supported_languages": null}, "macro.dbtvault.default__as_constant": {"name": "default__as_constant", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/as_constant.sql", "original_file_path": "macros/internal/metadata_processing/as_constant.sql", "unique_id": "macro.dbtvault.default__as_constant", "macro_sql": "\n\n{%- macro default__as_constant(column_str) -%}\n\n    {%- if column_str is not none and column_str is string and column_str -%}\n\n        {%- if column_str | first == \"!\" -%}\n\n            {{- return(\"'\" ~ column_str[1:] ~ \"'\") -}}\n\n        {%- else -%}\n\n            {{- return(column_str) -}}\n\n        {%- endif -%}\n    {%- else -%}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid columns_str object provided. Must be a string and not null.\") }}\n        {%- endif %}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3383288, "supported_languages": null}, "macro.dbtvault.check_required_parameters": {"name": "check_required_parameters", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/check_required_parameters.sql", "original_file_path": "macros/internal/metadata_processing/check_required_parameters.sql", "unique_id": "macro.dbtvault.check_required_parameters", "macro_sql": "\n\n{%- macro check_required_parameters() -%}\n\n    {%- set ns = namespace(missing_parameters=[]) -%}\n\n    {%- if kwargs is not none -%}\n\n        {%- for k, v in kwargs.items() %}\n            {%- do ns.missing_parameters.append(k) if v is none -%}\n        {%- endfor -%}\n\n        {%- if ns.missing_parameters -%}\n            {{- exceptions.raise_compiler_error(\"Required parameter(s) missing or none in '{}': {}\".format(this, ns.missing_parameters | join(\", \"))) -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3397632, "supported_languages": null}, "macro.dbtvault.concat_ws": {"name": "concat_ws", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.dbtvault.concat_ws", "macro_sql": "\n\n{%- macro concat_ws(string_list, separator=\"||\") -%}\n\n    {{- adapter.dispatch('concat_ws', 'dbtvault')(string_list=string_list, separator=separator) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.340746, "supported_languages": null}, "macro.dbtvault.default__concat_ws": {"name": "default__concat_ws", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.dbtvault.default__concat_ws", "macro_sql": "\n\n{%- macro default__concat_ws(string_list, separator=\"||\") -%}\n\nCONCAT(\n{%- for str in string_list %}\n    {{ str }}\n{%- if not loop.last %}, '{{ separator }}', {%- endif -%}\n{%- endfor %}\n)\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3413317, "supported_languages": null}, "macro.dbtvault.bigquery__concat_ws": {"name": "bigquery__concat_ws", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.dbtvault.bigquery__concat_ws", "macro_sql": "{%- macro bigquery__concat_ws(string_list, separator=\"||\") -%}\n\n    {{ dbtvault.default__concat_ws(string_list=string_list, separator=separator) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.341737, "supported_languages": null}, "macro.dbtvault.sqlserver__concat_ws": {"name": "sqlserver__concat_ws", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.dbtvault.sqlserver__concat_ws", "macro_sql": "{%- macro sqlserver__concat_ws(string_list, separator=\"||\") -%}\n\n    {{ dbtvault.default__concat_ws(string_list=string_list, separator=separator) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3422601, "supported_languages": null}, "macro.dbtvault.escape_column_names": {"name": "escape_column_names", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "unique_id": "macro.dbtvault.escape_column_names", "macro_sql": "\n\n{%- macro escape_column_names(columns=none) -%}\n\n    {%- if dbtvault.is_list(columns) -%}\n        {%- set columns = dbtvault.expand_column_list(columns) -%}\n    {%- endif -%}\n\n    {%- if dbtvault.is_something(columns) -%}\n\n        {%- set col_string = '' -%}\n        {%- set col_list = [] -%}\n        {%- set col_mapping = {} -%}\n\n        {%- if columns is string -%}\n\n            {%- set col_string = dbtvault.escape_column_name(columns) -%}\n\n        {%- elif dbtvault.is_list(columns) -%}\n\n            {%- for col in columns -%}\n\n                {%- if col is string -%}\n\n                    {%- set escaped_col = dbtvault.escape_column_name(col) -%}\n\n                    {%- do col_list.append(escaped_col) -%}\n\n                {%- else -%}\n\n                    {%- if execute -%}\n                        {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string.\") -}}\n                    {%- endif -%}\n\n                {%- endif -%}\n\n            {%- endfor -%}\n\n        {%- elif columns is mapping -%}\n\n            {%- if columns['source_column'] and columns['alias'] -%}\n\n                {%- set escaped_source_col = dbtvault.escape_column_name(columns['source_column']) -%}\n                {%- set escaped_alias_col = dbtvault.escape_column_name(columns['alias']) -%}\n                {%- set col_mapping = {\"source_column\": escaped_source_col, \"alias\": escaped_alias_col} -%}\n\n            {%- else -%}\n\n                {%- if execute -%}\n                    {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\n                {%- endif %}\n\n            {%- endif -%}\n\n        {%- else -%}\n\n            {%- if execute -%}\n                {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\n            {%- endif %}\n\n        {%- endif -%}\n\n    {%- elif columns == '' -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Expected a column name or a list of column names, got an empty string\") -}}\n        {%- endif -%}\n\n    {%- endif -%}\n\n    {%- if columns is none -%}\n\n        {%- do return(none) -%}\n\n    {%- elif columns == [] -%}\n\n        {%- do return([]) -%}\n\n    {%- elif columns == {} -%}\n\n        {%- do return({}) -%}\n\n    {%- elif columns is string -%}\n\n        {%- do return(col_string) -%}\n\n    {%- elif dbtvault.is_list(columns) -%}\n\n        {%- do return(col_list) -%}\n\n    {%- elif columns is mapping -%}\n\n        {%- do return(col_mapping) -%}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.expand_column_list", "macro.dbtvault.is_something", "macro.dbtvault.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3499348, "supported_languages": null}, "macro.dbtvault.process_payload_column_excludes": {"name": "process_payload_column_excludes", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/metadata_processing/process_payload_column_excludes.sql", "original_file_path": "macros/internal/metadata_processing/process_payload_column_excludes.sql", "unique_id": "macro.dbtvault.process_payload_column_excludes", "macro_sql": "\n\n{%- macro process_payload_column_excludes(src_pk, src_hashdiff, src_payload, src_extra_columns,\n                                          src_eff, src_ldts, src_source, source_model) -%}\n\n    {%- if src_payload is not mapping -%}\n        {%- do return(src_payload) -%}\n    {%- endif -%}\n\n    {%- set source_model_cols = adapter.get_columns_in_relation(ref(source_model)) -%}\n    {%- set columns_in_metadata = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff,\n                                                                       src_payload, src_extra_columns,\n                                                                       src_eff, src_ldts, src_source]) | map('lower') | list -%}\n\n    {%- set payload_cols = [] -%}\n    {%- for col in source_model_cols -%}\n        {%- if col.column | lower not in columns_in_metadata -%}\n            {%- do payload_cols.append(col.column) -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {%- if 'exclude_columns' in src_payload.keys() -%}\n        {%- set table_excludes_columns = src_payload.exclude_columns -%}\n\n        {%- if table_excludes_columns -%}\n\n            {%- set excluded_payload = [] -%}\n            {%- set exclude_columns_list = src_payload.columns | map('lower') | list -%}\n\n            {%- for col in payload_cols -%}\n               {%- if col | lower not in exclude_columns_list -%}\n                   {%- do excluded_payload.append(col) -%}\n               {%- endif -%}\n            {%- endfor -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- do return(excluded_payload) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.353639, "supported_languages": null}, "macro.dbtvault.prepend_generated_by": {"name": "prepend_generated_by", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/prepend_generated_by.sql", "original_file_path": "macros/internal/helpers/prepend_generated_by.sql", "unique_id": "macro.dbtvault.prepend_generated_by", "macro_sql": "\n\n{%- macro prepend_generated_by() -%}\n-- Generated by dbtvault.\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3539288, "supported_languages": null}, "macro.dbtvault.is_list": {"name": "is_list", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.dbtvault.is_list", "macro_sql": "\n\n{%- macro is_list(obj, empty_is_false=false) -%}\n\n    {%- if obj is iterable and obj is not string and obj is not mapping -%}\n        {%- if obj is none and obj is undefined and not obj and empty_is_false -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3558578, "supported_languages": null}, "macro.dbtvault.is_nothing": {"name": "is_nothing", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.dbtvault.is_nothing", "macro_sql": "{%- macro is_nothing(obj) -%}\n\n    {%- if obj is none or obj is undefined or not obj or dbtvault.is_list(obj, empty_is_false=true) -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3566153, "supported_languages": null}, "macro.dbtvault.is_something": {"name": "is_something", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.dbtvault.is_something", "macro_sql": "{%- macro is_something(obj) -%}\n\n    {%- if obj is not none and obj is defined and obj -%}\n        {#- if an empty list, do not consider the object something -#}\n        {% if dbtvault.is_list(empty_is_false=true) %}\n            {%- do return(true) -%}\n        {%- else -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3574953, "supported_languages": null}, "macro.dbtvault.is_expression": {"name": "is_expression", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.dbtvault.is_expression", "macro_sql": "{%- macro is_expression(obj) -%}\n\n    {%- if obj is string -%}\n        {%- if (obj | first == \"'\" and obj | last == \"'\") or (\"(\" in obj and \")\" in obj) or \"::\" in obj -%}\n            {%- do return(true) -%}\n        {%- else -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3585627, "supported_languages": null}, "macro.dbtvault.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/dateadd.sql", "original_file_path": "macros/internal/helpers/dateadd.sql", "unique_id": "macro.dbtvault.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n    {{ return(adapter.dispatch('dateadd', 'dbtvault')(datepart=datepart,\n                                                     interval=interval,\n                                                     from_date_or_timestamp=from_date_or_timestamp)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3595054, "supported_languages": null}, "macro.dbtvault.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/dateadd.sql", "original_file_path": "macros/internal/helpers/dateadd.sql", "unique_id": "macro.dbtvault.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ dateadd(datepart, interval, from_date_or_timestamp) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.359888, "supported_languages": null}, "macro.dbtvault.sqlserver__dateadd": {"name": "sqlserver__dateadd", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/dateadd.sql", "original_file_path": "macros/internal/helpers/dateadd.sql", "unique_id": "macro.dbtvault.sqlserver__dateadd", "macro_sql": "{% macro sqlserver__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        millisecond,\n        86399999,\n        CAST({{ from_date_or_timestamp }} AS DATETIME2)\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3602057, "supported_languages": null}, "macro.dbtvault.print_list": {"name": "print_list", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/stage_processing_macros/print_list.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/print_list.sql", "unique_id": "macro.dbtvault.print_list", "macro_sql": "\n\n{%- macro print_list(list_to_print=none, indent=4, columns_to_escape=none) -%}\n\n    {%- for col_name in list_to_print -%}\n        {%- if col_name | lower in columns_to_escape | map('lower') | list -%}\n            {{- dbtvault.escape_column_name(col_name) | indent(indent) -}}{{ \",\\n    \" if not loop.last }}\n        {%- else -%}\n            {{- col_name | indent(indent) -}}{{ \",\\n    \" if not loop.last }}\n        {%- endif -%}\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3615494, "supported_languages": null}, "macro.dbtvault.process_columns_to_select": {"name": "process_columns_to_select", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/stage_processing_macros/process_columns_to_select.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/process_columns_to_select.sql", "unique_id": "macro.dbtvault.process_columns_to_select", "macro_sql": "\n\n{%- macro process_columns_to_select(columns_list=none, exclude_columns_list=none) -%}\n\n    {% set columns_list = columns_list | list %}\n    {% set exclude_columns_list = exclude_columns_list | list %}\n\n    {% set columns_to_select = [] %}\n\n    {% if not dbtvault.is_list(columns_list) or not dbtvault.is_list(exclude_columns_list)  %}\n\n        {{- exceptions.raise_compiler_error(\"One or both arguments are not of list type.\") -}}\n\n    {%- endif -%}\n\n    {%- if dbtvault.is_something(columns_list) and dbtvault.is_something(exclude_columns_list) -%}\n\n        {%- for col in columns_list -%}\n\n            {%- if (col | upper) not in (exclude_columns_list | map('upper') | list) -%}\n                {%- do columns_to_select.append(col) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- do return(columns_to_select) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_list", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3637238, "supported_languages": null}, "macro.dbtvault.process_hash_column_excludes": {"name": "process_hash_column_excludes", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/stage_processing_macros/process_hash_column_excludes.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/process_hash_column_excludes.sql", "unique_id": "macro.dbtvault.process_hash_column_excludes", "macro_sql": "\n\n{%- macro process_hash_column_excludes(hash_columns=none, source_columns=none) -%}\n\n    {%- set processed_hash_columns = {} -%}\n\n    {%- for col, col_mapping in hash_columns.items() -%}\n\n        {%- if col_mapping is mapping -%}\n            {%- if col_mapping.exclude_columns -%}\n\n                {%- if col_mapping.columns -%}\n\n                    {%- set columns_to_hash = dbtvault.process_columns_to_select(source_columns, col_mapping.columns) -%}\n\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\n                    {%- do hash_columns[col].update({'columns': columns_to_hash}) -%}\n\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\n                {%- else -%}\n\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\n                    {%- do hash_columns[col].update({'columns': source_columns}) -%}\n\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- do processed_hash_columns.update({col: col_mapping}) -%}\n            {%- endif -%}\n        {%- else -%}\n            {%- do processed_hash_columns.update({col: col_mapping}) -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- do return(processed_hash_columns) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.process_columns_to_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3671613, "supported_languages": null}, "macro.dbtvault.extract_column_names": {"name": "extract_column_names", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/stage_processing_macros/extract_column_names.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/extract_column_names.sql", "unique_id": "macro.dbtvault.extract_column_names", "macro_sql": "\n\n{%- macro extract_column_names(columns_dict=none) -%}\n\n    {%- set extracted_column_names = [] -%}\n\n    {%- if columns_dict is mapping -%}\n        {%- for key, value in columns_dict.items() -%}\n            {%- do extracted_column_names.append(key) -%}\n        {%- endfor -%}\n\n        {%- do return(extracted_column_names) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3683267, "supported_languages": null}, "macro.dbtvault.extract_null_column_names": {"name": "extract_null_column_names", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/stage_processing_macros/extract_null_column_names.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/extract_null_column_names.sql", "unique_id": "macro.dbtvault.extract_null_column_names", "macro_sql": "\n\n{%- macro extract_null_column_names(columns_dict=none) -%}\n\n    {%- set extracted_column_names = [] -%}\n\n    {%- if columns_dict is mapping -%}\n        {%- for key, value in columns_dict.items() -%}\n            {%- if dbtvault.is_something(value) -%}\n                {% if dbtvault.is_list(value) %}\n                    {% for col_name in value %}\n                        {%- do extracted_column_names.append(col_name) -%}\n                        {%- do extracted_column_names.append(col_name ~ \"_ORIGINAL\") -%}\n                    {% endfor %}\n                {%  else %}\n                    {%- do extracted_column_names.append(value) -%}\n                    {%- do extracted_column_names.append(value ~ \"_ORIGINAL\") -%}\n                {% endif %}\n            {%- endif -%}\n        {%- endfor -%}\n\n        {%- do return(extracted_column_names) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3706987, "supported_languages": null}, "macro.dbtvault.process_columns_to_escape": {"name": "process_columns_to_escape", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/stage_processing_macros/process_columns_to_escape.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/process_columns_to_escape.sql", "unique_id": "macro.dbtvault.process_columns_to_escape", "macro_sql": "\n\n{%- macro process_columns_to_escape(derived_columns_list=none) -%}\n\n    {%- if derived_columns_list -%}\n\n        {%- set ns = namespace(columns_to_escape=[]) -%}\n        {%- set escape_char_left, escape_char_right = dbtvault.get_escape_characters() -%}\n        {%- set quote_pattern = '\\{}([a-zA-Z\\s]+)\\{}'.format(escape_char_left, escape_char_right) -%}\n        {%- set re = modules.re -%}\n\n        {%- for col_name, col_def in derived_columns_list.items() -%}\n\n            {%- if col_def is mapping -%}\n                {%- if col_def['escape'] == true -%}\n                    {%- if dbtvault.is_list(col_def['source_column']) -%}\n                        {%- set ns.columns_to_escape = ns.columns_to_escape + col_def['source_column'] -%}\n                    {%- else -%}\n                        {%- set ns.columns_to_escape = ns.columns_to_escape + [col_def['source_column']] -%}\n                    {%- endif -%}\n                {%- endif -%}\n            {%- elif col_def is string -%}\n\n                {#- Find a quoted string in the column definition so that we can escape it everywhere else -#}\n                {% set is_match = re.findall(quote_pattern, col_def, re.IGNORECASE) %}\n\n                {%- if is_match -%}\n                    {%- set ns.columns_to_escape = ns.columns_to_escape + is_match -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n        {%- do return(ns.columns_to_escape | unique | list) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.get_escape_characters", "macro.dbtvault.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3742335, "supported_languages": null}, "macro.dbtvault.log_relation_sources": {"name": "log_relation_sources", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/logging/log_relation_sources.sql", "original_file_path": "macros/internal/helpers/logging/log_relation_sources.sql", "unique_id": "macro.dbtvault.log_relation_sources", "macro_sql": "{% macro log_relation_sources(relation, source_count) %}\n    {{ return(adapter.dispatch('log_relation_sources', 'dbtvault')(relation=relation, source_count=source_count)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__log_relation_sources"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3753874, "supported_languages": null}, "macro.dbtvault.default__log_relation_sources": {"name": "default__log_relation_sources", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/logging/log_relation_sources.sql", "original_file_path": "macros/internal/helpers/logging/log_relation_sources.sql", "unique_id": "macro.dbtvault.default__log_relation_sources", "macro_sql": "{% macro default__log_relation_sources(relation, source_count) %}\n\n    {%- if execute -%}\n\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}.{}\".format(relation.database, relation.schema, relation.identifier),\n                                                                        source_count)) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3760483, "supported_languages": null}, "macro.dbtvault.databricks__log_relation_sources": {"name": "databricks__log_relation_sources", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/internal/helpers/logging/log_relation_sources.sql", "original_file_path": "macros/internal/helpers/logging/log_relation_sources.sql", "unique_id": "macro.dbtvault.databricks__log_relation_sources", "macro_sql": "{% macro databricks__log_relation_sources(relation, source_count) %}\n\n    {%- if execute -%}\n\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}\".format(relation.schema, relation.identifier),\n                                                                        source_count)) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3766644, "supported_languages": null}, "macro.dbtvault.bigquery__link": {"name": "bigquery__link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/bigquery/link.sql", "original_file_path": "macros/tables/bigquery/link.sql", "unique_id": "macro.dbtvault.bigquery__link", "macro_sql": "\n\n{%- macro bigquery__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\n    {%- endif %}\n        ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\n        ) AS row_number\n    FROM {{ ref (src) }} AS rr\n    {%- if stage_count == 1 %}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition ='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition ='IS NOT NULL') }}\n    QUALIFY row_number = 1\n    {%- endif %}\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n    ),\n\n{% endfor -%}\n\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{% endif %}\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\n    QUALIFY row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.3868203, "supported_languages": null}, "macro.dbtvault.bigquery__sat": {"name": "bigquery__sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/bigquery/sat.sql", "original_file_path": "macros/tables/bigquery/sat.sql", "unique_id": "macro.dbtvault.bigquery__sat", "macro_sql": "\n\n{%- macro bigquery__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{ dbtvault.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                             src_payload=src_payload,\n                             src_extra_columns=src_extra_columns,\n                             src_eff=src_eff, src_ldts=src_ldts,\n                             src_source=src_source, source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.387765, "supported_languages": null}, "macro.dbtvault.bigquery__eff_sat": {"name": "bigquery__eff_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/bigquery/eff_sat.sql", "original_file_path": "macros/tables/bigquery/eff_sat.sql", "unique_id": "macro.dbtvault.bigquery__eff_sat", "macro_sql": "\n\n{%- macro bigquery__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\n{%- set fk_cols = dbtvault.expand_column_list(columns=[src_dfk, src_sfk]) -%}\n{%- set dfk_cols = dbtvault.expand_column_list(columns=[src_dfk]) -%}\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\n\n{%- set max_datetime = dbtvault.max_datetime() %}\n\nWITH source_data AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ dbtvault.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{%- if dbtvault.is_any_incremental() %}\n\n{# Selecting the most recent records for each link hashkey -#}\nlatest_records_unranked AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'b') }},\n           ROW_NUMBER() OVER (\n                PARTITION BY {{ dbtvault.prefix([src_pk], 'b') }}\n                ORDER BY b.{{ src_ldts }} DESC\n           ) AS row_num\n    FROM {{ this }} AS b\n),\n\nlatest_records AS (\n    SELECT *\n    FROM latest_records_unranked\n    WHERE row_num = 1\n),\n\n{# Selecting the open records of the most recent records for each link hashkey -#}\nlatest_open AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'c') }}\n    FROM latest_records AS c\n    WHERE DATE(c.{{ src_end_date }}) = CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\n),\n\n{# Selecting the closed records of the most recent records for each link hashkey -#}\nlatest_closed AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'd') }}\n    FROM latest_records AS d\n    WHERE DATE(d.{{ src_end_date }}) != CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\n),\n\n{# Identifying the completely new link relationships to be opened in eff sat -#}\nnew_open_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'f') }},\n        {{ dbtvault.alias_all(fk_cols, 'f') }},\n        {% if dbtvault.is_something(src_extra_columns) %}\n            {{ dbtvault.prefix([src_extra_columns], 'f') }},\n        {% endif -%}\n        {%- if is_auto_end_dating %}\n        f.{{ src_eff }} AS {{ src_start_date }},\n        {% else %}\n        f.{{ src_start_date }} AS {{ src_start_date }},\n        {% endif %}\n        f.{{ src_end_date }} AS {{ src_end_date }},\n        f.{{ src_eff }} AS {{ src_eff }},\n        f.{{ src_ldts }},\n        f.{{ src_source }}\n    FROM source_data AS f\n    LEFT JOIN latest_records AS lr\n    ON {{ dbtvault.multikey(src_pk, prefix=['f','lr'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='lr', condition='IS NULL') }}\n),\n\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\nnew_reopened_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'lc') }},\n        {{ dbtvault.alias_all(fk_cols, 'lc') }},\n        {% if dbtvault.is_something(src_extra_columns) %}\n            {{ dbtvault.prefix([src_extra_columns], 'g') }},\n        {% endif -%}\n        {%- if is_auto_end_dating %}\n        g.{{ src_eff }} AS {{ src_start_date }},\n        {% else %}\n        g.{{ src_start_date }} AS {{ src_start_date }},\n        {% endif %}\n        g.{{ src_end_date }} AS {{ src_end_date }},\n        g.{{ src_eff }} AS {{ src_eff }},\n        g.{{ src_ldts }},\n        g.{{ src_source }}\n    FROM source_data AS g\n    INNER JOIN latest_closed AS lc\n    ON {{ dbtvault.multikey(src_pk, prefix=['g','lc'], condition='=') }}\n    WHERE CAST((g.{{ src_end_date }}) AS DATE) = CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\n),\n\n{%- if is_auto_end_dating %}\n\n{# Creating the closing records -#}\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\nnew_closed_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'lo') }},\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\n        {% if dbtvault.is_something(src_extra_columns) %}\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\n        {% endif -%}\n        lo.{{ src_start_date }} AS {{ src_start_date }},\n        h.{{ src_eff }} AS {{ src_end_date }},\n        h.{{ src_eff }} AS {{ src_eff }},\n        h.{{ src_ldts }},\n        lo.{{ src_source }}\n    FROM source_data AS h\n    INNER JOIN latest_open AS lo\n    ON {{ dbtvault.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\n    WHERE ({{ dbtvault.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\n),\n\n{#- else if (not) is_auto_end_dating -#}\n{% else %}\n\nnew_closed_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'lo') }},\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\n        {% if dbtvault.is_something(src_extra_columns) %}\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\n        {% endif -%}\n        h.{{ src_start_date }} AS {{ src_start_date }},\n        h.{{ src_end_date }} AS {{ src_end_date }},\n        h.{{ src_eff }} AS {{ src_eff }},\n        h.{{ src_ldts }},\n        lo.{{ src_source }}\n    FROM source_data AS h\n    LEFT JOIN Latest_open AS lo\n    ON lo.{{ src_pk }} = h.{{ src_pk }}\n    LEFT JOIN latest_closed AS lc\n    ON lc.{{ src_pk }} = h.{{ src_pk }}\n    WHERE CAST((h.{{ src_end_date }}) AS DATE) != CAST(PARSE_DATETIME('%F %H:%M:%E6S', '{{ max_datetime }}') AS DATE)\n    AND lo.{{ src_pk }} IS NOT NULL\n    AND lc.{{ src_pk }} IS NULL\n),\n\n{#- end if is_auto_end_dating -#}\n{%- endif %}\n\nrecords_to_insert AS (\n    SELECT * FROM new_open_records\n    UNION DISTINCT\n    SELECT * FROM new_reopened_records\n    UNION DISTINCT\n    SELECT * FROM new_closed_records\n)\n\n{#- else if not dbtvault.is_any_incremental() -#}\n{%- else %}\n\nrecords_to_insert AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'i') }}\n    FROM source_data AS i\n)\n\n{#- end if not dbtvault.is_any_incremental() -#}\n{%- endif %}\n\nSELECT *\nFROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.max_datetime", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4009898, "supported_languages": null}, "macro.dbtvault.bigquery__xts": {"name": "bigquery__xts", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/bigquery/xts.sql", "original_file_path": "macros/tables/bigquery/xts.sql", "unique_id": "macro.dbtvault.bigquery__xts", "macro_sql": "\n\n{%- macro bigquery__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{ dbtvault.default__xts(src_pk=src_pk,\n                         src_satellite=src_satellite,\n                         src_extra_columns=src_extra_columns,\n                         src_ldts=src_ldts,\n                         src_source=src_source,\n                         source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4018235, "supported_languages": null}, "macro.dbtvault.bigquery__hub": {"name": "bigquery__hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/bigquery/hub.sql", "original_file_path": "macros/tables/bigquery/hub.sql", "unique_id": "macro.dbtvault.bigquery__hub", "macro_sql": "\n\n{%- macro bigquery__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\n    row_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    QUALIFY row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),\n\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n{%- if stage_count > 1 %}\n\n    row_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    QUALIFY row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.410482, "supported_languages": null}, "macro.dbtvault.bigquery__ma_sat": {"name": "bigquery__ma_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/bigquery/ma_sat.sql", "original_file_path": "macros/tables/bigquery/ma_sat.sql", "unique_id": "macro.dbtvault.bigquery__ma_sat", "macro_sql": "\n\n{%- macro bigquery__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) %}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set cdk_cols = dbtvault.expand_column_list(columns=[src_cdk]) -%}\n{%- set cols_for_latest = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\n{# Select unique source records -#}\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols_with_rank, 's', alias_target='source') }}\n    {%- else %}\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 's', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS s\n    WHERE {{ dbtvault.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\n    {%- for child_key in src_cdk %}\n        AND {{ dbtvault.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\n    {%- endfor %}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n        AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n        AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{# if any_incremental -#}\n{% if dbtvault.is_any_incremental() %}\n\nsource_data_with_count AS (\n    SELECT a.*,\n           b.source_count\n    FROM source_data a\n    INNER JOIN (\n        SELECT {{ dbtvault.prefix([src_pk], 't') }},\n            COUNT(*) AS source_count\n        FROM (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }}, {{ dbtvault.prefix([src_hashdiff], 's', alias_target='source') }}, {{ dbtvault.prefix(cdk_cols, 's') }} FROM source_data AS s) AS t\n        GROUP BY {{ dbtvault.prefix([src_pk], 't') }}\n    ) AS b\n    ON {{ dbtvault.multikey([src_pk], prefix=['a','b'], condition='=') }}\n),\n\n{# Select latest records from satellite, restricted to PKs in source data -#}\nlatest_records AS (\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'mas', alias_target='target') }},\n           mas.latest_rank,\n           DENSE_RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'mas') }}\n                              ORDER BY {{ dbtvault.prefix([src_hashdiff], 'mas', alias_target='target') }},\n                                       {{ dbtvault.prefix([src_cdk], 'mas') }} ASC\n           ) AS check_rank\n    FROM (\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\n           RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'inner_mas') }}\n                        ORDER BY {{ dbtvault.prefix([src_ldts], 'inner_mas') }} DESC\n           ) AS latest_rank\n    FROM {{ this }} AS inner_mas\n    INNER JOIN (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\n        ON {{ dbtvault.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\n    ) AS mas\n    WHERE latest_rank = 1\n),\n\n{# Select summary details for each group of latest records -#}\nlatest_group_details AS (\n    SELECT {{ dbtvault.prefix([src_pk], 'lr') }},\n           {{ dbtvault.prefix([src_ldts], 'lr') }},\n           MAX(lr.check_rank) AS latest_count\n    FROM latest_records AS lr\n    GROUP BY {{ dbtvault.prefix([src_pk], 'lr') }}, {{ dbtvault.prefix([src_ldts], 'lr') }}\n),\n\n{# endif any_incremental -#}\n{%- endif %}\n\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\nrecords_to_insert AS (\n{% if not dbtvault.is_any_incremental() %}\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data') }}\n    FROM source_data\n{%- endif %}\n\n{# if any_incremental -#}\n{% if dbtvault.is_any_incremental() %}\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data_with_count') }}\n    FROM source_data_with_count\n    WHERE EXISTS (\n        SELECT 1\n        FROM source_data_with_count AS stage\n        WHERE NOT EXISTS (\n            SELECT 1\n            FROM (\n                SELECT {{ dbtvault.prefix(cols_for_latest, 'lr', alias_target='target') }},\n                       lg.latest_count\n                FROM latest_records AS lr\n                INNER JOIN latest_group_details AS lg\n                    ON {{ dbtvault.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\n                    AND {{ dbtvault.prefix([src_ldts], 'lr') }} = {{ dbtvault.prefix([src_ldts], 'lg') }}\n            ) AS active_records\n            WHERE {{ dbtvault.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\n                AND {{ dbtvault.prefix([src_hashdiff], 'stage') }} = {{ dbtvault.prefix([src_hashdiff], 'active_records', alias_target='target') }}\n{# In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference #}\n{#        AND {{ dbtvault.prefix([src_ldts], 'stage') }} = {{ dbtvault.prefix([src_ldts], 'active_records') }} #}\n                AND {{ dbtvault.multikey(src_cdk, prefix=['stage', 'active_records'], condition='=') }}\n                AND stage.source_count = active_records.latest_count\n        )\n        AND {{ dbtvault.multikey([src_pk], prefix=['source_data_with_count', 'stage'], condition='=') }}\n    )\n{# endif any_incremental -#}\n{%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4228346, "supported_languages": null}, "macro.dbtvault.bigquery__pit": {"name": "bigquery__pit", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/bigquery/pit.sql", "original_file_path": "macros/tables/bigquery/pit.sql", "unique_id": "macro.dbtvault.bigquery__pit", "macro_sql": "\n\n{%- macro bigquery__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) %}\n\n{#- Acquiring the source relation for the AS_OF table -#}\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n    {%- set source_name = as_of_dates_table | first -%}\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\n{%- endif -%}\n    {%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if not enable_ghost_record -%}\n{#- Setting ghost values to replace NULLS -#}\n{%- set ghost_pk = '0x0000000000000000' -%}\n{%- set ghost_date = '1900-01-01 00:00:00.000000' %}\n{%- endif -%}\n\n{%- if dbtvault.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT * FROM {{ as_of_table_relation }}\n),\n\n{%- if dbtvault.is_any_incremental() %}\n\n{{ dbtvault.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\nbackfill_rows_as_of_dates AS (\n    SELECT\n        {{ dbtvault.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM new_rows_pks AS a\n    INNER JOIN backfill_as_of AS b\n        ON (1=1 )\n),\n\nbackfill AS (\n    SELECT\n        {{ dbtvault.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n    {%- for sat_name in satellites -%}\n        {%- set sat_key_name = (satellites[sat_name]['pk'].keys() | list )[0] | upper -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] | upper -%}\n        {%- set sat_name = sat_name | upper -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n\n        {% if enable_ghost_record %}\n        MIN({{ sat_name | lower ~ '_src' }}.{{ src_pk }}) AS {{ sat_name }}_{{ sat_pk_name }},\n        DATETIME(MIN({{ sat_name | lower ~ '_src' }}.{{ src_ldts }})) AS {{ sat_name }}_{{ sat_ldts_name }}\n        {%- else -%}\n        '{{ ghost_pk }}' AS {{ sat_name ~ '_' ~ sat_key_name }},\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}') AS {{ sat_name ~ '_' ~ sat_ldts_name }}\n        {%- endif -%}\n        {{- ',' if not loop.last -}}\n    {%- endfor %}\n    FROM backfill_rows_as_of_dates AS a\n\n    {% for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\n        {{ \"AND\" | indent(4) }} {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\n        {%- if enable_ghost_record %}\n        {{ \"OR\" | indent(4) }} {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} = DATETIME('1900-01-01')\n        {%- endif -%}\n    {% endfor %}\n\n    GROUP BY\n        {{ dbtvault.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n    ORDER BY (1)\n),\n{%- endif %}\n\nnew_rows_as_of_dates AS (\n    SELECT\n        {{ dbtvault.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM {{ ref(source_model) }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n    ON (1=1)\n),\n\nnew_rows AS (\n    SELECT\n        {{ dbtvault.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_name = sat_name -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n\n        {%- if enable_ghost_record %}\n        MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}) AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\n        DATETIME(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }})) AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\n        {%- else -%}\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n        '{{ ghost_pk }}') AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}')) AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\n        {%- endif -%}\n        {{- \",\" if not loop.last }}\n    {%- endfor %}\n    FROM new_rows_as_of_dates AS a\n\n\n    {% for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\n        {{ \"AND\" | indent(4) }} {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\n        {%- if enable_ghost_record %}\n        {{ \"OR\" | indent(4) }} {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} = DATETIME('1900-01-01')\n        {%- endif %}\n\n    {% endfor -%}\n\n    GROUP BY\n        {{ dbtvault.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n    ORDER BY (1)\n),\n\npit AS (\n    SELECT * FROM new_rows\n{%- if dbtvault.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap_pks\n    UNION ALL\n    SELECT * FROM backfill\n{%- endif %}\n)\n\nSELECT DISTINCT * FROM pit\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_any_incremental", "macro.dbtvault.as_of_date_window", "macro.dbtvault.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4456186, "supported_languages": null}, "macro.dbtvault.bigquery__bridge": {"name": "bigquery__bridge", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/bigquery/bridge.sql", "original_file_path": "macros/tables/bigquery/bridge.sql", "unique_id": "macro.dbtvault.bigquery__bridge", "macro_sql": "\n\n{%- macro bigquery__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\n\n{{ dbtvault.default__bridge(src_pk=src_pk,\n                            as_of_dates_table=as_of_dates_table,\n                            bridge_walk=bridge_walk,\n                            stage_tables_ldts=stage_tables_ldts,\n                            src_extra_columns=src_extra_columns,\n                            src_ldts=src_ldts,\n                            source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4465816, "supported_languages": null}, "macro.dbtvault.bigquery__t_link": {"name": "bigquery__t_link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/bigquery/t_link.sql", "original_file_path": "macros/tables/bigquery/t_link.sql", "unique_id": "macro.dbtvault.bigquery__t_link", "macro_sql": "\n\n{%- macro bigquery__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{ dbtvault.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                            src_extra_columns=src_extra_columns,\n                            src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                            source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4474692, "supported_languages": null}, "macro.dbtvault.databricks__link": {"name": "databricks__link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/databricks/link.sql", "original_file_path": "macros/tables/databricks/link.sql", "unique_id": "macro.dbtvault.databricks__link", "macro_sql": "\n\n{%- macro databricks__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{ dbtvault.default__link(src_pk=src_pk,\n                          src_fk=src_fk,\n                          src_extra_columns=src_extra_columns,\n                          src_ldts=src_ldts,\n                          src_source=src_source,\n                          source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4482732, "supported_languages": null}, "macro.dbtvault.databricks__sat": {"name": "databricks__sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/databricks/sat.sql", "original_file_path": "macros/tables/databricks/sat.sql", "unique_id": "macro.dbtvault.databricks__sat", "macro_sql": "\n\n{%- macro databricks__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{ dbtvault.default__sat(src_pk=src_pk,\n                         src_hashdiff=src_hashdiff,\n                         src_payload=src_payload,\n                         src_extra_columns=src_extra_columns,\n                         src_eff=src_eff,\n                         src_ldts=src_ldts,\n                         src_source=src_source,\n                         source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4491994, "supported_languages": null}, "macro.dbtvault.databricks__hub": {"name": "databricks__hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/databricks/hub.sql", "original_file_path": "macros/tables/databricks/hub.sql", "unique_id": "macro.dbtvault.databricks__hub", "macro_sql": "\n\n{%- macro databricks__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{ dbtvault.default__hub(src_pk=src_pk,\n                         src_nk=src_nk,\n                         src_extra_columns=src_extra_columns,\n                         src_ldts=src_ldts,\n                         src_source=src_source,\n                         source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4499679, "supported_languages": null}, "macro.dbtvault.link": {"name": "link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/link.sql", "original_file_path": "macros/tables/snowflake/link.sql", "unique_id": "macro.dbtvault.link", "macro_sql": "\n\n{%- macro link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_fk=src_fk,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- if not dbtvault.is_list(source_model) -%}\n        {%- set source_model = [source_model] -%}\n    {%- endif -%}\n\n    {{ dbtvault.log_relation_sources(this, source_model | length) }}\n\n    {{ dbtvault.prepend_generated_by() }}\n\n    {{ adapter.dispatch('link', 'dbtvault')(src_pk=src_pk, src_fk=src_fk,\n                                             src_extra_columns=src_extra_columns,\n                                             src_ldts=src_ldts, src_source=src_source,\n                                             source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.is_list", "macro.dbtvault.log_relation_sources", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4565027, "supported_languages": null}, "macro.dbtvault.default__link": {"name": "default__link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/link.sql", "original_file_path": "macros/tables/snowflake/link.sql", "unique_id": "macro.dbtvault.default__link", "macro_sql": "{%- macro default__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    {%- if stage_count == 1 %}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\n    {%- endif %}\n    QUALIFY row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{% endif %}\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\n    QUALIFY row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4629276, "supported_languages": null}, "macro.dbtvault.sat": {"name": "sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/sat.sql", "original_file_path": "macros/tables/snowflake/sat.sql", "unique_id": "macro.dbtvault.sat", "macro_sql": "\n\n{%- macro sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_hashdiff=src_hashdiff, src_payload=src_payload,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- set src_payload = dbtvault.process_payload_column_excludes(\n                              src_pk=src_pk, src_hashdiff=src_hashdiff,\n                              src_payload=src_payload, src_extra_columns=src_extra_columns, src_eff=src_eff,\n                              src_ldts=src_ldts, src_source=src_source, source_model=source_model) -%}\n\n    {{ dbtvault.prepend_generated_by() }}\n\n    {{ adapter.dispatch('sat', 'dbtvault')(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                           src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                           src_eff=src_eff, src_ldts=src_ldts,\n                                           src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.process_payload_column_excludes", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4693952, "supported_languages": null}, "macro.dbtvault.default__sat": {"name": "default__sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/sat.sql", "original_file_path": "macros/tables/snowflake/sat.sql", "unique_id": "macro.dbtvault.default__sat", "macro_sql": "{%- macro default__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set window_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set pk_cols = dbtvault.expand_column_list(columns=[src_pk]) -%}\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'a', alias_target='source') }}\n    {%- else %}\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ dbtvault.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {% endif %}\n),\n\n{%- if dbtvault.is_any_incremental() %}\n\nlatest_records AS (\n    SELECT {{ dbtvault.prefix(window_cols, 'a', alias_target='target') }}\n    FROM (\n        SELECT {{ dbtvault.prefix(window_cols, 'current_records', alias_target='target') }},\n            RANK() OVER (\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'current_records') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'current_records') }} DESC\n            ) AS rank\n        FROM {{ this }} AS current_records\n            JOIN (\n                SELECT DISTINCT {{ dbtvault.prefix([src_pk], 'source_data') }}\n                FROM source_data\n            ) AS source_records\n                ON {{ dbtvault.multikey(src_pk, prefix=['current_records','source_records'], condition='=') }}\n    ) AS a\n    WHERE a.rank = 1\n),\n\n{%- endif %}\n\n{%- if enable_ghost_record %}\n\nghost AS (\n    {{ dbtvault.create_ghost_record(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                    src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                    src_eff=src_eff, src_ldts=src_ldts,\n                                    src_source=src_source, source_model=source_model) }}\n),\n\n{%- endif %}\n\nrecords_to_insert AS (\n    {%- if enable_ghost_record %}\n    SELECT\n        {{ dbtvault.alias_all(source_cols, 'g') }}\n        FROM ghost AS g\n        {%- if dbtvault.is_any_incremental() %}\n        WHERE NOT EXISTS ( SELECT 1 FROM {{ this }} AS h WHERE {{ dbtvault.prefix([src_hashdiff], 'h', alias_target='target') }} = {{ dbtvault.prefix([src_hashdiff], 'g') }} )\n        {%- endif %}\n    UNION {% if target.type == 'bigquery' -%} DISTINCT {%- endif -%}\n    {%- endif %}\n    SELECT DISTINCT {{ dbtvault.alias_all(source_cols, 'stage') }}\n    FROM source_data AS stage\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN latest_records\n    ON {{ dbtvault.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\n        AND {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} = {{ dbtvault.prefix([src_hashdiff], 'stage') }}\n    WHERE {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} IS NULL\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.create_ghost_record", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4757993, "supported_languages": null}, "macro.dbtvault.eff_sat": {"name": "eff_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/eff_sat.sql", "original_file_path": "macros/tables/snowflake/eff_sat.sql", "unique_id": "macro.dbtvault.eff_sat", "macro_sql": "\n\n{%- macro eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                           src_start_date=src_start_date, src_end_date=src_end_date,\n                                           src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {{ dbtvault.prepend_generated_by() }}\n\n    {{ adapter.dispatch('eff_sat', 'dbtvault')(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                               src_extra_columns=src_extra_columns,\n                                               src_start_date=src_start_date, src_end_date=src_end_date,\n                                               src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                               source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4816363, "supported_languages": null}, "macro.dbtvault.default__eff_sat": {"name": "default__eff_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/eff_sat.sql", "original_file_path": "macros/tables/snowflake/eff_sat.sql", "unique_id": "macro.dbtvault.default__eff_sat", "macro_sql": "{%- macro default__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\n{%- set fk_cols = dbtvault.expand_column_list(columns=[src_dfk, src_sfk]) -%}\n{%- set dfk_cols = dbtvault.expand_column_list(columns=[src_dfk]) -%}\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\n\n{%- set max_datetime = dbtvault.max_datetime() %}\n\nWITH source_data AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ dbtvault.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{%- if dbtvault.is_any_incremental() %}\n\n{# Selecting the most recent records for each link hashkey -#}\nlatest_records AS (\n    SELECT * FROM (\n        SELECT {{ dbtvault.alias_all(source_cols, 'b') }},\n               ROW_NUMBER() OVER (\n                    PARTITION BY {{ dbtvault.prefix([src_pk], 'b') }}\n                    ORDER BY b.{{ src_ldts }} DESC\n               ) AS row_num\n        FROM {{ this }} AS b\n    ) AS inner\n    WHERE row_num = 1\n),\n\n{# Selecting the open records of the most recent records for each link hashkey -#}\nlatest_open AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'c') }}\n    FROM latest_records AS c\n    WHERE TO_DATE(c.{{ src_end_date }}) = TO_DATE('{{ max_datetime }}')\n),\n\n{# Selecting the closed records of the most recent records for each link hashkey -#}\nlatest_closed AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'd') }}\n    FROM latest_records AS d\n    WHERE TO_DATE(d.{{ src_end_date }}) != TO_DATE('{{ max_datetime }}')\n),\n\n{# Identifying the completely new link relationships to be opened in eff sat -#}\nnew_open_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'f') }},\n        {{ dbtvault.alias_all(fk_cols, 'f') }},\n        {% if dbtvault.is_something(src_extra_columns) %}\n            {{ dbtvault.prefix([src_extra_columns], 'f') }},\n        {% endif -%}\n        {%- if is_auto_end_dating %}\n        f.{{ src_eff }} AS {{ src_start_date }},\n        {% else %}\n        f.{{ src_start_date }} AS {{ src_start_date }},\n        {% endif %}\n        f.{{ src_end_date }} AS {{ src_end_date }},\n        f.{{ src_eff }} AS {{ src_eff }},\n        f.{{ src_ldts }},\n        f.{{ src_source }}\n    FROM source_data AS f\n    LEFT JOIN latest_records AS lr\n    ON {{ dbtvault.multikey(src_pk, prefix=['f','lr'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='lr', condition='IS NULL') }}\n),\n\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\nnew_reopened_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'lc') }},\n        {{ dbtvault.alias_all(fk_cols, 'lc') }},\n        {% if dbtvault.is_something(src_extra_columns) %}\n            {{ dbtvault.prefix([src_extra_columns], 'g') }},\n        {% endif -%}\n        {%- if is_auto_end_dating %}\n        g.{{ src_eff }} AS {{ src_start_date }},\n        {% else %}\n        g.{{ src_start_date }} AS {{ src_start_date }},\n        {% endif %}\n        g.{{ src_end_date }} AS {{ src_end_date }},\n        g.{{ src_eff }} AS {{ src_eff }},\n        g.{{ src_ldts }},\n        g.{{ src_source }}\n    FROM source_data AS g\n    INNER JOIN latest_closed AS lc\n    ON {{ dbtvault.multikey(src_pk, prefix=['g','lc'], condition='=') }}\n    WHERE TO_DATE(g.{{ src_end_date }}) = TO_DATE('{{ max_datetime }}')\n),\n\n{%- if is_auto_end_dating %}\n\n{# Creating the closing records -#}\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\nnew_closed_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'lo') }},\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\n        {% if dbtvault.is_something(src_extra_columns) %}\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\n        {% endif -%}\n        lo.{{ src_start_date }} AS {{ src_start_date }},\n        h.{{ src_eff }} AS {{ src_end_date }},\n        h.{{ src_eff }} AS {{ src_eff }},\n        h.{{ src_ldts }},\n        lo.{{ src_source }}\n    FROM source_data AS h\n    INNER JOIN latest_open AS lo\n    ON {{ dbtvault.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\n    WHERE ({{ dbtvault.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\n),\n\n{#- else if (not) is_auto_end_dating -#}\n{% else %}\n\nnew_closed_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'lo') }},\n        {{ dbtvault.alias_all(fk_cols, 'h') }},\n        {% if dbtvault.is_something(src_extra_columns) %}\n            {{ dbtvault.prefix([src_extra_columns], 'h') }},\n        {% endif -%}\n        h.{{ src_start_date }} AS {{ src_start_date }},\n        h.{{ src_end_date }} AS {{ src_end_date }},\n        h.{{ src_eff }} AS {{ src_eff }},\n        h.{{ src_ldts }},\n        lo.{{ src_source }}\n    FROM source_data AS h\n    LEFT JOIN latest_open AS lo\n    ON {{ dbtvault.multikey(src_pk, prefix=['lo', 'h'], condition='=') }}\n    LEFT JOIN latest_closed AS lc\n    ON {{ dbtvault.multikey(src_pk, prefix=['lc', 'h'], condition='=') }}\n    WHERE TO_DATE(h.{{ src_end_date }}) != TO_DATE('{{ max_datetime }}')\n    AND {{ dbtvault.multikey(src_pk, prefix='lo', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(src_pk, prefix='lc', condition='IS NULL') }}\n),\n\n{#- end if is_auto_end_dating -#}\n{%- endif %}\n\nrecords_to_insert AS (\n    SELECT * FROM new_open_records\n    UNION\n    SELECT * FROM new_reopened_records\n    UNION\n    SELECT * FROM new_closed_records\n)\n\n{#- else if not dbtvault.is_any_incremental() -#}\n{%- else %}\n\nrecords_to_insert AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'i') }}\n    FROM source_data AS i\n)\n\n{#- end if not dbtvault.is_any_incremental() -#}\n{%- endif %}\n\nSELECT * FROM records_to_insert\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.max_datetime", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4920316, "supported_languages": null}, "macro.dbtvault.xts": {"name": "xts", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/xts.sql", "original_file_path": "macros/tables/snowflake/xts.sql", "unique_id": "macro.dbtvault.xts", "macro_sql": "\n\n{%- macro xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_satellite=src_satellite,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- if not dbtvault.is_list(source_model) -%}\n        {%- set source_model = [source_model] -%}\n    {%- endif -%}\n\n    {{ dbtvault.prepend_generated_by() }}\n\n    {{ adapter.dispatch('xts', 'dbtvault')(src_pk=src_pk,\n                                            src_satellite=src_satellite,\n                                            src_extra_columns=src_extra_columns,\n                                            src_ldts=src_ldts,\n                                            src_source=src_source,\n                                            source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.is_list", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.4991486, "supported_languages": null}, "macro.dbtvault.default__xts": {"name": "default__xts", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/xts.sql", "original_file_path": "macros/tables/snowflake/xts.sql", "unique_id": "macro.dbtvault.default__xts", "macro_sql": "{%- macro default__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set hashdiff_col_name_alias = 'HASHDIFF' -%}\n{%- set satellite_name_col_name_alias = 'SATELLITE_NAME' %}\n{%- set satellite_count = src_satellite.keys() | list | length %}\n{%- set stage_count = source_model | length %}\n\n{%- if execute -%}\n    {%- do dbt_utils.log_info('Loading {} from {} source(s) and {} satellite(s)'.format(\"{}.{}.{}\".format(this.database, this.schema, this.identifier),\n                                                                                        stage_count, satellite_count)) -%}\n{%- endif %}\n\n{%- set ns = namespace(last_cte= \"\") %}\n\n{{ 'WITH ' }}\n{%- for src in source_model -%}\n    {%- for satellite in src_satellite.items() -%}\n        {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0] -%}\n        {%- set hashdiff = (satellite[1]['hashdiff'].values() | list)[0] %}\n        {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\n\n{{ cte_name }} AS (\n    SELECT {{ dbtvault.prefix([src_pk], 's') }},\n           s.{{ hashdiff }} AS {{ hashdiff_col_name_alias }},\n           s.{{ satellite_name }} AS {{ satellite_name_col_name_alias }},\n           {%- if dbtvault.is_something(src_extra_columns) -%}\n               {{ dbtvault.prefix([src_extra_columns], 's') }},\n           {%- endif %}\n           s.{{ src_ldts }},\n           s.{{ src_source }}\n    FROM {{ ref(src) }} AS s\n    WHERE {{ dbtvault.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\n),\n\n    {%- set ns.last_cte = cte_name %}\n    {%- endfor %}\n{%- endfor %}\n\n{%- if stage_count > 1 or satellite_count > 1 %}\n\nunion_satellites AS (\n    {%- for src in source_model %}\n        {%- for satellite in src_satellite.items() %}\n            {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0]  %}\n            {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\n    SELECT * FROM {{ cte_name }}\n            {%- if not loop.last %}\n    UNION ALL\n            {%- endif %}\n        {%- endfor %}\n        {%- if not loop.last %}\n    UNION ALL\n        {%- endif %}\n    {%- endfor %}\n),\n{%- set ns.last_cte = \"union_satellites\" -%}\n{%- endif %}\n\nrecords_to_insert AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'a') }},\n        a.{{ hashdiff_col_name_alias }},\n        a.{{ satellite_name_col_name_alias }},\n        {%- if dbtvault.is_something(src_extra_columns) -%}\n            {{ dbtvault.prefix([src_extra_columns], 'a') }},\n        {%- endif %}\n        a.{{ src_ldts }},\n        a.{{ src_source }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n        ON (\n            a.{{ hashdiff_col_name_alias }} = d.{{ hashdiff_col_name_alias }}\n            AND a.{{ src_ldts }} = d.{{ src_ldts }}\n            AND a.{{ satellite_name_col_name_alias }} = d.{{ satellite_name_col_name_alias }}\n        )\n    WHERE d.{{ hashdiff_col_name_alias }} IS NULL\n    AND d.{{ src_ldts }} IS NULL\n    AND d.{{ satellite_name_col_name_alias }} IS NULL\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.log_info", "macro.dbtvault.prefix", "macro.dbtvault.is_something", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.5051756, "supported_languages": null}, "macro.dbtvault.hub": {"name": "hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/hub.sql", "original_file_path": "macros/tables/snowflake/hub.sql", "unique_id": "macro.dbtvault.hub", "macro_sql": "\n\n{%- macro hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_nk=src_nk,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- if not dbtvault.is_list(source_model) -%}\n        {%- set source_model = [source_model] -%}\n    {%- endif -%}\n\n    {{ dbtvault.log_relation_sources(this, source_model | length) }}\n\n    {{- dbtvault.prepend_generated_by() -}}\n\n    {{- adapter.dispatch('hub', 'dbtvault')(src_pk=src_pk, src_nk=src_nk,\n                                            src_extra_columns=src_extra_columns,\n                                            src_ldts=src_ldts, src_source=src_source,\n                                            source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.is_list", "macro.dbtvault.log_relation_sources", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.511081, "supported_languages": null}, "macro.dbtvault.default__hub": {"name": "default__hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/hub.sql", "original_file_path": "macros/tables/snowflake/hub.sql", "unique_id": "macro.dbtvault.default__hub", "macro_sql": "{%- macro default__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    QUALIFY row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    QUALIFY row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.5169473, "supported_languages": null}, "macro.dbtvault.ma_sat": {"name": "ma_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/ma_sat.sql", "original_file_path": "macros/tables/snowflake/ma_sat.sql", "unique_id": "macro.dbtvault.ma_sat", "macro_sql": "\n\n{%- macro ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\n                                           src_payload=src_payload, src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {{ dbtvault.prepend_generated_by() }}\n\n    {{ adapter.dispatch('ma_sat', 'dbtvault')(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\n                                               src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                               src_eff=src_eff, src_ldts=src_ldts,\n                                               src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__ma_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.5212266, "supported_languages": null}, "macro.dbtvault.default__ma_sat": {"name": "default__ma_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/ma_sat.sql", "original_file_path": "macros/tables/snowflake/ma_sat.sql", "unique_id": "macro.dbtvault.default__ma_sat", "macro_sql": "\n\n{%- macro default__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set cdk_cols = dbtvault.expand_column_list(columns=[src_cdk]) -%}\n{%- set cols_for_latest = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{# Select unique source records #}\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols_with_rank, 's', alias_target='source') }}\n    {%- else %}\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 's', alias_target='source') }}\n    {%- endif %}\n    {% if dbtvault.is_any_incremental() %}\n        ,COUNT(DISTINCT {{ dbtvault.prefix([src_hashdiff], 's', alias_target='source') }}, {{ dbtvault.prefix(cdk_cols, 's', alias_target='source') }})\n            OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 's') }}) AS source_count\n    {% endif %}\n    FROM {{ ref(source_model) }} AS s\n    WHERE {{ dbtvault.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\n    {%- for child_key in cdk_cols %}\n        AND {{ dbtvault.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\n    {%- endfor %}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n        AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n        AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{# if any_incremental -#}\n{% if dbtvault.is_any_incremental() %}\n\n{# Select latest records from satellite, restricted to PKs in source data -#}\nlatest_records AS (\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'mas', alias_target='target') }},\n           mas.latest_rank,\n           DENSE_RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'mas') }}\n                              ORDER BY {{ dbtvault.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ dbtvault.prefix(cdk_cols, 'mas') }} ASC\n           ) AS check_rank\n    FROM (\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\n           RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'inner_mas') }}\n                        ORDER BY {{ dbtvault.prefix([src_ldts], 'inner_mas') }} DESC\n           ) AS latest_rank\n    FROM {{ this }} AS inner_mas\n        INNER JOIN (\n            SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }}\n            FROM source_data as s\n        ) AS spk\n            ON {{ dbtvault.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\n            QUALIFY latest_rank = 1\n    ) AS mas\n),\n\n{# Select summary details for each group of latest records -#}\nlatest_group_details AS (\n    SELECT {{ dbtvault.prefix([src_pk], 'lr') }},\n           {{ dbtvault.prefix([src_ldts], 'lr') }},\n           MAX(lr.check_rank) AS latest_count\n    FROM latest_records AS lr\n    GROUP BY {{ dbtvault.prefix([src_pk], 'lr') }}, {{ dbtvault.prefix([src_ldts], 'lr') }}\n),\n\n{# endif any_incremental -#}\n{%- endif %}\n\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\nrecords_to_insert AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data') }}\n    FROM source_data\n\n{# if any_incremental -#}\n{% if dbtvault.is_any_incremental() %}\n    WHERE EXISTS (\n        SELECT 1\n        FROM source_data AS stage\n        WHERE NOT EXISTS (\n            SELECT 1\n            FROM (\n                SELECT {{ dbtvault.prefix(cols_for_latest, 'lr', alias_target='target') }},\n                lg.latest_count\n                FROM latest_records AS lr\n                INNER JOIN latest_group_details AS lg\n                    ON {{ dbtvault.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\n                    AND {{ dbtvault.prefix([src_ldts], 'lr') }} = {{ dbtvault.prefix([src_ldts], 'lg') }}\n            ) AS active_records\n            WHERE {{ dbtvault.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\n                AND {{ dbtvault.prefix([src_hashdiff], 'stage') }} = {{ dbtvault.prefix([src_hashdiff], 'active_records', alias_target='target') }}\n                AND {{ dbtvault.multikey(cdk_cols, prefix=['stage', 'active_records'], condition='=') }}\n                AND stage.source_count = active_records.latest_count\n        )\n        AND {{ dbtvault.multikey([src_pk], prefix=['source_data', 'stage'], condition='=') }}\n    )\n{# endif any_incremental -#}\n{%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.is_any_incremental", "macro.dbtvault.multikey", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.5297647, "supported_languages": null}, "macro.dbtvault.pit": {"name": "pit", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/pit.sql", "original_file_path": "macros/tables/snowflake/pit.sql", "unique_id": "macro.dbtvault.pit", "macro_sql": "\n\n{%- macro pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n    {%- if dbtvault.is_something(src_extra_columns) and execute -%}\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\n    {%- endif -%}\n\n    {{- dbtvault.check_required_parameters(src_pk=src_pk,\n                                           as_of_dates_table=as_of_dates_table,\n                                           satellites=satellites,\n                                           stage_tables_ldts=stage_tables_ldts,\n                                           src_ldts=src_ldts,\n                                           source_model=source_model) -}}\n\n    {{- dbtvault.prepend_generated_by() }}\n\n    {%- for stg in stage_tables_ldts %}\n        {{ \"-- depends_on: \" ~ ref(stg) -}}\n    {%- endfor -%}\n\n    {{ adapter.dispatch('pit', 'dbtvault')(src_pk=src_pk,\n                                           src_extra_columns=src_extra_columns,\n                                           as_of_dates_table=as_of_dates_table,\n                                           satellites=satellites,\n                                           stage_tables_ldts=stage_tables_ldts,\n                                           src_ldts=src_ldts,\n                                           source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.check_required_parameters", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.5425262, "supported_languages": null}, "macro.dbtvault.default__pit": {"name": "default__pit", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/pit.sql", "original_file_path": "macros/tables/snowflake/pit.sql", "unique_id": "macro.dbtvault.default__pit", "macro_sql": "{%- macro default__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n{#- Acquiring the source relation for the AS_OF table -#}\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n    {%- set source_name = as_of_dates_table | first -%}\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\n{%- endif -%}\n\n{#- Setting ghost values to replace NULLS -#}\n{%- set ghost_pk = '0000000000000000' -%}\n{%- set ghost_date = '1900-01-01 00:00:00.000' %}\n\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if dbtvault.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT * FROM {{ as_of_table_relation }}\n),\n\n{%- if dbtvault.is_any_incremental() %}\n\n{{ dbtvault.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\nbackfill_rows_as_of_dates AS (\n    SELECT\n        {{ dbtvault.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM new_rows_pks AS a\n    INNER JOIN backfill_as_of AS b\n        ON (1=1)\n),\n\nbackfill AS (\n    SELECT\n        {{ dbtvault.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_name = sat_name -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n        MIN({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}) AS {{ sat_name }}_{{ sat_pk_name }},\n        MIN({{ dbtvault.cast_date(column_str=column_str, datetime=true) }}) AS {{ sat_name }}_{{ sat_ldts_name }}\n        {%- else %}\n\n        {{ dbtvault.cast_binary(ghost_pk, quote=true, alias=sat_name ~ '_' ~ sat_pk_name) }},\n        {{ dbtvault.cast_date(ghost_date, as_string=true, datetime=true, alias=sat_name ~ '_' ~ sat_ldts_name) }}\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}\n\n    FROM backfill_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\n            OR {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} = '1900-01-01 00:00:00.000'\n    {% endfor %}\n\n    GROUP BY\n        {{ dbtvault.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n),\n{%- endif %}\n\nnew_rows_as_of_dates AS (\n    SELECT\n        {{ dbtvault.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM {{ ref(source_model) }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n    ON (1=1)\n),\n\nnew_rows AS (\n    SELECT\n        {{ dbtvault.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list)[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list)[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n        MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}) AS {{ sat_name }}_{{ sat_pk_name }},\n        MAX({{ dbtvault.cast_date(column_str=column_str, datetime=true)}}) AS {{ sat_name }}_{{ sat_ldts_name }}\n        {%- else %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ dbtvault.cast_binary(ghost_pk, quote=true) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ dbtvault.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n\n    {%- endfor %}\n\n    FROM new_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n            OR {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} = '1900-01-01 00:00:00.000'\n    {% endfor %}\n\n    GROUP BY\n        {{ dbtvault.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE\n),\n\npit AS (\n    SELECT * FROM new_rows\n    {%- if dbtvault.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap_pks\n    UNION ALL\n    SELECT * FROM backfill\n    {% endif %}\n)\n\nSELECT DISTINCT * FROM pit\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.is_any_incremental", "macro.dbtvault.as_of_date_window", "macro.dbtvault.prefix", "macro.dbtvault.cast_date", "macro.dbtvault.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.554562, "supported_languages": null}, "macro.dbtvault.bridge": {"name": "bridge", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/bridge.sql", "original_file_path": "macros/tables/snowflake/bridge.sql", "unique_id": "macro.dbtvault.bridge", "macro_sql": "\n\n{%- macro bridge(src_pk, src_extra_columns, as_of_dates_table, bridge_walk, stage_tables_ldts, src_ldts, source_model) -%}\n\n    {%- if dbtvault.is_something(src_extra_columns) and execute -%}\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\n    {%- endif -%}\n\n    {{- dbtvault.check_required_parameters(src_pk=src_pk,\n                                           as_of_dates_table=as_of_dates_table,\n                                           bridge_walk=bridge_walk,\n                                           stage_tables_ldts=stage_tables_ldts,\n                                           src_ldts=src_ldts,\n                                           source_model=source_model) -}}\n\n    {{- dbtvault.prepend_generated_by() }}\n\n    {% for stg in stage_tables_ldts %}\n    {{- \"-- depends_on: \" ~ ref(stg) }}\n    {% endfor %}\n\n    {#- Acquiring the source relation for the AS_OF table -#}\n    {%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n        {%- set source_name = as_of_dates_table | first -%}\n        {%- set source_table_name = as_of_dates_table[source_name] -%}\n        {%- set as_of_dates_table = source(source_name, source_table_name) -%}\n    {%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n        {%- set as_of_dates_table = ref(as_of_dates_table) -%}\n    {%- endif %}\n\n    {{ adapter.dispatch('bridge', 'dbtvault')(src_pk=src_pk,\n                                              src_extra_columns=src_extra_columns,\n                                              src_ldts=src_ldts,\n                                              as_of_dates_table=as_of_dates_table,\n                                              bridge_walk=bridge_walk,\n                                              stage_tables_ldts=stage_tables_ldts,\n                                              source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.is_something", "macro.dbtvault.check_required_parameters", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.559712, "supported_languages": null}, "macro.dbtvault.default__bridge": {"name": "default__bridge", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/bridge.sql", "original_file_path": "macros/tables/snowflake/bridge.sql", "unique_id": "macro.dbtvault.default__bridge", "macro_sql": "{%- macro default__bridge(src_pk, src_extra_columns, src_ldts, as_of_dates_table, bridge_walk, stage_tables_ldts, source_model) -%}\n\n{%- set max_datetime = dbtvault.max_datetime() -%}\n\n{#- Setting the new AS_OF dates CTE name -#}\n{%- if dbtvault.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of'  -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT *\n    FROM {{ as_of_dates_table }}\n),\n\n{%- if dbtvault.is_any_incremental() %}\n\n{{ dbtvault.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\noverlap AS (\n    {{ dbtvault.bridge_overlap_and_new_rows(src_pk, bridge_walk, 'overlap_pks', 'overlap_as_of') }}\n),\n{%- endif %}\n\nnew_rows AS (\n    {{ dbtvault.bridge_overlap_and_new_rows(src_pk, bridge_walk, ref(source_model), new_as_of_dates_cte) }}\n),\n\n{# Full data from bridge walk(s) -#}\nall_rows AS (\n    SELECT * FROM new_rows\n    {%- if dbtvault.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap\n    {%- endif %}\n),\n\n{# Select most recent set of relationship key(s) for each as of date -#}\ncandidate_rows AS (\n    SELECT *\n    FROM (\n        SELECT *,\n               ROW_NUMBER() OVER (\n               PARTITION BY\n                   AS_OF_DATE,\n                   {% for bridge_step in bridge_walk.keys() -%}\n\n                       {%- set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] -%}\n\n                       {{ bridge_link_pk }} {%- if not loop.last %}, {% endif -%}\n\n                   {%- endfor %}\n               ORDER BY\n                   {% for bridge_step in bridge_walk.keys() -%}\n\n                       {%- set bridge_load_date = bridge_walk[bridge_step]['bridge_load_date'] -%}\n\n                       {{ bridge_load_date }} DESC {%- if not loop.last %}, {% endif -%}\n\n                   {%- endfor %}\n               ) AS ROW_NUM\n        FROM all_rows\n    ) AS a\n    WHERE a.ROW_NUM = 1\n),\n\nbridge AS (\n    SELECT\n        {{ dbtvault.prefix([src_pk], 'c') }},\n        c.AS_OF_DATE,\n\n        {% for bridge_step in bridge_walk.keys() %}\n\n        {% set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] %}\n        c.{{ bridge_link_pk }}\n        {%- if not loop.last %}, {%- endif -%}\n        {%- endfor %}\n\n    FROM candidate_rows AS c\n\n{%- for bridge_step in bridge_walk.keys() -%}\n    {%- set bridge_end_date = bridge_walk[bridge_step]['bridge_end_date'] %}\n\n    {% if loop.first -%} WHERE {%- else -%} AND {%- endif %} {{ dbtvault.cast_date(dbtvault.prefix([bridge_end_date], 'c')) }} = {{ dbtvault.cast_date(max_datetime, true, false) }}\n\n{% endfor -%}\n)\n\nSELECT * FROM bridge\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.max_datetime", "macro.dbtvault.is_any_incremental", "macro.dbtvault.as_of_date_window", "macro.dbtvault.bridge_overlap_and_new_rows", "macro.dbtvault.prefix", "macro.dbtvault.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.5639808, "supported_languages": null}, "macro.dbtvault.t_link": {"name": "t_link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/t_link.sql", "original_file_path": "macros/tables/snowflake/t_link.sql", "unique_id": "macro.dbtvault.t_link", "macro_sql": "\n\n{%- macro t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- dbtvault.check_required_parameters(src_pk=src_pk, src_fk=src_fk, src_eff=src_eff,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {{ dbtvault.prepend_generated_by() }}\n\n    {{ adapter.dispatch('t_link', 'dbtvault')(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                               src_extra_columns=src_extra_columns,\n                                               src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                               source_model=source_model) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.check_required_parameters", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.566688, "supported_languages": null}, "macro.dbtvault.default__t_link": {"name": "default__t_link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/snowflake/t_link.sql", "original_file_path": "macros/tables/snowflake/t_link.sql", "unique_id": "macro.dbtvault.default__t_link", "macro_sql": "\n\n{%- macro default__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) %}\n\nWITH stage AS (\n    SELECT {{ source_cols | join(', ') }}\n    FROM {{ ref(source_model) }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    WHERE __PERIOD_FILTER__\n    AND {{ dbtvault.multikey(src_pk, condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, condition='IS NOT NULL') }}\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n    WHERE __RANK_FILTER__\n    AND {{ dbtvault.multikey(src_pk, condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, condition='IS NOT NULL') }}\n    {%- else %}\n    WHERE {{ dbtvault.multikey(src_pk, condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, condition='IS NOT NULL') }}\n    {%- endif %}\n),\nrecords_to_insert AS (\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 'stg') }}\n    FROM stage AS stg\n    {% if dbtvault.is_any_incremental() -%}\n    LEFT JOIN {{ this }} AS tgt\n    ON {{ dbtvault.multikey(src_pk, prefix=['stg','tgt'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='tgt', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.multikey", "macro.dbtvault.prefix", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.5696015, "supported_languages": null}, "macro.dbtvault.postgres__link": {"name": "postgres__link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/postgres/link.sql", "original_file_path": "macros/tables/postgres/link.sql", "unique_id": "macro.dbtvault.postgres__link", "macro_sql": "\n\n{%- macro postgres__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\n{{ dbtvault.prepend_generated_by() }}\n\n{{ 'WITH ' -}}\n\n{%- if not (source_model is iterable and source_model is not string) -%}\n    {%- set source_model = [source_model] -%}\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n  SELECT * FROM (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    {%- if source_model | length == 1 %}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\n    {%- endif %}\n  ) as l\n  WHERE row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if source_model | length > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{% endif %}\n{%- if source_model | length > 1 %}\n\nrow_rank_union AS (\n  SELECT * FROM (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\n  ) AS a\n  WHERE row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.5804465, "supported_languages": null}, "macro.dbtvault.postgres__sat": {"name": "postgres__sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/postgres/sat.sql", "original_file_path": "macros/tables/postgres/sat.sql", "unique_id": "macro.dbtvault.postgres__sat", "macro_sql": "\n\n{%- macro postgres__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set window_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set pk_cols = dbtvault.expand_column_list(columns=[src_pk]) -%}\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'a', alias_target='source') }}\n    {%- else %}\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ dbtvault.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {% endif %}\n),\n\n{%- if dbtvault.is_any_incremental() %}\n\nlatest_records AS (\n    SELECT {{ dbtvault.prefix(window_cols, 'a', alias_target='target') }}\n    FROM (\n        SELECT {{ dbtvault.prefix(window_cols, 'current_records', alias_target='target') }},\n            RANK() OVER (\n                PARTITION BY {{ dbtvault.prefix([src_pk], 'current_records') }}\n                ORDER BY {{ dbtvault.prefix([src_ldts], 'current_records') }} DESC\n            ) AS rank\n        FROM {{ this }} AS current_records\n            JOIN (\n                SELECT DISTINCT {{ dbtvault.prefix([src_pk], 'source_data') }}\n                FROM source_data\n            ) AS source_records\n                ON {{ dbtvault.multikey(src_pk, prefix=['current_records','source_records'], condition='=') }}\n    ) AS a\n    WHERE a.rank = 1\n),\n\n{%- endif %}\n\n{%- if enable_ghost_record %}\n\nghost AS (\n{{- dbtvault.create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) }}\n),\n\n{%- endif %}\n\nrecords_to_insert AS (\n    {%- if enable_ghost_record -%}\n    SELECT\n        {{ dbtvault.alias_all(source_cols, 'g') }}\n        FROM ghost AS g\n        {%- if dbtvault.is_any_incremental() %}\n        WHERE NOT EXISTS ( SELECT 1 FROM {{ this }} AS h WHERE {{ dbtvault.prefix([src_hashdiff], 'h', alias_target='target') }} = {{ dbtvault.prefix([src_hashdiff], 'g') }} )\n        {%- endif %}\n    UNION\n    {%- endif %}\n    SELECT DISTINCT {{ dbtvault.alias_all(source_cols, 'stage') }}\n    FROM source_data AS stage\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN latest_records\n    ON {{ dbtvault.multikey(src_pk, prefix=['latest_records','stage'], condition='=') }}\n        AND {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} = {{ dbtvault.prefix([src_hashdiff], 'stage') }}\n    WHERE {{ dbtvault.prefix([src_hashdiff], 'latest_records', alias_target='target') }} IS NULL\n    {%- endif %}\n\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.create_ghost_record", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.5895934, "supported_languages": null}, "macro.dbtvault.postgres__hub": {"name": "postgres__hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/postgres/hub.sql", "original_file_path": "macros/tables/postgres/hub.sql", "unique_id": "macro.dbtvault.postgres__hub", "macro_sql": "\n\n{%- macro postgres__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\n{{ dbtvault.prepend_generated_by() }}\n\n{{ 'WITH ' -}}\n\n{%- if not (source_model is iterable and source_model is not string) -%}\n    {%- set source_model = [source_model] -%}\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\n-#}\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT ON ({{ dbtvault.prefix([src_pk], 'rr') }}) {{ dbtvault.prefix(source_cols_with_rank, 'rr') }}\n    {%- else %}\n    SELECT DISTINCT ON ({{ dbtvault.prefix([src_pk], 'rr') }}) {{ dbtvault.prefix(source_cols, 'rr') }}\n    {%- endif %}\n    FROM {{ ref(src) }} AS rr\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    ORDER BY {{ dbtvault.prefix([src_pk], 'rr') }}, {{ dbtvault.prefix([src_ldts], 'rr') }}\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if source_model | length > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n{%- if source_model | length > 1 %}\n\nrow_rank_union AS (\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\n-#}\n    SELECT DISTINCT ON ({{ dbtvault.prefix([src_pk], 'ru') }}) ru.*\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    ORDER BY {{ dbtvault.prefix([src_pk], 'ru') }}, {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prepend_generated_by", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.597897, "supported_languages": null}, "macro.dbtvault.sqlserver__link": {"name": "sqlserver__link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/sqlserver/link.sql", "original_file_path": "macros/tables/sqlserver/link.sql", "unique_id": "macro.dbtvault.sqlserver__link", "macro_sql": "\n\n{%- macro sqlserver__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\n{%- set fk_cols = dbtvault.expand_column_list([src_fk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    SELECT *\n    FROM\n    (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    {%- if stage_count == 1 %}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\n    {%- endif %}\n    ) l\n    WHERE l.row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{% endif %}\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT *\n    FROM\n    (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\n               ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\n    ) r\n    WHERE r.row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6082304, "supported_languages": null}, "macro.dbtvault.sqlserver__sat": {"name": "sqlserver__sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/sqlserver/sat.sql", "original_file_path": "macros/tables/sqlserver/sat.sql", "unique_id": "macro.dbtvault.sqlserver__sat", "macro_sql": "\n\n{%- macro sqlserver__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{ dbtvault.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                             src_payload=src_payload, src_extra_columns=src_extra_columns,\n                             src_eff=src_eff, src_ldts=src_ldts,\n                             src_source=src_source, source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6092048, "supported_languages": null}, "macro.dbtvault.sqlserver__eff_sat": {"name": "sqlserver__eff_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/sqlserver/eff_sat.sql", "original_file_path": "macros/tables/sqlserver/eff_sat.sql", "unique_id": "macro.dbtvault.sqlserver__eff_sat", "macro_sql": "\n\n{%- macro sqlserver__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\n{%- set fk_cols = dbtvault.expand_column_list(columns=[src_dfk, src_sfk]) -%}\n{%- set dfk_cols = dbtvault.expand_column_list(columns=[src_dfk]) -%}\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\n\n{%- set max_datetime = dbtvault.max_datetime() %}\n\nWITH source_data AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='source') }}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ dbtvault.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\n    AND {{ dbtvault.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{%- if dbtvault.is_any_incremental() %}\n\n{# Selecting the most recent records for each link hashkey -#}\nlatest_records AS (\n    SELECT *\n    FROM\n    (\n        SELECT {{ dbtvault.alias_all(source_cols, 'b') }},\n               ROW_NUMBER() OVER (\n                    PARTITION BY {{ dbtvault.prefix([src_pk], 'b') }}\n                    ORDER BY b.{{ src_ldts }} DESC\n               ) AS row_num\n        FROM {{ this }} AS b\n    ) l\n    WHERE l.row_num = 1\n),\n\n{# Selecting the open records of the most recent records for each link hashkey -#}\nlatest_open AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'c') }}\n    FROM latest_records AS c\n    WHERE CONVERT(DATE, c.{{ src_end_date }}) = CONVERT(DATE, '{{ max_datetime }}')\n),\n\n{# Selecting the closed records of the most recent records for each link hashkey -#}\nlatest_closed AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'd') }}\n    FROM latest_records AS d\n    WHERE CONVERT(DATE, d.{{ src_end_date }}) != CONVERT(DATE, '{{ max_datetime }}')\n),\n\n{# Identifying the completely new link relationships to be opened in eff sat -#}\nnew_open_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'f') }},\n        {{ dbtvault.alias_all(fk_cols, 'f') }},\n        {%- if dbtvault.is_something(src_extra_columns) -%}\n        {{ dbtvault.prefix([src_extra_columns], 'f') }},\n        {%- endif -%}\n        {%- if is_auto_end_dating %}\n        f.{{ src_eff }} AS {{ src_start_date }},\n        {% else %}\n        f.{{ src_start_date }} AS {{ src_start_date }},\n        {% endif %}\n        f.{{ src_end_date }} AS {{ src_end_date }},\n        f.{{ src_eff }} AS {{ src_eff }},\n        f.{{ src_ldts }},\n        f.{{ src_source }}\n    FROM source_data AS f\n    LEFT JOIN latest_records AS lr\n    ON {{ dbtvault.multikey(src_pk, prefix=['f','lr'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='lr', condition='IS NULL') }}\n),\n\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\nnew_reopened_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'lc') }},\n        {{ dbtvault.alias_all(fk_cols, 'lc') }},\n        {%- if dbtvault.is_something(src_extra_columns) -%}\n        {{ dbtvault.prefix([src_extra_columns], 'g') }},\n        {%- endif -%}\n        {%- if is_auto_end_dating %}\n        g.{{ src_eff }} AS {{ src_start_date }},\n        {% else %}\n        g.{{ src_start_date }} AS {{ src_start_date }},\n        {% endif %}\n        g.{{ src_end_date }} AS {{ src_end_date }},\n        g.{{ src_eff }} AS {{ src_eff }},\n        g.{{ src_ldts }},\n        g.{{ src_source }}\n    FROM source_data AS g\n    INNER JOIN latest_closed AS lc\n    ON {{ dbtvault.multikey(src_pk, prefix=['g','lc'], condition='=') }}\n    WHERE CAST((g.{{ src_end_date }}) AS DATE) = CAST(('{{ max_datetime }}') AS DATE)\n),\n\n{%- if is_auto_end_dating %}\n\n{# Creating the closing records -#}\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\nnew_closed_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'lo') }},\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\n        {%- if dbtvault.is_something(src_extra_columns) -%}\n        {{ dbtvault.prefix([src_extra_columns], 'h') }},\n        {%- endif -%}\n        lo.{{ src_start_date }} AS {{ src_start_date }},\n        h.{{ src_eff }} AS {{ src_end_date }},\n        h.{{ src_eff }} AS {{ src_eff }},\n        h.{{ src_ldts }},\n        lo.{{ src_source }}\n    FROM source_data AS h\n    INNER JOIN latest_open AS lo\n    ON {{ dbtvault.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\n    WHERE ({{ dbtvault.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\n),\n\n{#- else if (not) is_auto_end_dating -#}\n{% else %}\n\nnew_closed_records AS (\n    SELECT DISTINCT\n        {{ dbtvault.prefix([src_pk], 'lo') }},\n        {{ dbtvault.alias_all(fk_cols, 'lo') }},\n        {%- if dbtvault.is_something(src_extra_columns) -%}\n        {{ dbtvault.prefix([src_extra_columns], 'h') }},\n        {%- endif -%}\n        h.{{ src_start_date }} AS {{ src_start_date }},\n        h.{{ src_end_date }} AS {{ src_end_date }},\n        h.{{ src_eff }} AS {{ src_eff }},\n        h.{{ src_ldts }},\n        lo.{{ src_source }}\n    FROM source_data AS h\n    LEFT JOIN Latest_open AS lo\n    ON lo.{{ src_pk }} = h.{{ src_pk }}\n    LEFT JOIN latest_closed AS lc\n    ON lc.{{ src_pk }} = h.{{ src_pk }}\n    WHERE CAST((h.{{ src_end_date }}) AS DATE) != CAST(('{{ max_datetime }}') AS DATE)\n    AND lo.{{ src_pk }} IS NOT NULL\n    AND lc.{{ src_pk }} IS NULL\n),\n\n{#- end if is_auto_end_dating -#}\n{%- endif %}\n\nrecords_to_insert AS (\n    SELECT * FROM new_open_records\n    UNION\n    SELECT * FROM new_reopened_records\n    UNION\n    SELECT * FROM new_closed_records\n)\n\n{#- else if not dbtvault.is_any_incremental() -#}\n{%- else %}\n\nrecords_to_insert AS (\n    SELECT {{ dbtvault.alias_all(source_cols, 'i') }}\n    FROM source_data AS i\n)\n\n{#- end if not dbtvault.is_any_incremental() -#}\n{%- endif %}\n\nSELECT * FROM records_to_insert\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.max_datetime", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all", "macro.dbtvault.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6222315, "supported_languages": null}, "macro.dbtvault.sqlserver__xts": {"name": "sqlserver__xts", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/sqlserver/xts.sql", "original_file_path": "macros/tables/sqlserver/xts.sql", "unique_id": "macro.dbtvault.sqlserver__xts", "macro_sql": "\n\n{%- macro sqlserver__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{ dbtvault.default__xts(src_pk=src_pk,\n                         src_satellite=src_satellite,\n                         src_extra_columns=src_extra_columns,\n                         src_ldts=src_ldts,\n                         src_source=src_source,\n                         source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.623074, "supported_languages": null}, "macro.dbtvault.sqlserver__hub": {"name": "sqlserver__hub", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/sqlserver/hub.sql", "original_file_path": "macros/tables/sqlserver/hub.sql", "unique_id": "macro.dbtvault.sqlserver__hub", "macro_sql": "\n\n{%- macro sqlserver__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ source_cols_with_rank | join(', ') }}\n    {%- else %}\n    SELECT {{ source_cols | join(', ') }}\n    {%- endif %}\n    FROM (\n        {%- if model.config.materialized == 'vault_insert_by_rank' %}\n        SELECT {{ dbtvault.prefix(source_cols_with_rank, 'rr') }},\n        {%- else %}\n        SELECT {{ dbtvault.prefix(source_cols, 'rr') }},\n        {%- endif %}\n               ROW_NUMBER() OVER(\n                   PARTITION BY {{ dbtvault.prefix([src_pk], 'rr') }}\n                   ORDER BY {{ dbtvault.prefix([src_ldts], 'rr') }}\n               ) AS row_number\n        FROM {{ ref(src) }} AS rr\n        WHERE {{ dbtvault.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    ) h\n    WHERE h.row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT *\n    FROM (\n        SELECT ru.*,\n               ROW_NUMBER() OVER(\n                   PARTITION BY {{ dbtvault.prefix([src_pk], 'ru') }}\n                   ORDER BY {{ dbtvault.prefix([src_ldts], 'ru') }}, {{ dbtvault.prefix([src_source], 'ru') }} ASC\n               ) AS row_rank_number\n        FROM {{ ns.last_cte }} AS ru\n        WHERE {{ dbtvault.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    ) h\n    WHERE h.row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ dbtvault.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if dbtvault.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ dbtvault.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ dbtvault.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6330817, "supported_languages": null}, "macro.dbtvault.sqlserver__ma_sat": {"name": "sqlserver__ma_sat", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/sqlserver/ma_sat.sql", "original_file_path": "macros/tables/sqlserver/ma_sat.sql", "unique_id": "macro.dbtvault.sqlserver__ma_sat", "macro_sql": "\n\n{%- macro sqlserver__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set rank_cols = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set cdk_cols = dbtvault.expand_column_list(columns=[src_cdk]) -%}\n{%- set cols_for_latest = dbtvault.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\n{# Select unique source records -#}\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols_with_rank, 's', alias_target='source') }}\n    {%- else %}\n    SELECT DISTINCT {{ dbtvault.prefix(source_cols, 's', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS s\n    WHERE {{ dbtvault.multikey([src_pk], prefix='s', condition='IS NOT NULL') }}\n    {%- for child_key in src_cdk %}\n        AND {{ dbtvault.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\n    {%- endfor %}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n        AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n        AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{# if any_incremental -#}\n{% if dbtvault.is_any_incremental() %}\n\nsource_data_with_count AS (\n    SELECT a.*\n        ,b.source_count\n    FROM source_data a\n    INNER JOIN\n    (\n        SELECT {{ dbtvault.prefix([src_pk], 't') }}\n            ,COUNT(*) AS source_count\n        FROM (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }}, {{ dbtvault.prefix([src_hashdiff], 's', alias_target='source') }}, {{ dbtvault.prefix(cdk_cols, 's') }} FROM source_data AS s) AS t\n        GROUP BY {{ dbtvault.prefix([src_pk], 't') }}\n    ) AS b\n    ON {{ dbtvault.multikey([src_pk], prefix=['a','b'], condition='=') }}\n),\n\n{# Select latest records from satellite, restricted to PKs in source data -#}\nlatest_records AS (\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'mas', alias_target='target') }}\n        ,mas.latest_rank\n        ,DENSE_RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'mas') }}\n            ORDER BY {{ dbtvault.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ dbtvault.prefix([src_cdk], 'mas') }} ASC) AS check_rank\n    FROM\n    (\n    SELECT {{ dbtvault.prefix(cols_for_latest, 'inner_mas', alias_target='target') }}\n        ,RANK() OVER (PARTITION BY {{ dbtvault.prefix([src_pk], 'inner_mas') }}\n            ORDER BY {{ dbtvault.prefix([src_ldts], 'inner_mas') }} DESC) AS latest_rank\n    FROM {{ this }} AS inner_mas\n    INNER JOIN (SELECT DISTINCT {{ dbtvault.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\n        ON {{ dbtvault.multikey([src_pk], prefix=['inner_mas', 'spk'], condition='=') }}\n    ) AS mas\n    WHERE latest_rank = 1\n),\n\n{# Select summary details for each group of latest records -#}\nlatest_group_details AS (\n    SELECT {{ dbtvault.prefix([src_pk], 'lr') }}\n        ,{{ dbtvault.prefix([src_ldts], 'lr') }}\n        ,MAX(lr.check_rank) AS latest_count\n    FROM latest_records AS lr\n    GROUP BY {{ dbtvault.prefix([src_pk], 'lr') }}, {{ dbtvault.prefix([src_ldts], 'lr') }}\n),\n\n{# endif any_incremental -#}\n{%- endif %}\n\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\nrecords_to_insert AS (\n{% if not dbtvault.is_any_incremental() %}\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data') }}\n    FROM source_data\n{%- endif %}\n\n{# if any_incremental -#}\n{% if dbtvault.is_any_incremental() %}\n    SELECT {{ dbtvault.alias_all(source_cols, 'source_data_with_count') }}\n    FROM source_data_with_count\n    WHERE EXISTS (\n        SELECT 1\n        FROM source_data_with_count AS stage\n        WHERE NOT EXISTS (\n            SELECT 1\n            FROM (\n                SELECT {{ dbtvault.prefix(cols_for_latest, 'lr', alias_target='target') }}\n                ,lg.latest_count\n                FROM latest_records AS lr\n                INNER JOIN latest_group_details AS lg\n                    ON {{ dbtvault.multikey([src_pk], prefix=['lr', 'lg'], condition='=') }}\n                    AND {{ dbtvault.prefix([src_ldts], 'lr') }} = {{ dbtvault.prefix([src_ldts], 'lg') }}\n            ) AS active_records\n            WHERE {{ dbtvault.multikey([src_pk], prefix=['stage', 'active_records'], condition='=') }}\n                AND {{ dbtvault.prefix([src_hashdiff], 'stage') }} = {{ dbtvault.prefix([src_hashdiff], 'active_records', alias_target='target') }}\n{# In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference #}\n{#        AND {{ dbtvault.prefix([src_ldts], 'stage') }} = {{ dbtvault.prefix([src_ldts], 'active_records') }} #}\n                AND {{ dbtvault.multikey(src_cdk, prefix=['stage', 'active_records'], condition='=') }}\n                AND stage.source_count = active_records.latest_count\n        )\n        AND {{ dbtvault.multikey([src_pk], prefix=['source_data_with_count', 'stage'], condition='=') }}\n    )\n{# endif any_incremental -#}\n{%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.prefix", "macro.dbtvault.multikey", "macro.dbtvault.is_any_incremental", "macro.dbtvault.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6449444, "supported_languages": null}, "macro.dbtvault.sqlserver__pit": {"name": "sqlserver__pit", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/sqlserver/pit.sql", "original_file_path": "macros/tables/sqlserver/pit.sql", "unique_id": "macro.dbtvault.sqlserver__pit", "macro_sql": "\n\n{%- macro sqlserver__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n{{ dbtvault.default__pit(src_pk=src_pk,\n                         src_extra_columns=src_extra_columns,\n                         as_of_dates_table=as_of_dates_table,\n                         satellites=satellites,\n                         stage_tables_ldts=stage_tables_ldts,\n                         src_ldts=src_ldts,\n                         source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6458461, "supported_languages": null}, "macro.dbtvault.sqlserver__bridge": {"name": "sqlserver__bridge", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/sqlserver/bridge.sql", "original_file_path": "macros/tables/sqlserver/bridge.sql", "unique_id": "macro.dbtvault.sqlserver__bridge", "macro_sql": "\n\n{%- macro sqlserver__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\n\n{{ dbtvault.default__bridge(src_pk=src_pk,\n                            as_of_dates_table=as_of_dates_table,\n                            bridge_walk=bridge_walk,\n                            stage_tables_ldts=stage_tables_ldts,\n                            src_extra_columns=src_extra_columns,\n                            src_ldts=src_ldts,\n                            source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6467166, "supported_languages": null}, "macro.dbtvault.sqlserver__t_link": {"name": "sqlserver__t_link", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/tables/sqlserver/t_link.sql", "original_file_path": "macros/tables/sqlserver/t_link.sql", "unique_id": "macro.dbtvault.sqlserver__t_link", "macro_sql": "\n\n{%- macro sqlserver__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{ dbtvault.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                            src_extra_columns=src_extra_columns,\n                            src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                            source_model=source_model) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.647586, "supported_languages": null}, "macro.dbtvault.max_datetime": {"name": "max_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.dbtvault.max_datetime", "macro_sql": "\n\n{%- macro max_datetime() -%}\n\n    {%- do return(adapter.dispatch('max_datetime', 'dbtvault')()) -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__max_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6482844, "supported_languages": null}, "macro.dbtvault.default__max_datetime": {"name": "default__max_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.dbtvault.default__max_datetime", "macro_sql": "\n\n{%- macro default__max_datetime() %}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6486256, "supported_languages": null}, "macro.dbtvault.sqlserver__max_datetime": {"name": "sqlserver__max_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.dbtvault.sqlserver__max_datetime", "macro_sql": "{%- macro sqlserver__max_datetime() -%}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.9999999')) -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6489675, "supported_languages": null}, "macro.dbtvault.bigquery__max_datetime": {"name": "bigquery__max_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.dbtvault.bigquery__max_datetime", "macro_sql": "{%- macro bigquery__max_datetime() -%}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6493042, "supported_languages": null}, "macro.dbtvault.prefix": {"name": "prefix", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "unique_id": "macro.dbtvault.prefix", "macro_sql": "\n\n{%- macro prefix(columns, prefix_str, alias_target) -%}\n\n    {{- adapter.dispatch('prefix', 'dbtvault')(columns=columns,\n                                               prefix_str=prefix_str,\n                                               alias_target=alias_target) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6528919, "supported_languages": null}, "macro.dbtvault.default__prefix": {"name": "default__prefix", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "unique_id": "macro.dbtvault.default__prefix", "macro_sql": "{%- macro default__prefix(columns=none, prefix_str=none, alias_target='source') -%}\n\n    {%- set processed_columns = [] -%}\n\n    {%- if columns and prefix_str -%}\n\n        {%- for col in columns -%}\n\n            {%- if col | lower not in processed_columns | map('lower') | list -%}\n\n                {%- if col is mapping -%}\n\n                    {%- if alias_target == 'source' -%}\n\n                        {{- dbtvault.prefix([col['source_column']], prefix_str) -}}\n\n                        {%- do processed_columns.append(col['source_column']) -%}\n\n                    {%- elif alias_target == 'target' -%}\n\n                        {{- dbtvault.prefix([col['alias']], prefix_str) -}}\n\n                         {%- do processed_columns.append(col['alias']) -%}\n\n                    {%- else -%}\n\n                        {{- dbtvault.prefix([col['source_column']], prefix_str) -}}\n\n                        {%- do processed_columns.append(col['source_column']) -%}\n\n                    {%- endif -%}\n\n                    {%- if not loop.last -%} , {% endif %}\n\n                {%- else -%}\n\n                    {%- if col is iterable and col is not string -%}\n\n                        {{- dbtvault.prefix(col, prefix_str) -}}\n\n                        {%- do processed_columns.append(col) -%}\n\n                    {%- elif col is not none -%}\n\n                        {{- prefix_str}}.{{col.strip() -}}\n\n                        {%- do processed_columns.append(col) -%}\n                    {% else %}\n\n                        {%- if execute -%}\n                            {{- exceptions.raise_compiler_error(\"Unexpected or missing configuration for '\" ~ this ~ \"' Unable to prefix columns.\") -}}\n                        {%- endif -%}\n                    {%- endif -%}\n\n                    {{- ', ' if not loop.last -}}\n\n                {%- endif -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n    {%- else -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Invalid parameters provided to prefix macro. Expected: (columns [list/string], prefix_str [string]) got: (\" ~ columns ~ \", \" ~ prefix_str ~ \")\") -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.656474, "supported_languages": null}, "macro.dbtvault.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.dbtvault.hash", "macro_sql": "\n\n{%- macro hash(columns=none, alias=none, is_hashdiff=false, columns_to_escape=none) -%}\n\n    {%- if is_hashdiff is none -%}\n        {%- set is_hashdiff = false -%}\n    {%- endif -%}\n\n    {{- adapter.dispatch('hash', 'dbtvault')(columns=columns, alias=alias,\n                                             is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6607943, "supported_languages": null}, "macro.dbtvault.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.dbtvault.default__hash", "macro_sql": "\n\n{%- macro default__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n{%- set hash = var('hash', 'md5') -%}\n{%- set concat_string = var('concat_string', '||') -%}\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\n{%- set hash_alg = dbtvault.select_hash_alg(hash) -%}\n\n{%- set standardise = dbtvault.standard_column_wrapper() %}\n\n{#- Alpha sort columns before hashing if a hashdiff -#}\n{%- if is_hashdiff and dbtvault.is_list(columns) -%}\n    {%- set columns = columns|sort -%}\n{%- endif -%}\n\n{#- If single column to hash -#}\n{%- if columns is string -%}\n    {%- set column_str = dbtvault.as_constant(columns) -%}\n\n    {%- if dbtvault.is_something(columns_to_escape) -%}\n        {%- if column_str in columns_to_escape -%}\n            {%- set column_str = dbtvault.escape_column_name(column_str) -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', standardise | replace('[EXPRESSION]', column_str)) }} AS {{ alias | indent(4) }}\n\n{#- Else a list of columns to hash -#}\n{%- else -%}\n\n    {%- set all_null = [] -%}\n    {%- set processed_columns = [] -%}\n\n    {%- for column in columns -%}\n        {%- if dbtvault.is_something(columns_to_escape) -%}\n            {%- if column in columns_to_escape -%}\n                {%- set column = dbtvault.escape_column_name(column) -%}\n            {%- endif -%}\n        {%- endif -%}\n\n        {%- set column_str = dbtvault.as_constant(column) -%}\n\n        {%- set column_expression = dbtvault.null_expression(column_str) -%}\n\n        {%- do all_null.append(null_placeholder_string) -%}\n        {%- do processed_columns.append(column_expression) -%}\n\n    {% endfor -%}\n\n    {% if not is_hashdiff -%}\n\n        {%- set concat_sql -%}\n        NULLIF({{ dbtvault.concat_ws(processed_columns, separator=concat_string) -}} {{ ', ' -}}\n               '{{ all_null | join(concat_string) }}')\n        {%- endset -%}\n\n        {%- set hashed_column -%}\n        {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', concat_sql) }} AS {{ alias }}\n        {%- endset -%}\n\n    {%- else -%}\n        {% if dbtvault.is_list(processed_columns) and processed_columns | length > 1 %}\n            {%- set hashed_column -%}\n                {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', dbtvault.concat_ws(processed_columns, separator=concat_string)) }} AS {{ alias }}\n            {%- endset -%}\n        {%- else -%}\n            {%- set hashed_column -%}\n                {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', processed_columns[0]) }} AS {{ alias }}\n            {%- endset -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {{ hashed_column }}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.select_hash_alg", "macro.dbtvault.standard_column_wrapper", "macro.dbtvault.is_list", "macro.dbtvault.as_constant", "macro.dbtvault.is_something", "macro.dbtvault.escape_column_name", "macro.dbtvault.null_expression", "macro.dbtvault.concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.665781, "supported_languages": null}, "macro.dbtvault.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.dbtvault.bigquery__hash", "macro_sql": "{%- macro bigquery__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ dbtvault.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6663077, "supported_languages": null}, "macro.dbtvault.sqlserver__hash": {"name": "sqlserver__hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.dbtvault.sqlserver__hash", "macro_sql": "{%- macro sqlserver__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ dbtvault.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6668026, "supported_languages": null}, "macro.dbtvault.postgres__hash": {"name": "postgres__hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.dbtvault.postgres__hash", "macro_sql": "{%- macro postgres__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ dbtvault.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6672885, "supported_languages": null}, "macro.dbtvault.databricks__hash": {"name": "databricks__hash", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.dbtvault.databricks__hash", "macro_sql": "{%- macro databricks__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ dbtvault.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6677656, "supported_languages": null}, "macro.dbtvault.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "unique_id": "macro.dbtvault.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbtvault')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.668476, "supported_languages": null}, "macro.dbtvault.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "unique_id": "macro.dbtvault.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n    {%- set query_results = dbt_utils.get_query_results_as_dict(query) -%}\n    {%- set query_results_processed = {} -%}\n\n    {% for k, v in query_results.items() %}\n        {% do query_results_processed.update({k.upper(): v}) %}\n    {% endfor %}\n\n    {{ return(query_results_processed) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6693769, "supported_languages": null}, "macro.dbtvault.as_of_date_window": {"name": "as_of_date_window", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/as_of_date_window.sql", "original_file_path": "macros/supporting/as_of_date_window.sql", "unique_id": "macro.dbtvault.as_of_date_window", "macro_sql": "\n\n{%- macro as_of_date_window(src_pk, src_ldts, stage_tables_ldts, source_model) -%}\n\nlast_safe_load_datetime AS (\n    SELECT MIN(LOAD_DATETIME) AS LAST_SAFE_LOAD_DATETIME\n    FROM (\n\n        {% for stg in stage_tables_ldts -%}\n            {%- set stage_ldts = stage_tables_ldts[stg] -%}\n            SELECT MIN({{ stage_ldts }}) AS LOAD_DATETIME FROM {{ ref(stg) }}\n            {% if not loop.last %} UNION ALL {% endif %}\n        {% endfor -%}\n\n    ) AS l\n),\n\nas_of_grain_old_entries AS (\n    SELECT DISTINCT AS_OF_DATE\n    FROM {{ this }}\n),\n\nas_of_grain_lost_entries AS (\n    SELECT a.AS_OF_DATE\n    FROM as_of_grain_old_entries AS a\n    LEFT OUTER JOIN as_of_dates AS b\n        ON a.AS_OF_DATE = b.AS_OF_DATE\n    WHERE b.AS_OF_DATE IS NULL\n),\n\nas_of_grain_new_entries AS (\n    SELECT a.AS_OF_DATE\n    FROM as_of_dates AS a\n    LEFT OUTER JOIN as_of_grain_old_entries AS b\n        ON a.AS_OF_DATE = b.AS_OF_DATE\n    WHERE b.AS_OF_DATE IS NULL\n),\n\nmin_date AS (\n    SELECT MIN(AS_OF_DATE) AS MIN_DATE\n    FROM as_of_dates\n),\n\nbackfill_as_of AS (\n    SELECT AS_OF_DATE\n    FROM as_of_dates AS a\n\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN last_safe_load_datetime as l\n    ON a.AS_OF_DATE < l.LAST_SAFE_LOAD_DATETIME\n    {% else %}\n    WHERE a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n    {%- endif %}\n),\n\nnew_rows_pks AS (\n    SELECT {{ dbtvault.prefix([src_pk], 'h') }}\n    FROM {{ source_model }} AS h\n\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN last_safe_load_datetime as l\n    ON h.{{ src_ldts }} >= l.LAST_SAFE_LOAD_DATETIME\n    {% else %}\n    WHERE h.{{ src_ldts }} >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n    {%- endif %}\n),\n\nnew_rows_as_of AS (\n    SELECT AS_OF_DATE\n    FROM as_of_dates AS a\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN last_safe_load_datetime as l\n    ON a.AS_OF_DATE >= l.LAST_SAFE_LOAD_DATETIME\n    UNION DISTINCT\n    {% else %}\n    WHERE a.AS_OF_DATE >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n    UNION\n    {%- endif %}\n    SELECT as_of_date\n    FROM as_of_grain_new_entries\n),\n\noverlap_pks AS (\n    SELECT a.*\n    FROM {{ this }} AS a\n    INNER JOIN {{ source_model }} as b\n        ON {{ dbtvault.multikey(src_pk, prefix=['a','b'], condition='=') }}\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN min_date\n    ON 1 = 1\n    INNER JOIN last_safe_load_datetime\n    ON 1 = 1\n\tLEFT OUTER JOIN as_of_grain_lost_entries\n\tON a.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\n    WHERE a.AS_OF_DATE >= min_date.MIN_DATE\n        AND a.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\n    {% else %}\n    WHERE a.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\n        AND a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n        AND a.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\n    {%- endif %}\n),\n\noverlap_as_of AS (\n    SELECT p.AS_OF_DATE\n    FROM as_of_dates AS p\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN min_date\n    ON 1 = 1\n    INNER JOIN last_safe_load_datetime\n    ON 1 = 1\n\tLEFT OUTER JOIN as_of_grain_lost_entries\n\tON p.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\n    WHERE p.AS_OF_DATE >= min_date.MIN_DATE\n        AND p.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\n    {% else %}\n    WHERE p.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\n        AND p.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n        AND p.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\n    {% endif %}\n)\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.prefix", "macro.dbtvault.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6746187, "supported_languages": null}, "macro.dbtvault.bridge_overlap_and_new_rows": {"name": "bridge_overlap_and_new_rows", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/bridge_shared.sql", "original_file_path": "macros/supporting/bridge_shared.sql", "unique_id": "macro.dbtvault.bridge_overlap_and_new_rows", "macro_sql": "\n\n{%- macro bridge_overlap_and_new_rows(src_pk, bridge_walk, source_model, new_as_of_dates_cte) -%}\n\nSELECT\n    {{ dbtvault.prefix([src_pk], 'a') }},\n    b.AS_OF_DATE,\n    {%- for bridge_step in bridge_walk.keys() -%}\n        {%- set link_table = bridge_walk[bridge_step]['link_table'] -%}\n        {%- set eff_sat_table = bridge_walk[bridge_step]['eff_sat_table'] -%}\n\n        {%- set link_pk = bridge_walk[bridge_step]['link_pk'] -%}\n\n        {%- set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] -%}\n        {%- set bridge_end_date = bridge_walk[bridge_step]['bridge_end_date'] -%}\n        {%- set bridge_load_date = bridge_walk[bridge_step]['bridge_load_date'] -%}\n\n        {%- set eff_sat_end_date = bridge_walk[bridge_step]['eff_sat_end_date'] -%}\n        {%- set eff_sat_load_date = bridge_walk[bridge_step]['eff_sat_load_date'] %}\n\n        {{- '\\n   ' }} {{ link_table | lower }}.{{ link_pk }} AS {{ bridge_link_pk }},\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_end_date }} AS {{ bridge_end_date }},\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_load_date }} AS {{ bridge_load_date }}\n\n        {%- if not loop.last %}, {%- endif -%}\n\n    {% endfor %}\n\n    FROM {{ source_model }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n        ON (1=1)\n\n    {%- set loop_vars = namespace(last_link = '', last_link_fk = '') %}\n    {%- for bridge_step in bridge_walk.keys() -%}\n\n        {%- set current_link = bridge_walk[bridge_step]['link_table'] -%}\n        {%- set current_eff_sat = bridge_walk[bridge_step]['eff_sat_table'] -%}\n\n        {%- set link_pk = bridge_walk[bridge_step]['link_pk'] -%}\n        {%- set link_fk1 = bridge_walk[bridge_step]['link_fk1'] -%}\n        {%- set link_fk2 = bridge_walk[bridge_step]['link_fk2'] -%}\n\n        {%- set eff_sat_pk = bridge_walk[bridge_step]['eff_sat_pk'] -%}\n        {%- set eff_sat_load_date = bridge_walk[bridge_step]['eff_sat_load_date'] -%}\n\n    {%- if loop.first %}\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\n        ON {{ dbtvault.multikey(src_pk, prefix=['a', current_link | lower], condition='=') }}\n    {%- else %}\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\n        ON {{ loop_vars.last_link }}.{{ loop_vars.last_link_fk2 }} = {{ current_link | lower }}.{{ link_fk1 }}\n    {%- endif %}\n    INNER JOIN {{ ref(current_eff_sat) }} AS {{ current_eff_sat | lower }}\n        ON {{ current_eff_sat | lower }}.{{ eff_sat_pk }} = {{ current_link | lower }}.{{ link_pk }}\n        AND {{ current_eff_sat | lower }}.{{ eff_sat_load_date }} <= b.AS_OF_DATE\n        {%- set loop_vars.last_link = current_link | lower -%}\n        {%- set loop_vars.last_link_fk2 = link_fk2 -%}\n    {% endfor %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.prefix", "macro.dbtvault.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6831625, "supported_languages": null}, "macro.dbtvault.create_ghost_record": {"name": "create_ghost_record", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/ghost_records/create_ghost_record.sql", "original_file_path": "macros/supporting/ghost_records/create_ghost_record.sql", "unique_id": "macro.dbtvault.create_ghost_record", "macro_sql": "\n\n{%- macro create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- adapter.dispatch('create_ghost_record', 'dbtvault')(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                                            src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                                            src_eff=src_eff, src_ldts=src_ldts,\n                                                            src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__create_ghost_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.686349, "supported_languages": null}, "macro.dbtvault.default__create_ghost_record": {"name": "default__create_ghost_record", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/ghost_records/create_ghost_record.sql", "original_file_path": "macros/supporting/ghost_records/create_ghost_record.sql", "unique_id": "macro.dbtvault.default__create_ghost_record", "macro_sql": "{%- macro default__create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set hash = var('hash', 'MD5') -%}\n{%- set source_str = var('system_record_value', 'DBTVAULT_SYSTEM') -%}\n{%- set columns = adapter.get_columns_in_relation(ref(source_model)) -%}\n{%- set col_definitions = [] -%}\n\n{%- set string_columns = [src_payload] -%}\n\n{%- if src_extra_columns != none -%}\n    {%- do string_columns.append(src_extra_columns) -%}\n{%- endif -%}\n\n{%- set string_columns = dbtvault.expand_column_list(string_columns) -%}\n\n{%- for col in columns -%}\n\n    {%- set col_name = col.column -%}\n\n    {%- if ((col_name | lower) == (src_pk | lower)) or ((col_name | lower) == (src_hashdiff | lower)) -%}\n        {%- set col_sql = dbtvault.binary_ghost(alias=col_name, hash=hash) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif dbtvault.is_something(src_hashdiff['source_column'] | default(none)) and ((src_hashdiff['source_column'] | lower) == (col_name | lower)) -%}\n        {%- set col_sql = dbtvault.binary_ghost(alias=src_hashdiff['source_column'], hash=hash) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif ((col_name | lower) == (src_eff | lower)) or ((col_name | lower) == (src_ldts | lower))-%}\n        {%- if (col.dtype | lower) == 'date' -%}\n            {%- set col_sql = dbtvault.cast_date('1900-01-01', as_string=true, datetime=false, alias=col_name)-%}\n        {%- else -%}\n            {%- set col_sql = dbtvault.cast_date('1900-01-01 00:00:00', as_string=true, datetime=true, alias=col_name, date_type=col.dtype)-%}\n        {%- endif -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif (col_name | lower) == (src_source | lower) -%}\n        {%- set col_sql -%}\n            CAST('{{ source_str }}' AS {{ col.dtype }}) AS {{ src_source }}\n        {%- endset -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif (col_name | lower) is in (string_columns | map('lower') | list) -%}\n        {% set col_sql = dbtvault.null_ghost(col.dtype, col_name) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\nSELECT\n    {% for col in col_definitions -%}\n    {{ col }}\n    {%- if not loop.last -%},\n    {% endif %}\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.expand_column_list", "macro.dbtvault.binary_ghost", "macro.dbtvault.is_something", "macro.dbtvault.cast_date", "macro.dbtvault.null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6918004, "supported_languages": null}, "macro.dbtvault.null_ghost": {"name": "null_ghost", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.dbtvault.null_ghost", "macro_sql": "\n\n{%- macro null_ghost(datatype, alias) -%}\n    {{ adapter.dispatch('null_ghost', 'dbtvault')(datatype=datatype, alias=alias) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6926908, "supported_languages": null}, "macro.dbtvault.default__null_ghost": {"name": "default__null_ghost", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.dbtvault.default__null_ghost", "macro_sql": "{%- macro default__null_ghost(datatype, alias) -%}\n    NULL AS {{alias}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6929495, "supported_languages": null}, "macro.dbtvault.bigquery__null_ghost": {"name": "bigquery__null_ghost", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.dbtvault.bigquery__null_ghost", "macro_sql": "{% macro bigquery__null_ghost(datatype, alias) -%}\n    CAST(NULL AS {{datatype}}) AS {{alias}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6932344, "supported_languages": null}, "macro.dbtvault.postgres__null_ghost": {"name": "postgres__null_ghost", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.dbtvault.postgres__null_ghost", "macro_sql": "{%- macro postgres__null_ghost(datatype, alias) -%}\n    {{ dbtvault.bigquery__null_ghost(datatype, alias) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.bigquery__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.693562, "supported_languages": null}, "macro.dbtvault.sqlserver__null_ghost": {"name": "sqlserver__null_ghost", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.dbtvault.sqlserver__null_ghost", "macro_sql": "{%- macro sqlserver__null_ghost(datatype, alias) -%}\n    {{ dbtvault.bigquery__null_ghost(datatype, alias) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.bigquery__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6938891, "supported_languages": null}, "macro.dbtvault.binary_ghost": {"name": "binary_ghost", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/ghost_records/binary_ghost.sql", "original_file_path": "macros/supporting/ghost_records/binary_ghost.sql", "unique_id": "macro.dbtvault.binary_ghost", "macro_sql": "\n\n{%- macro binary_ghost(alias, hash) -%}\n    {{ adapter.dispatch('binary_ghost', 'dbtvault')(alias=alias, hash=hash) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__binary_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6950405, "supported_languages": null}, "macro.dbtvault.default__binary_ghost": {"name": "default__binary_ghost", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/ghost_records/binary_ghost.sql", "original_file_path": "macros/supporting/ghost_records/binary_ghost.sql", "unique_id": "macro.dbtvault.default__binary_ghost", "macro_sql": "{%- macro default__binary_ghost(alias, hash) -%}\n\n    {%- if hash | lower == 'md5' -%}\n        {{ dbtvault.cast_binary(column_str=modules.itertools.repeat('0', 32) | join (''), alias=alias, quote=true) }}\n    {%- elif hash | lower == 'sha' -%}\n        {{ dbtvault.cast_binary(column_str=modules.itertools.repeat('0', 64) | join (''), alias=alias, quote=true) }}\n    {%- else -%}\n        {{ dbtvault.cast_binary(column_str=modules.itertools.repeat('0', 32) | join (''), alias=alias, quote=true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6965837, "supported_languages": null}, "macro.dbtvault.sqlserver__binary_ghost": {"name": "sqlserver__binary_ghost", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/ghost_records/binary_ghost.sql", "original_file_path": "macros/supporting/ghost_records/binary_ghost.sql", "unique_id": "macro.dbtvault.sqlserver__binary_ghost", "macro_sql": "{%- macro sqlserver__binary_ghost(alias, hash) -%}\n    {%- if hash | lower == 'md5' -%}\n        CAST(REPLICATE(CAST(CAST('0' AS tinyint) AS BINARY(16)), 16) AS BINARY(16)) AS {{ alias }}\n\t{%- elif hash | lower == 'sha' -%}\n        CAST(REPLICATE(CAST(CAST('0' AS tinyint) AS BINARY(32)), 32) AS BINARY(32)) AS {{ alias }}\n    {%- else -%}\n        CAST(REPLICATE(CAST(CAST('0' AS tinyint) AS BINARY(16)), 16) AS BINARY(16)) AS {{ alias }}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6972547, "supported_languages": null}, "macro.dbtvault.type_binary": {"name": "type_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.dbtvault.type_binary", "macro_sql": "\n\n{%- macro type_binary() -%}\n  {{- return(adapter.dispatch('type_binary', 'dbtvault')()) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6980002, "supported_languages": null}, "macro.dbtvault.default__type_binary": {"name": "default__type_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.dbtvault.default__type_binary", "macro_sql": "{%- macro default__type_binary() -%}\n    {%- if var('hash', 'MD5') | lower == 'md5' -%}\n        BINARY(16)\n    {%- elif var('hash', 'MD5') | lower == 'sha' -%}\n        BINARY(32)\n    {%- else -%}\n        BINARY(16)\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6986501, "supported_languages": null}, "macro.dbtvault.bigquery__type_binary": {"name": "bigquery__type_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.dbtvault.bigquery__type_binary", "macro_sql": "{%- macro bigquery__type_binary() -%}\n    STRING\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6988459, "supported_languages": null}, "macro.dbtvault.postgres__type_binary": {"name": "postgres__type_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.dbtvault.postgres__type_binary", "macro_sql": "{%- macro postgres__type_binary() -%}\n    BYTEA\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6990178, "supported_languages": null}, "macro.dbtvault.databricks__type_binary": {"name": "databricks__type_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.dbtvault.databricks__type_binary", "macro_sql": "{%- macro databricks__type_binary() -%}\n    STRING\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.6991882, "supported_languages": null}, "macro.dbtvault.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.dbtvault.type_string", "macro_sql": "\n\n{%- macro type_string(is_hash=false, char_length=255) -%}\n  {{- return(adapter.dispatch('type_string', 'dbtvault')(is_hash=is_hash, char_length=char_length)) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7003348, "supported_languages": null}, "macro.dbtvault.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.dbtvault.default__type_string", "macro_sql": "{%- macro default__type_string(is_hash, char_length) -%}\n    VARCHAR\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7005696, "supported_languages": null}, "macro.dbtvault.bigquery__type_string": {"name": "bigquery__type_string", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.dbtvault.bigquery__type_string", "macro_sql": "{%- macro bigquery__type_string(is_hash, char_length) -%}\n    STRING\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7007842, "supported_languages": null}, "macro.dbtvault.sqlserver__type_string": {"name": "sqlserver__type_string", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.dbtvault.sqlserver__type_string", "macro_sql": "{%- macro sqlserver__type_string(is_hash, char_length) -%}\n    VARCHAR\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7009962, "supported_languages": null}, "macro.dbtvault.databricks__type_string": {"name": "databricks__type_string", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.dbtvault.databricks__type_string", "macro_sql": "{%- macro databricks__type_string(is_hash=false, char_length=255) -%}\n    {%- if is_hash -%}\n        {%- if var('hash') | lower == 'md5' -%}\n            VARCHAR(16)\n        {%- elif var('hash') | lower == 'sha' -%}\n            VARCHAR(32)\n        {%- endif -%}\n    {%- else -%}\n        VARCHAR({{ char_length }})\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.701761, "supported_languages": null}, "macro.dbtvault.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_timestamp.sql", "original_file_path": "macros/supporting/data_types/type_timestamp.sql", "unique_id": "macro.dbtvault.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{- return(adapter.dispatch('type_timestamp', 'dbtvault')()) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7023108, "supported_languages": null}, "macro.dbtvault.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_timestamp.sql", "original_file_path": "macros/supporting/data_types/type_timestamp.sql", "unique_id": "macro.dbtvault.default__type_timestamp", "macro_sql": "{%- macro default__type_timestamp() -%}\n    TIMESTAMP_NTZ\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7025099, "supported_languages": null}, "macro.dbtvault.sqlserver__type_timestamp": {"name": "sqlserver__type_timestamp", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/data_types/type_timestamp.sql", "original_file_path": "macros/supporting/data_types/type_timestamp.sql", "unique_id": "macro.dbtvault.sqlserver__type_timestamp", "macro_sql": "{%- macro sqlserver__type_timestamp() -%}\n    DATETIME2\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.702689, "supported_languages": null}, "macro.dbtvault.cast_date": {"name": "cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.dbtvault.cast_date", "macro_sql": "\n\n{%- macro cast_date(column_str, as_string=false, datetime=false, alias=none, date_type=none) -%}\n    {%- if datetime -%}\n        {{- dbtvault.cast_datetime(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type) -}}\n    {%- else -%}\n        {{ return(adapter.dispatch('cast_date', 'dbtvault')(column_str=column_str, as_string=as_string, alias=alias)) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.cast_datetime", "macro.dbtvault.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7057362, "supported_languages": null}, "macro.dbtvault.snowflake__cast_date": {"name": "snowflake__cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.dbtvault.snowflake__cast_date", "macro_sql": "{%- macro snowflake__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if not as_string -%}\n        TO_DATE({{ column_str }})\n    {%- else -%}\n        TO_DATE('{{ column_str }}')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7063825, "supported_languages": null}, "macro.dbtvault.sqlserver__cast_date": {"name": "sqlserver__cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.dbtvault.sqlserver__cast_date", "macro_sql": "{%- macro sqlserver__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if not as_string -%}\n        CONVERT(DATE, {{ column_str }})\n    {%- else -%}\n        CONVERT(DATE, '{{ column_str }}')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7070284, "supported_languages": null}, "macro.dbtvault.bigquery__cast_date": {"name": "bigquery__cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.dbtvault.bigquery__cast_date", "macro_sql": "{%- macro bigquery__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if not as_string -%}\n        DATE({{ column_str }})\n    {%- else -%}\n        DATE('{{ column_str }}')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7076542, "supported_languages": null}, "macro.dbtvault.databricks__cast_date": {"name": "databricks__cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.dbtvault.databricks__cast_date", "macro_sql": "{%- macro databricks__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {{ dbtvault.snowflake__cast_date(column_str=column_str, as_string=as_string, alias=alias)}}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7081518, "supported_languages": null}, "macro.dbtvault.postgres__cast_date": {"name": "postgres__cast_date", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.dbtvault.postgres__cast_date", "macro_sql": "{%- macro postgres__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if not as_string -%}\n        TO_DATE({{ column_str }})\n    {%- else -%}\n        TO_DATE('{{ column_str }}', 'YYY-MM-DD')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7087824, "supported_languages": null}, "macro.dbtvault.cast_datetime": {"name": "cast_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.dbtvault.cast_datetime", "macro_sql": "\n\n{%- macro cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {%- if as_string -%}\n        {%- set column_str -%} '{{ column_str }}' {%- endset -%}\n    {%- endif -%}\n\n    {%- set date_type = date_type | lower -%}\n\n    {{ return(adapter.dispatch('cast_datetime', 'dbtvault')(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.snowflake__cast_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7116733, "supported_languages": null}, "macro.dbtvault.snowflake__cast_datetime": {"name": "snowflake__cast_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.dbtvault.snowflake__cast_datetime", "macro_sql": "{%- macro snowflake__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {%- if date_type == 'timestamp_tz' -%}\n        TO_TIMESTAMP_TZ({{ column_str }})\n    {%- elif date_type == 'timestamp_ltz' -%}\n        TO_TIMESTAMP_LTZ({{ column_str }})\n    {%- elif date_type == 'timestamp_ntz' -%}\n        TO_TIMESTAMP_NTZ({{ column_str }})\n    {%- else -%}\n        TO_TIMESTAMP({{ column_str }})\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7126844, "supported_languages": null}, "macro.dbtvault.sqlserver__cast_datetime": {"name": "sqlserver__cast_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.dbtvault.sqlserver__cast_datetime", "macro_sql": "{%- macro sqlserver__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    CONVERT(DATETIME2, {{ column_str }})\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7131977, "supported_languages": null}, "macro.dbtvault.bigquery__cast_datetime": {"name": "bigquery__cast_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.dbtvault.bigquery__cast_datetime", "macro_sql": "{%- macro bigquery__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {%- if date_type == 'timestamp' -%}\n        PARSE_TIMESTAMP('%F %H:%M:%E6S', {{ column_str }})\n    {%- else -%}\n        PARSE_DATETIME('%F %H:%M:%E6S', {{ column_str }})\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7138996, "supported_languages": null}, "macro.dbtvault.databricks__cast_datetime": {"name": "databricks__cast_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.dbtvault.databricks__cast_datetime", "macro_sql": "{%- macro databricks__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {{ dbtvault.snowflake__cast_datetime(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type)}}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.snowflake__cast_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7144573, "supported_languages": null}, "macro.dbtvault.postgres__cast_datetime": {"name": "postgres__cast_datetime", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.dbtvault.postgres__cast_datetime", "macro_sql": "{%- macro postgres__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    TO_TIMESTAMP({{ column_str }}, 'YYY-MM-DD HH24:MI:SS.MS')\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7149785, "supported_languages": null}, "macro.dbtvault.cast_binary": {"name": "cast_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.dbtvault.cast_binary", "macro_sql": "\n\n{%- macro cast_binary(column_str, alias=none, quote=true) -%}\n    {{ return(adapter.dispatch('cast_binary', 'dbtvault')(column_str=column_str, alias=alias, quote=quote)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.default__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7165, "supported_languages": null}, "macro.dbtvault.default__cast_binary": {"name": "default__cast_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.dbtvault.default__cast_binary", "macro_sql": "{%- macro default__cast_binary(column_str, alias=none, quote=true) -%}\n\n    {%- if quote -%}\n        CAST('{{ column_str }}' AS {{ dbtvault.type_binary() }})\n    {%- else -%}\n        CAST({{ column_str }} AS {{ dbtvault.type_binary() }})\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7172928, "supported_languages": null}, "macro.dbtvault.sqlserver__cast_binary": {"name": "sqlserver__cast_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.dbtvault.sqlserver__cast_binary", "macro_sql": "{%- macro sqlserver__cast_binary(column_str, alias=none, quote=true) -%}\n\n    {%- if quote -%}\n        CONVERT({{ dbtvault.type_binary() }}, '{{ column_str }}', 2)\n    {%- else -%}\n        CONVERT({{ dbtvault.type_binary() }}, {{ column_str }}, 2)\n    {%- endif -%}\n\n    {% if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbtvault.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7180743, "supported_languages": null}, "macro.dbtvault.bigquery__cast_binary": {"name": "bigquery__cast_binary", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.dbtvault.bigquery__cast_binary", "macro_sql": "{%- macro bigquery__cast_binary(column_str, alias=none, quote=true) -%}\n\n    {{ dbtvault.default__cast_binary(column_str=column_str, alias=alias, quote=quote) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.default__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.718569, "supported_languages": null}, "macro.dbtvault.null_expression": {"name": "null_expression", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.dbtvault.null_expression", "macro_sql": "\n\n{%- macro null_expression(column_str) -%}\n\n    {%- if execute and not column_str -%}\n        {%- do exceptions.raise_compiler_error(\"Must provide a column_str argument to null expression macro!\") -%}\n    {%- endif -%}\n\n    {%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n    {%- set standardise = dbtvault.standard_column_wrapper() %}\n\n    {{ return(adapter.dispatch('null_expression', 'dbtvault')(standardise=standardise, column_str=column_str, null_placeholder_string=null_placeholder_string)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.standard_column_wrapper", "macro.dbtvault.default__null_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7205625, "supported_languages": null}, "macro.dbtvault.default__null_expression": {"name": "default__null_expression", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.dbtvault.default__null_expression", "macro_sql": "\n\n\n{%- macro default__null_expression(standardise, column_str, null_placeholder_string) -%}\n\n    {%- set column_expression -%}\n        IFNULL({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string}}')\n    {%- endset -%}\n\n    {% do return(column_expression) %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.721173, "supported_languages": null}, "macro.dbtvault.postgres__null_expression": {"name": "postgres__null_expression", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.dbtvault.postgres__null_expression", "macro_sql": "{%- macro postgres__null_expression(standardise, column_str, null_placeholder_string) -%}\n\n    {%- set column_expression -%}\n        COALESCE({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string }}')\n    {%- endset -%}\n\n    {% do return(column_expression) %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.721768, "supported_languages": null}, "macro.dbtvault.sqlserver__null_expression": {"name": "sqlserver__null_expression", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.dbtvault.sqlserver__null_expression", "macro_sql": "{%- macro sqlserver__null_expression(standardise, column_str, null_placeholder_string) -%}\n\n    {%- set column_expression -%}\n        ISNULL({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string }}')\n    {%- endset -%}\n\n    {% do return(column_expression) %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7223532, "supported_languages": null}, "macro.dbtvault.select_hash_alg": {"name": "select_hash_alg", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.select_hash_alg", "macro_sql": "\n\n{%- macro select_hash_alg(hash) -%}\n\n    {%- set available_hash_algorithms = ['md5', 'sha'] -%}\n\n    {%- if execute and hash | lower not in available_hash_algorithms %}\n        {%- do exceptions.warn(\"Configured hash ('{}') not recognised. Must be one of: {} (case insensitive)\".format(hash | lower, available_hash_algorithms | join(', '))) -%}\n    {%- endif -%}\n\n    {%- if hash | lower == 'md5' -%}\n        {%- do return(dbtvault.hash_alg_md5()) -%}\n    {%- elif hash | lower == 'sha' -%}\n        {%- do return(dbtvault.hash_alg_sha256()) -%}\n    {%- else -%}\n        {%- do return(dbtvault.hash_alg_md5()) -%}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.hash_alg_md5", "macro.dbtvault.hash_alg_sha256"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7250507, "supported_languages": null}, "macro.dbtvault.hash_alg_md5": {"name": "hash_alg_md5", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.hash_alg_md5", "macro_sql": "\n\n{%- macro hash_alg_md5() -%}\n\n    {{- adapter.dispatch('hash_alg_md5', 'dbtvault')() -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__hash_alg_md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7253976, "supported_languages": null}, "macro.dbtvault.default__hash_alg_md5": {"name": "default__hash_alg_md5", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.default__hash_alg_md5", "macro_sql": "{% macro default__hash_alg_md5() -%}\n\n    {% do return(dbtvault.cast_binary('MD5_BINARY([HASH_STRING_PLACEHOLDER])', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.725781, "supported_languages": null}, "macro.dbtvault.bigquery__hash_alg_md5": {"name": "bigquery__hash_alg_md5", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.bigquery__hash_alg_md5", "macro_sql": "{% macro bigquery__hash_alg_md5() -%}\n\n    {% do return(dbtvault.cast_binary('UPPER(TO_HEX(MD5([HASH_STRING_PLACEHOLDER])))', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7261603, "supported_languages": null}, "macro.dbtvault.sqlserver__hash_alg_md5": {"name": "sqlserver__hash_alg_md5", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.sqlserver__hash_alg_md5", "macro_sql": "{% macro sqlserver__hash_alg_md5() -%}\n\n    {% do return(dbtvault.cast_binary(\"HASHBYTES('MD5', [HASH_STRING_PLACEHOLDER])\", quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7265506, "supported_languages": null}, "macro.dbtvault.postgres__hash_alg_md5": {"name": "postgres__hash_alg_md5", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.postgres__hash_alg_md5", "macro_sql": "{% macro postgres__hash_alg_md5() -%}\n\n    {% do return(dbtvault.cast_binary('UPPER(MD5([HASH_STRING_PLACEHOLDER]))', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.72708, "supported_languages": null}, "macro.dbtvault.databricks__hash_alg_md5": {"name": "databricks__hash_alg_md5", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.databricks__hash_alg_md5", "macro_sql": "{% macro databricks__hash_alg_md5() -%}\n\n    {% do return(dbtvault.cast_binary('UPPER(MD5([HASH_STRING_PLACEHOLDER]))', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7274845, "supported_languages": null}, "macro.dbtvault.hash_alg_sha256": {"name": "hash_alg_sha256", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.hash_alg_sha256", "macro_sql": "\n\n\n{%- macro hash_alg_sha256() -%}\n\n    {{- adapter.dispatch('hash_alg_sha256', 'dbtvault')() -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__hash_alg_sha256"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7278156, "supported_languages": null}, "macro.dbtvault.default__hash_alg_sha256": {"name": "default__hash_alg_sha256", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.default__hash_alg_sha256", "macro_sql": "{% macro default__hash_alg_sha256() -%}\n\n    {% do return(dbtvault.cast_binary('SHA2_BINARY([HASH_STRING_PLACEHOLDER])', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.728227, "supported_languages": null}, "macro.dbtvault.bigquery__hash_alg_sha256": {"name": "bigquery__hash_alg_sha256", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.bigquery__hash_alg_sha256", "macro_sql": "{% macro bigquery__hash_alg_sha256() -%}\n\n    {% do return(dbtvault.cast_binary('UPPER(TO_HEX(SHA256([HASH_STRING_PLACEHOLDER])))', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7286093, "supported_languages": null}, "macro.dbtvault.sqlserver__hash_alg_sha256": {"name": "sqlserver__hash_alg_sha256", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.sqlserver__hash_alg_sha256", "macro_sql": "{% macro sqlserver__hash_alg_sha256() -%}\n\n    {% do return(dbtvault.cast_binary(\"HASHBYTES('SHA2_256', [HASH_STRING_PLACEHOLDER])\", quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7289894, "supported_languages": null}, "macro.dbtvault.postgres__hash_alg_sha256": {"name": "postgres__hash_alg_sha256", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.postgres__hash_alg_sha256", "macro_sql": "{% macro postgres__hash_alg_sha256() -%}\n    {#- * MD5 is simple function call to md5(val) -#}\n    {#- * SHA256 needs input cast to BYTEA and then its BYTEA result encoded as hex text output -#}\n    {#- e.g. ENCODE(SHA256(CAST(val AS BYTEA)), 'hex') -#}\n    {#- Ref: https://www.postgresql.org/docs/11/functions-binarystring.html  -#}\n\n    {% do return(dbtvault.cast_binary(\"UPPER(ENCODE(SHA256(CAST([HASH_STRING_PLACEHOLDER] AS {})), 'hex'))\".format(dbtvault.type_binary()), quote=false))  %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbtvault.cast_binary", "macro.dbtvault.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7295022, "supported_languages": null}, "macro.dbtvault.databricks__hash_alg_sha256": {"name": "databricks__hash_alg_sha256", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.dbtvault.databricks__hash_alg_sha256", "macro_sql": "{% macro databricks__hash_alg_sha256() -%}\n\n    {% do return('UPPER(SHA2([HASH_STRING_PLACEHOLDER], 256))') %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7297862, "supported_languages": null}, "macro.dbtvault.standard_column_wrapper": {"name": "standard_column_wrapper", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.dbtvault.standard_column_wrapper", "macro_sql": "\n\n{%- macro standard_column_wrapper() -%}\n\n    {%- set hash_content_casing = var('hash_content_casing', 'upper') -%}\n    {%- set available_case_configs = ['upper', 'disabled'] -%}\n\n    {%- if execute and (hash_content_casing | lower) not in available_case_configs  -%}\n        {%- do exceptions.raise_compiler_error(\"Must provide a valid casing config for hash_content_casing.\n                                                '{}' was provided. Can be one of {} (case insensitive)\".format(\n                                                                                hash_content_casing,\n                                                                                available_case_configs | join(','))) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('standard_column_wrapper', 'dbtvault')(hash_content_casing=hash_content_casing | lower)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbtvault.default__standard_column_wrapper"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7330685, "supported_languages": null}, "macro.dbtvault.default__standard_column_wrapper": {"name": "default__standard_column_wrapper", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.dbtvault.default__standard_column_wrapper", "macro_sql": "\n\n\n{%- macro default__standard_column_wrapper(hash_content_casing) -%}\n\n    {%- if hash_content_casing == 'upper' -%}\n        {%- set standardise -%}\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ dbtvault.type_string() }}))), '')\n        {%- endset -%}\n    {%- else -%}\n        {%- set standardise -%}\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ dbtvault.type_string() }})), '')\n        {%- endset -%}\n    {%- endif -%}\n\n    {% do return(standardise) -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7338634, "supported_languages": null}, "macro.dbtvault.databricks__standard_column_wrapper": {"name": "databricks__standard_column_wrapper", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.dbtvault.databricks__standard_column_wrapper", "macro_sql": "{%- macro databricks__standard_column_wrapper(hash_content_casing) -%}\n\n    {%- if hash_content_casing == 'upper' -%}\n        {%- set standardise -%}\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ dbtvault.type_string(is_hash=true) }}))), '')\n        {%- endset -%}\n    {%- else -%}\n        {%- set standardise -%}\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ dbtvault.type_string(is_hash=true) }})), '')\n        {%- endset -%}\n    {%- endif -%}\n\n    {% do return(standardise) -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbtvault.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7347252, "supported_languages": null}, "macro.dbtvault.sqlserver__standard_column_wrapper": {"name": "sqlserver__standard_column_wrapper", "resource_type": "macro", "package_name": "dbtvault", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.dbtvault.sqlserver__standard_column_wrapper", "macro_sql": "{%- macro sqlserver__standard_column_wrapper(hash_content_casing) -%}\n\n    {%- if hash_content_casing == 'upper' -%}\n        {%- set standardise -%}\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ dbtvault.type_string() }}(MAX)))), '')\n        {%- endset -%}\n    {%- else -%}\n        {%- set standardise -%}\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ dbtvault.type_string() }}(MAX))), '')\n        {%- endset -%}\n    {%- endif -%}\n\n    {% do return(standardise) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbtvault.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.735505, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':'(?i)(from|join)\\s+({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_source':'(?i)(from|join)\\s+({{\\s*source\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_1':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_2':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_table_1':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_2':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_3':'(?i)(from|join)\\s+([\\[`\\\"\\'])([\\w ]+)([\\]`\\\"\\'])(?=\\s|$)',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7549603, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7583907, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.763253, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7676508, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.771532, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.774359, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7764242, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7774687, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7784092, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return (str(model_names)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7815425, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7938728, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.7987268, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.803672, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8054633, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8070643, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.808545, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8098347, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8111184, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.811627, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8124337, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8138855, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8148026, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8152208, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8163652, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8173156, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8176208, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8180642, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8185146, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8195229, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8202882, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8206196, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8209898, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.821435, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8220851, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.822403, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8227305, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.823133, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8235526, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8240495, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8250973, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8255236, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8258417, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8261545, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8264933, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8274245, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8278668, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8283303, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8287702, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8292224, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.830363, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.83082, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8312826, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.831724, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8321953, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8327365, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8333547, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8336535, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8339462, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8348305, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8352838, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8356864, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8367784, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8372595, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8375776, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8378928, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.83869, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.839176, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8400488, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8404706, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.840809, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8418298, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.842194, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8425233, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8428404, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8431556, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8453014, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8459148, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8465075, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8475332, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8484151, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8501413, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8506012, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8509438, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8513026, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8519702, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8524117, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.85295, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8534143, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8538282, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.854401, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.85516, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8557043, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8561323, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8589644, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8596141, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8605173, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.861164, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8620837, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8628995, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8636565, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8641598, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.864571, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.865519, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.865854, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8665006, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8670695, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8675961, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8680162, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8684943, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8703077, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.872949, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.874166, "supported_languages": null}, "macro.dbt_translate.money_to_words": {"name": "money_to_words", "resource_type": "macro", "package_name": "dbt_translate", "path": "macros/money_to_words.sql", "original_file_path": "macros/money_to_words.sql", "unique_id": "macro.dbt_translate.money_to_words", "macro_sql": "{% macro money_to_words(column, lang='en') -%}\n  {{ return(adapter.dispatch('money_to_words', 'dbt_translate')(column, lang)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_translate.default__money_to_words"]}, "description": "Convert a number (money) to words e.g. 2000 = two thousand\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_translate://macros/money_to_words.yml", "arguments": [{"name": "column", "type": "string", "description": "Column name which holds the number value"}, {"name": "lang", "type": "string", "description": "Language code used, default to English ('en'). Currently supporting English only."}], "created_at": 1695341479.7345815, "supported_languages": null}, "macro.dbt_translate.default__money_to_words": {"name": "default__money_to_words", "resource_type": "macro", "package_name": "dbt_translate", "path": "macros/money_to_words.sql", "original_file_path": "macros/money_to_words.sql", "unique_id": "macro.dbt_translate.default__money_to_words", "macro_sql": "{% macro default__money_to_words(column, lang='en') -%}\n  {{ var('num2words_schema', target.schema) }}.MoneyToWords_{{ lang|upper }}(floor({{ column }}), {{ column }} - floor({{ column }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_translate://macros/money_to_words.yml", "arguments": [], "created_at": 1695341479.735148, "supported_languages": null}, "macro.dbt_translate.sqlserver__money_to_words": {"name": "sqlserver__money_to_words", "resource_type": "macro", "package_name": "dbt_translate", "path": "macros/money_to_words.sql", "original_file_path": "macros/money_to_words.sql", "unique_id": "macro.dbt_translate.sqlserver__money_to_words", "macro_sql": "{% macro sqlserver__money_to_words(column, lang='en') -%}\n  {{ var('num2words_schema', target.schema) }}.MoneyToWords_{{ lang|upper }}({{ column }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": "dbt_translate://macros/money_to_words.yml", "arguments": [], "created_at": 1695341479.7357028, "supported_languages": null}, "macro.dbt_translate.compile_money_to_words_en": {"name": "compile_money_to_words_en", "resource_type": "macro", "package_name": "dbt_translate", "path": "macros/compile/compile_money_to_words_en.sql", "original_file_path": "macros/compile/compile_money_to_words_en.sql", "unique_id": "macro.dbt_translate.compile_money_to_words_en", "macro_sql": "{% macro compile_money_to_words_en() %}\n  {{ return(adapter.dispatch('compile_money_to_words_en', 'dbt_translate')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_translate.default__compile_money_to_words_en"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.87668, "supported_languages": null}, "macro.dbt_translate.compile_money_to_words": {"name": "compile_money_to_words", "resource_type": "macro", "package_name": "dbt_translate", "path": "macros/compile/compile_money_to_words.sql", "original_file_path": "macros/compile/compile_money_to_words.sql", "unique_id": "macro.dbt_translate.compile_money_to_words", "macro_sql": "{% macro compile_money_to_words() %}\n  {{ return(adapter.dispatch('compile_money_to_words', 'dbt_translate')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_translate.default__compile_money_to_words"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.877493, "supported_languages": null}, "macro.dbt_translate.default__compile_money_to_words": {"name": "default__compile_money_to_words", "resource_type": "macro", "package_name": "dbt_translate", "path": "macros/compile/compile_money_to_words.sql", "original_file_path": "macros/compile/compile_money_to_words.sql", "unique_id": "macro.dbt_translate.default__compile_money_to_words", "macro_sql": "{% macro default__compile_money_to_words() %}\n  {%- if execute -%}\n  \n    CREATE SCHEMA IF NOT EXISTS {{var('num2words_schema', target.schema)}};\n    {{ dbt_translate.compile_money_to_words_en() }};\n    {#-- add new language here #}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_translate.compile_money_to_words_en"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8780124, "supported_languages": null}, "macro.dbt_translate.sqlserver__compile_money_to_words": {"name": "sqlserver__compile_money_to_words", "resource_type": "macro", "package_name": "dbt_translate", "path": "macros/compile/compile_money_to_words.sql", "original_file_path": "macros/compile/compile_money_to_words.sql", "unique_id": "macro.dbt_translate.sqlserver__compile_money_to_words", "macro_sql": "{% macro sqlserver__compile_money_to_words() %}\n  {%- if execute -%}\n    {% set create_schema -%}\n      IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE name = '{{ var(\"num2words_schema\", target.schema) }}')\n      BEGIN\n        EXEC('CREATE SCHEMA [{{ var(\"num2words_schema\", target.schema) }}]')\n      END\n    {% endset %}\n    {% do run_query(create_schema) %}\n  \n    {{ dbt_translate.compile_money_to_words_en() }};\n    {#-- add new language here #}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_translate.compile_money_to_words_en"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8788772, "supported_languages": null}, "macro.dbt_translate.default__compile_money_to_words_en": {"name": "default__compile_money_to_words_en", "resource_type": "macro", "package_name": "dbt_translate", "path": "macros/compile/snowflake/snowflake_compile_money_to_words_en.sql", "original_file_path": "macros/compile/snowflake/snowflake_compile_money_to_words_en.sql", "unique_id": "macro.dbt_translate.default__compile_money_to_words_en", "macro_sql": "{% macro default__compile_money_to_words_en() %}\n{#-- Due to the ROUND issue within Snowflake e.g. 999 999 999 999 999.99 will become 1 000 000 000 000 000\n  --> Split the number into 2 params: money (without decimal) & the value with decimal only\n      e.g.  money = 999 999 999 999 999\n            scale_value = 0.99  #}\ncreate or replace function {{var('num2words_schema', target.schema)}}.MoneyToWords_EN (money double, scale_value double)\nreturns varchar\nlanguage javascript\nstrict\nas\n$$\n  let vResult = '';\n\n  let tDict = {\n    1:'one',2:'two',3:'three',4:'four',5:'five',6:'six',7:'seven',8:'eight',9:'nine',\n    10:'ten',11:'eleven',12:'twelve',13:'thirteen',14:'fourteen',15:'fifteen',16:'sixteen',17:'seventeen',18:'eighteen',19:'nineteen',\n    20:'twenty',30:'thirty',40:'fourty',50:'fifty',60:'sixty',70:'seventy',80:'eighty',90:'ninety'\n  };\n\n  let ZeroWord = 'zero'\n  let DotWord = 'point'\n  let AndWord = 'and'\n  let HundredWord = 'hundred'\n  let ThousandWord = 'thousand'\n  let MillionWord = 'million'\n  let BillionWord = 'billion'\n  let TrillionWord = 'trillion'\n\n  //--decimal number\n  let vDecimalNum = Math.round((SCALE_VALUE - Math.floor(SCALE_VALUE)) * 100);\n  let vLoop = 2;\n  let vSubDecimalResult = ''\n  if (vDecimalNum > 0) {\n    while (vLoop > 0) {\n      if (vDecimalNum % 10 == 0){\n        vSubDecimalResult = ZeroWord + ' ' + vSubDecimalResult\n      }\n      else {\n        vSubDecimalResult = (tDict[vDecimalNum%10]) + ' ' + vSubDecimalResult\n      }\n\n      vDecimalNum = Math.floor(vDecimalNum/10)\n      vLoop = vLoop - 1\n    }\n  }\n\n  //--main number\n  let Number = Math.abs(MONEY);\n  if (Number == 0){\n    vResult = ZeroWord\n  }\n  else{\n    let vSubResult = ''\n    let v000Num = 0\n    let v00Num = 0\n    let v0Num = 0\n    let vIndex = 0\n\n    while (Number > 0){\n      //-- from right to left: take first 000\n      v000Num = Number % 1000\n      v00Num = v000Num % 100\n      v0Num = v00Num % 10\n      if (v000Num == 0){\n        vSubResult = ''\n      }\n      else{\n        //--00\n        if (v00Num < 20){\n          //-- less than 20\n          vSubResult = tDict[v00Num]\n          if (v00Num < 10 && v00Num > 0 && (v000Num > 99 || Math.floor(Number / 1000) > 0)){//--e.g 1 001: 1000 AND 1; or 201 000: (200 AND 1) 000\n            vSubResult = AndWord + ' ' + vSubResult\n          }\n        }\n        else {\n          //-- greater than or equal 20\n          vSubResult = tDict[v0Num]\n          v00Num = Math.round(Math.floor(v00Num/10)*10)\n          vSubResult = tDict[v00Num] + (\n            vSubResult != undefined ? '-' + vSubResult : ''\n          )\n        }\n\n        //--000\n        if (v000Num > 99){\n          vSubResult = tDict[Math.round(Math.floor(v000Num / 100))] + ' ' + HundredWord + (vSubResult != undefined ? ' ' + vSubResult : '')\n        }\n      }\n\n      //--000xxx\n      if (vSubResult != '' && vSubResult != undefined){\n        vSubResult = vSubResult + ' '\n                    + (vIndex == 1 ? ThousandWord : (\n                        vIndex == 2 ? MillionWord : (\n                        vIndex == 3 ? BillionWord : (\n                        vIndex == 4 ? TrillionWord : (\n                        vIndex > 3 && vIndex%3 == 2 ? MillionWord + ' ' + (BillionWord + ' ').repeat(vIndex%3).trim() : (\n                        vIndex > 3 && vIndex%3 == 0 ? (BillionWord + ' ').repeat(vIndex%3).trim() : ''\n                      ))))))\n\n        vResult = vSubResult + ' ' + vResult\n      }\n\n      //-- next 000 (to left)\n      vIndex = vIndex + 1\n      Number = Math.round(Math.floor(Number / 1000))\n    }\n  }\n\n  vResult = vResult.trim() + ' ' + (\n    vSubDecimalResult != '' ? DotWord + ' ' + vSubDecimalResult : ''\n  )\n  return vResult.trim();\n$$\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8802862, "supported_languages": null}, "macro.dbt_translate.sqlserver__compile_money_to_words_en": {"name": "sqlserver__compile_money_to_words_en", "resource_type": "macro", "package_name": "dbt_translate", "path": "macros/compile/sqlserver/sqlserver_compile_money_to_words_en.sql", "original_file_path": "macros/compile/sqlserver/sqlserver_compile_money_to_words_en.sql", "unique_id": "macro.dbt_translate.sqlserver__compile_money_to_words_en", "macro_sql": "{% macro sqlserver__compile_money_to_words_en() %}\n\n--======================================================\n-- Usage:  Lib: MoneyToWords in English\n-- Notes:  It DOES NOT support negative number.\n--      Please concat 'negative word' into the result in that case\n-- History:\n-- Date      Author    Description\n-- 2020-09-16  NV      Intial\n-- 2020-12-07  DN      Fix odd number\n--======================================================\nCREATE OR ALTER FUNCTION {{var('num2words_schema', target.schema)}}.MoneyToWords_EN(@Number DECIMAL(17,2))\nRETURNS NVARCHAR(MAX)\nAS\nBEGIN\n  SET @Number = ABS(@Number)\n  DECLARE @vResult NVARCHAR(MAX) = ''\n\n  -- pre-data\n  DECLARE @tDict    TABLE (Num INT NOT NULL, Nam NVARCHAR(255) NOT NULL)\n  INSERT\n  INTO  @tDict (Num, Nam)\n  VALUES  (1,'one'),(2,'two'),(3,'three'),(4,'four'),(5,'five'),(6,'six'),(7,'seven'),(8,'eight'),(9,'nine'),\n          (10,'ten'),(11,'eleven'),(12,'twelve'),(13,'thirteen'),(14,'fourteen'),(15,'fifteen'),(16,'sixteen'),(17,'seventeen'),(18,'eighteen'),(19,'nineteen'),\n          (20,'twenty'),(30,'thirty'),(40,'fourty'),(50,'fifty'),(60,'sixty'),(70,'seventy'),(80,'eighty'),(90,'ninety')\n\n  DECLARE @ZeroWord       NVARCHAR(10) = 'zero'\n  DECLARE @DotWord        NVARCHAR(10) = 'point'\n  DECLARE @AndWord        NVARCHAR(10) = 'and'\n  DECLARE @HundredWord    NVARCHAR(10) = 'hundred'\n  DECLARE @ThousandWord   NVARCHAR(10) = 'thousand'\n  DECLARE @MillionWord    NVARCHAR(10) = 'million'\n  DECLARE @BillionWord    NVARCHAR(10) = 'billion'\n  DECLARE @TrillionWord   NVARCHAR(10) = 'trillion'\n\n  -- decimal number\n  DECLARE @vDecimalNum INT = (@Number - FLOOR(@Number)) * 100\n  DECLARE @vLoop SMALLINT = CONVERT(SMALLINT, SQL_VARIANT_PROPERTY(@Number, 'Scale'))\n  DECLARE @vSubDecimalResult  NVARCHAR(MAX) = N''\n  IF @vDecimalNum > 0\n  BEGIN\n    WHILE @vLoop > 0\n    BEGIN\n      IF @vDecimalNum % 10 = 0\n        SET @vSubDecimalResult = FORMATMESSAGE('%s %s', @ZeroWord, @vSubDecimalResult)\n      ELSE\n        SELECT  @vSubDecimalResult = FORMATMESSAGE('%s %s', Nam, @vSubDecimalResult)\n        FROM  @tDict\n        WHERE  Num = @vDecimalNum%10\n\n      SET @vDecimalNum = FLOOR(@vDecimalNum/10)\n      SET @vLoop = @vLoop - 1\n    END\n  END\n\n  -- main number\n  SET @Number = FLOOR(@Number)\n  IF @Number = 0\n    SET @vResult = @ZeroWord\n  ELSE\n  BEGIN\n    DECLARE @vSubResult  NVARCHAR(MAX) = ''\n    DECLARE @v000Num DECIMAL(15,0) = 0\n    DECLARE @v00Num DECIMAL(15,0) = 0\n    DECLARE @v0Num DECIMAL(15,0) = 0\n    DECLARE @vIndex SMALLINT = 0\n\n    WHILE @Number > 0\n    BEGIN\n      -- from right to left: take first 000\n      SET @v000Num = @Number % 1000\n      SET @v00Num = @v000Num % 100\n      SET @v0Num = @v00Num % 10\n      IF @v000Num = 0\n      BEGIN\n        SET @vSubResult = ''\n      END\n      ELSE\n      BEGIN\n        --00\n        IF @v00Num < 20\n        BEGIN\n          -- less than 20\n          SELECT @vSubResult = Nam FROM @tDict WHERE Num = @v00Num\n          IF @v00Num < 10 AND @v00Num > 0 AND (@v000Num > 99 OR FLOOR(@Number / 1000) > 0)--e.g 1 001: 1000 AND 1; or 201 000: (200 AND 1) 000\n            SET @vSubResult = FORMATMESSAGE('%s %s', @AndWord, @vSubResult)\n        END\n        ELSE\n        BEGIN\n          -- greater than or equal 20\n          SELECT @vSubResult = Nam FROM @tDict WHERE Num = @v0Num\n          SET @v00Num = FLOOR(@v00Num/10)*10\n          SELECT @vSubResult = FORMATMESSAGE('%s-%s', Nam, @vSubResult) FROM @tDict WHERE Num = @v00Num\n        END\n\n        --000\n        IF @v000Num > 99\n          SELECT @vSubResult = FORMATMESSAGE('%s %s %s', Nam, @HundredWord, @vSubResult) FROM @tDict WHERE Num = CONVERT(INT,@v000Num / 100)\n      END\n\n      --000xxx\n      IF @vSubResult <> ''\n      BEGIN\n\n        SET @vSubResult = FORMATMESSAGE('%s %s', @vSubResult, CASE\n                                    WHEN @vIndex=1 THEN @ThousandWord\n                                    WHEN @vIndex=2 THEN @MillionWord\n                                    WHEN @vIndex=3 THEN @BillionWord\n                                    WHEN @vIndex=4 THEN @TrillionWord\n                                    WHEN @vIndex>3 AND @vIndex%3=2 THEN @MillionWord + ' ' + TRIM(REPLICATE(@BillionWord + ' ',@vIndex%3))\n                                    WHEN @vIndex>3 AND @vIndex%3=0 THEN TRIM(REPLICATE(@BillionWord + ' ',@vIndex%3))\n                                    ELSE ''\n                                  END)\n\n        SET @vResult = FORMATMESSAGE('%s %s', @vSubResult, @vResult)\n      END\n\n      -- next 000 (to left)\n      SET @vIndex = @vIndex + 1\n      SET @Number = FLOOR(@Number / 1000)\n    END\n  END\n\n  SET @vResult = FORMATMESSAGE('%s %s', TRIM(@vResult), COALESCE(@DotWord + ' ' + NULLIF(@vSubDecimalResult,''), ''))\n  SET @vResult = REPLACE(@vResult, '  ', ' ')\n\n  -- result\n    RETURN @vResult\nEND\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695341474.8821826, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.dbt_artifacts.command_invocation_id": {"name": "command_invocation_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.command_invocation_id", "block_contents": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation."}, "doc.dbt_artifacts.node_id": {"name": "node_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.node_id", "block_contents": "Unique node identifier."}, "doc.dbt_artifacts.name": {"name": "name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.name", "block_contents": "Name of the node."}, "doc.dbt_artifacts.schema": {"name": "schema", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.schema", "block_contents": "Configured schema for the node."}, "doc.dbt_artifacts.package_name": {"name": "package_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.package_name", "block_contents": "Name of the dbt package which contains the node."}, "doc.dbt_artifacts.total_node_runtime": {"name": "total_node_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.total_node_runtime", "block_contents": "Total time spent executing this node (seconds)."}, "doc.dbt_artifacts.compile_started_at": {"name": "compile_started_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.compile_started_at", "block_contents": "Timestamp when the node started compiling."}, "doc.dbt_artifacts.depends_on_nodes": {"name": "depends_on_nodes", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.depends_on_nodes", "block_contents": "Array of node identifiers that this node depends on in the execution graph."}, "doc.dbt_artifacts.status": {"name": "status", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.status", "block_contents": "Represents the execution status of a node, can be success, failure, or error."}, "doc.dbt_artifacts.query_completed_at": {"name": "query_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.query_completed_at", "block_contents": "Timestamp when the node's SQL query completed."}, "doc.dbt_artifacts.materialization": {"name": "materialization", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.materialization", "block_contents": "The materialization of the model."}, "doc.dbt_artifacts.database": {"name": "database", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.database", "block_contents": "The configured database for the node."}, "doc.dbt_artifacts.rows_affected": {"name": "rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.rows_affected", "block_contents": "Number of rows affected by the model execution."}, "doc.dbt_artifacts.bytes_processed": {"name": "bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.bytes_processed", "block_contents": "Number of bytes processed by the model execution."}, "doc.dbt_artifacts.thread_id": {"name": "thread_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.thread_id", "block_contents": "Which thread executed this node? E.g. Thread-1"}, "doc.dbt_artifacts.path": {"name": "path", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.path", "block_contents": "Path to the model on the local filesystem."}, "doc.dbt_artifacts.was_full_refresh": {"name": "was_full_refresh", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.was_full_refresh", "block_contents": "Boolean flag indicating whether the nodes run was a full refresh or not."}, "doc.dbt_artifacts.checksum": {"name": "checksum", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.checksum", "block_contents": "Checksum of the model."}, "doc.dbt_artifacts.seed_execution_id": {"name": "seed_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.seed_execution_id", "block_contents": "Execution ID of the seed node."}, "doc.dbt_artifacts.test_execution_id": {"name": "test_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.test_execution_id", "block_contents": "Execution ID of the test node."}, "doc.dbt_artifacts.snapshot_execution_id": {"name": "snapshot_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.snapshot_execution_id", "block_contents": "Execution ID of the snapshot node."}, "doc.dbt_artifacts.model_execution_id": {"name": "model_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.model_execution_id", "block_contents": "Execution ID of the model node."}, "doc.dbt_artifacts.loader": {"name": "loader", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.loader", "block_contents": "Describes the tool that loads this source into your warehouse."}, "doc.dbt_artifacts.freshness": {"name": "freshness", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.freshness", "block_contents": "The specified freshness of the source model."}, "doc.dbt_artifacts.url": {"name": "url", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.url", "block_contents": "The URL of the BI tool where the data defined by the exposure can be viewed."}, "doc.dbt_artifacts.identifier": {"name": "identifier", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.identifier", "block_contents": "Source identifier."}, "doc.dbt_artifacts.source_name": {"name": "source_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.source_name", "block_contents": "Source name."}, "doc.dbt_artifacts.test_path": {"name": "test_path", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.test_path", "block_contents": "Path to the yaml (SQL in case of a singular test) file describing the test."}, "doc.dbt_artifacts.tags": {"name": "tags", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.tags", "block_contents": "Tags used in resource selection associated with the node."}, "doc.dbt_artifacts.strategy": {"name": "strategy", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.strategy", "block_contents": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check."}, "doc.dbt_artifacts.failures": {"name": "failures", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.failures", "block_contents": "Test failures. Value is 1 if the test failed, 0 if successful."}, "doc.dbt_artifacts.loaded_at_field": {"name": "loaded_at_field", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.loaded_at_field", "block_contents": "A column name (or expression) that returns a timestamp indicating freshness."}, "doc.dbt_artifacts.type": {"name": "type", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.type", "block_contents": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)"}, "doc.dbt_artifacts.description": {"name": "description", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.description", "block_contents": "Node description."}, "doc.dbt_artifacts.maturity": {"name": "maturity", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.maturity", "block_contents": "Exposure maturity; one of high, medium, low."}, "doc.dbt_artifacts.owner": {"name": "owner", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.owner", "block_contents": "Owner of the exposure, usually an email address."}, "doc.dbt_artifacts.source_execution_id": {"name": "source_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.source_execution_id", "block_contents": "Execution ID of the source node."}, "doc.dbt_artifacts.exposure_execution_id": {"name": "exposure_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.exposure_execution_id", "block_contents": "Execution ID of the exposure node."}, "doc.dbt_artifacts.dbt_version": {"name": "dbt_version", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_version", "block_contents": "Installed version of dbt that is currently running."}, "doc.dbt_artifacts.project_name": {"name": "project_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.project_name", "block_contents": "Name for the root-level project which is being run by dbt."}, "doc.dbt_artifacts.run_started_at": {"name": "run_started_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.run_started_at", "block_contents": "The start timestamp of the dbt execution which generated the record."}, "doc.dbt_artifacts.dbt_command": {"name": "dbt_command", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_command", "block_contents": "dbt command of this run."}, "doc.dbt_artifacts.full_refresh_flag": {"name": "full_refresh_flag", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.full_refresh_flag", "block_contents": "Boolean flag indicating whether the dbt run was in full refresh mode or not."}, "doc.dbt_artifacts.target_profile_name": {"name": "target_profile_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_profile_name", "block_contents": "The name of the active profile."}, "doc.dbt_artifacts.target_name": {"name": "target_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_name", "block_contents": "The name of the active target."}, "doc.dbt_artifacts.target_schema": {"name": "target_schema", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_schema", "block_contents": "The name of the target dbt schema."}, "doc.dbt_artifacts.target_threads": {"name": "target_threads", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_threads", "block_contents": "The number of threads in use by dbt."}, "doc.dbt_artifacts.dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_project_id", "block_contents": "The ID of the dbt Cloud Project for this run."}, "doc.dbt_artifacts.dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_job_id", "block_contents": "The ID of the dbt Cloud Job for this run."}, "doc.dbt_artifacts.dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_id", "block_contents": "The ID of this particular run."}, "doc.dbt_artifacts.dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_reason_category", "block_contents": "The \"category\" of the trigger for this run."}, "doc.dbt_artifacts.dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_reason", "block_contents": "The specific trigger for this run."}, "doc.dbt_artifacts.env_vars": {"name": "env_vars", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.env_vars", "block_contents": "Key-value pairs of environment variables to be capture."}, "doc.dbt_artifacts.dbt_vars": {"name": "dbt_vars", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_vars", "block_contents": "Key-value pairs of project variables to be capture."}, "doc.dbt_artifacts.last_full_refresh_run_completed_at": {"name": "last_full_refresh_run_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last full (non-incremental) run."}, "doc.dbt_artifacts.last_full_refresh_run_rows_affected": {"name": "last_full_refresh_run_rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_rows_affected", "block_contents": "Number of rows affected by the node's last full (non-incremental) run."}, "doc.dbt_artifacts.last_full_refresh_run_bytes_processed": {"name": "last_full_refresh_run_bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last full (non-incremental) run."}, "doc.dbt_artifacts.last_full_refresh_run_total_runtime": {"name": "last_full_refresh_run_total_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_total_runtime", "block_contents": "Total time spent executing the node's last full (non-incremental) run (seconds)."}, "doc.dbt_artifacts.last_run_completed_at": {"name": "last_run_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last run."}, "doc.dbt_artifacts.last_run_rows_affected": {"name": "last_run_rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_rows_affected", "block_contents": "Number of rows affected by the node's last run."}, "doc.dbt_artifacts.last_run_bytes_processed": {"name": "last_run_bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last run."}, "doc.dbt_artifacts.last_run_total_runtime": {"name": "last_run_total_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_total_runtime", "block_contents": "Total time spent executing the node's last run (seconds)."}, "doc.dbt_artifacts.meta": {"name": "meta", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.meta", "block_contents": "The meta field of the config associated with the node."}, "doc.dbt_artifacts.invocation_args": {"name": "invocation_args", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.invocation_args", "block_contents": "Key-value pairs of args passed to invocation."}, "doc.dbt_artifacts.dbt_custom_envs": {"name": "dbt_custom_envs", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_custom_envs", "block_contents": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_"}, "doc.dbt_artifacts.alias": {"name": "alias", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.alias", "block_contents": "Alias of the node."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_gx_demo.metricflow_time_spine": [], "model.dbt_gx_demo.processed_orders": ["model.dbt_gx_demo.raw_orders"], "model.dbt_gx_demo.processed_customer_info": ["model.dbt_gx_demo.raw_customer_info"], "model.dbt_gx_demo.processed_transactions": ["model.dbt_gx_demo.raw_transactions"], "model.dbt_gx_demo.processed_inventory": ["model.dbt_gx_demo.raw_inventory"], "model.dbt_gx_demo.processed_airline_info": ["model.dbt_gx_demo.raw_airline_info"], "model.dbt_gx_demo.processed_flight_info": ["model.dbt_gx_demo.raw_flight_info"], "model.dbt_gx_demo.processed_airport_info": ["model.dbt_gx_demo.raw_airport_info"], "model.dbt_gx_demo.processed_netflix_dataset_rating": ["model.dbt_gx_demo.raw_netflix_dataset_rating"], "model.dbt_gx_demo.processed_netflix_credits": ["model.dbt_gx_demo.raw_netflix_credits"], "model.dbt_gx_demo.processed_netflix_best_show": ["model.dbt_gx_demo.raw_netflix_best_show"], "model.dbt_gx_demo.processed_netflix_best_show_by_year": ["model.dbt_gx_demo.raw_netflix_best_show_by_year"], "model.dbt_gx_demo.processed_netflix_originals": ["model.dbt_gx_demo.raw_netflix_originals"], "model.dbt_gx_demo.processed_netflix_best_movie_by_year": ["model.dbt_gx_demo.raw_netflix_best_movie_by_year"], "model.dbt_gx_demo.processed_netflix_titles": ["model.dbt_gx_demo.raw_netflix_titles"], "model.dbt_gx_demo.processed_netflix_dataset_movie": ["model.dbt_gx_demo.raw_netflix_dataset_movie"], "model.dbt_gx_demo.processed_netflix_best_movie": ["model.dbt_gx_demo.raw_netflix_best_movie"], "model.dbt_gx_demo.raw_transactions": ["source.dbt_gx_demo.tpch_sample.CUSTOMER", "source.dbt_gx_demo.tpch_sample.ORDERS"], "model.dbt_gx_demo.raw_customer_info": ["source.dbt_gx_demo.tpcds_sample.CUSTOMER", "source.dbt_gx_demo.tpcds_sample.CUSTOMER_ADDRESS", "source.dbt_gx_demo.tpcds_sample.CUSTOMER_DEMOGRAPHICS"], "model.dbt_gx_demo.raw_orders": ["source.dbt_gx_demo.tpch_sample.CUSTOMER", "source.dbt_gx_demo.tpch_sample.LINEITEM", "source.dbt_gx_demo.tpch_sample.NATION", "source.dbt_gx_demo.tpch_sample.NATION", "source.dbt_gx_demo.tpch_sample.ORDERS", "source.dbt_gx_demo.tpch_sample.PART", "source.dbt_gx_demo.tpch_sample.REGION", "source.dbt_gx_demo.tpch_sample.REGION", "source.dbt_gx_demo.tpch_sample.SUPPLIER"], "model.dbt_gx_demo.raw_inventory": ["model.dbt_gx_demo.raw_orders", "source.dbt_gx_demo.tpch_sample.NATION", "source.dbt_gx_demo.tpch_sample.PART", "source.dbt_gx_demo.tpch_sample.PARTSUPP", "source.dbt_gx_demo.tpch_sample.REGION", "source.dbt_gx_demo.tpch_sample.SUPPLIER"], "model.dbt_gx_demo.raw_flight_info": ["source.dbt_gx_demo.DEMO.FLIGHT"], "model.dbt_gx_demo.raw_airline_info": ["source.dbt_gx_demo.DEMO.AIRLINE"], "model.dbt_gx_demo.raw_airport_info": ["source.dbt_gx_demo.DEMO.AIRPORT"], "model.dbt_gx_demo.raw_netflix_best_show_by_year": ["source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW_BY_YEAR"], "model.dbt_gx_demo.raw_netflix_originals": ["source.dbt_gx_demo.NETFLIX.NETFLIX_ORIGINALS"], "model.dbt_gx_demo.raw_netflix_dataset_rating": ["source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_RATING"], "model.dbt_gx_demo.raw_netflix_credits": ["source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_CREDITS"], "model.dbt_gx_demo.raw_netflix_best_show": ["source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW"], "model.dbt_gx_demo.raw_netflix_titles": ["source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_TITLES"], "model.dbt_gx_demo.raw_netflix_dataset_movie": ["source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_MOVIE"], "model.dbt_gx_demo.raw_netflix_best_movie": ["source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE"], "model.dbt_gx_demo.raw_netflix_best_movie_by_year": ["source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE_BY_YEAR"], "model.dbt_gx_demo.get_order": ["model.dbt_gx_demo.raw_orders"], "model.dbt_gx_demo.failures": [], "model.dbt_gx_demo.stg_customer_info": ["model.dbt_gx_demo.processed_customer_info"], "model.dbt_gx_demo.stg_transactions": ["model.dbt_gx_demo.processed_transactions"], "model.dbt_gx_demo.stg_orders": ["model.dbt_gx_demo.processed_orders"], "model.dbt_gx_demo.stg_inventory": ["model.dbt_gx_demo.processed_inventory"], "model.dbt_gx_demo.stg_flight_info": ["model.dbt_gx_demo.processed_flight_info"], "model.dbt_gx_demo.stg_airline_info": ["model.dbt_gx_demo.processed_airline_info"], "model.dbt_gx_demo.stg_airport_info": ["model.dbt_gx_demo.processed_airport_info"], "model.dbt_gx_demo.stg_netflix_originals": ["model.dbt_gx_demo.processed_netflix_originals"], "model.dbt_gx_demo.stg_netflix_best_show_by_year": ["model.dbt_gx_demo.processed_netflix_best_show_by_year"], "model.dbt_gx_demo.stg_netflix_credits": ["model.dbt_gx_demo.processed_netflix_credits"], "model.dbt_gx_demo.stg_netflix_best_show": ["model.dbt_gx_demo.processed_netflix_best_show"], "model.dbt_gx_demo.stg_netflix_dataset_rating": ["model.dbt_gx_demo.processed_netflix_dataset_rating"], "model.dbt_gx_demo.stg_netflix_best_movie": ["model.dbt_gx_demo.processed_netflix_best_movie"], "model.dbt_gx_demo.stg_netflix_titles": ["model.dbt_gx_demo.processed_netflix_titles"], "model.dbt_gx_demo.stg_netflix_dataset_movie": ["model.dbt_gx_demo.processed_netflix_dataset_movie"], "model.dbt_gx_demo.stg_netflix_best_movie_by_year": ["source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE_BY_YEAR"], "model.dbt_gx_demo.v_stg_inventory": ["model.dbt_gx_demo.raw_inventory"], "model.dbt_gx_demo.v_stg_transactions": ["model.dbt_gx_demo.raw_transactions"], "model.dbt_gx_demo.v_stg_customer_info": ["model.dbt_gx_demo.raw_customer_info"], "model.dbt_gx_demo.v_stg_orders": ["model.dbt_gx_demo.raw_orders"], "model.dbt_gx_demo.v_stg_airport_info": ["model.dbt_gx_demo.raw_airport_info"], "model.dbt_gx_demo.v_stg_flight_info": ["model.dbt_gx_demo.raw_flight_info"], "model.dbt_gx_demo.v_stg_airline_info": ["model.dbt_gx_demo.raw_airline_info"], "model.dbt_gx_demo.t_link_transactions": ["model.dbt_gx_demo.v_stg_transactions"], "model.dbt_gx_demo.hub_supplier": ["model.dbt_gx_demo.v_stg_inventory", "model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.hub_region": ["model.dbt_gx_demo.v_stg_inventory", "model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.hub_order": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.hub_customer": ["model.dbt_gx_demo.v_stg_customer_info", "model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.hub_customer_info": ["model.dbt_gx_demo.v_stg_customer_info"], "model.dbt_gx_demo.hub_nation": ["model.dbt_gx_demo.v_stg_inventory", "model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.hub_lineitem": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.hub_part": ["model.dbt_gx_demo.v_stg_inventory", "model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.hub_airline": ["model.dbt_gx_demo.v_stg_airline_info", "model.dbt_gx_demo.v_stg_flight_info"], "model.dbt_gx_demo.hub_airplane": ["model.dbt_gx_demo.v_stg_flight_info"], "model.dbt_gx_demo.hub_flight": ["model.dbt_gx_demo.v_stg_flight_info"], "model.dbt_gx_demo.hub_airport": ["model.dbt_gx_demo.v_stg_airport_info", "model.dbt_gx_demo.v_stg_flight_info"], "model.dbt_gx_demo.link_customer_order": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.link_customer_address": ["model.dbt_gx_demo.v_stg_customer_info"], "model.dbt_gx_demo.link_inventory_allocation": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.link_inventory": ["model.dbt_gx_demo.v_stg_inventory"], "model.dbt_gx_demo.link_customer_nation": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.link_order_lineitem": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.link_nation_region": ["model.dbt_gx_demo.v_stg_inventory", "model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.link_supplier_nation": ["model.dbt_gx_demo.v_stg_inventory"], "model.dbt_gx_demo.link_airport_airline_airplane_flight": ["model.dbt_gx_demo.v_stg_flight_info"], "model.dbt_gx_demo.sat_inv_inventory_details": ["model.dbt_gx_demo.v_stg_inventory"], "model.dbt_gx_demo.sat_order_cust_nation_details": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.sat_customer_address": ["model.dbt_gx_demo.v_stg_customer_info"], "model.dbt_gx_demo.sat_order_lineitem_details": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.sat_inv_supplier_details": ["model.dbt_gx_demo.v_stg_inventory"], "model.dbt_gx_demo.sat_inv_supp_nation_details": ["model.dbt_gx_demo.v_stg_inventory"], "model.dbt_gx_demo.sat_inv_supp_region_details": ["model.dbt_gx_demo.v_stg_inventory"], "model.dbt_gx_demo.sat_order_order_details": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.sat_ma_order_lineitem_details": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.sat_inv_part_details": ["model.dbt_gx_demo.v_stg_inventory"], "model.dbt_gx_demo.sat_order_customer_details": ["model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.sat_order_cust_region_details": ["model.dbt_gx_demo.v_stg_orders"], "analysis.dbt_gx_demo.codegen_demo_create_base_model": ["source.dbt_gx_demo.tpch_sample.LINEITEM"], "analysis.dbt_gx_demo.codegen_demo_create_source": ["model.dbt_gx_demo.stg_airline_info"], "operation.dbt_gx_demo.dbt_gx_demo-on-run-end-0": ["model.dbt_gx_demo.failures"], "operation.dbt_gx_demo.dbt_gx_demo-on-run-end-1": [], "model.dbt_snowflake_monitoring.warehouses_type2_dimension": ["model.dbt_snowflake_monitoring.stg_query_history", "model.dbt_snowflake_monitoring.stg_query_history"], "model.dbt_snowflake_monitoring.cost_per_query": ["model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_query_history", "model.dbt_snowflake_monitoring.stg_warehouse_metering_history", "model.dbt_snowflake_monitoring.stg_warehouse_metering_history"], "model.dbt_snowflake_monitoring.hourly_spend": ["model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.stg_database_storage_usage_history", "model.dbt_snowflake_monitoring.stg_database_storage_usage_history", "model.dbt_snowflake_monitoring.stg_metering_daily_history", "model.dbt_snowflake_monitoring.stg_metering_daily_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_metering_history", "model.dbt_snowflake_monitoring.stg_serverless_task_history", "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history", "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily"], "model.dbt_snowflake_monitoring.daily_spend": ["model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.query_history_enriched": ["model.dbt_snowflake_monitoring.cost_per_query", "model.dbt_snowflake_monitoring.stg_query_history"], "model.dbt_snowflake_monitoring.query_base_table_access": ["model.dbt_snowflake_monitoring.query_base_object_access"], "model.dbt_snowflake_monitoring.query_direct_table_access": ["model.dbt_snowflake_monitoring.query_direct_object_access"], "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view": ["model.dbt_snowflake_monitoring.stg_remaining_balance_daily"], "model.dbt_snowflake_monitoring.warehouse_cluster_status": ["model.dbt_snowflake_monitoring.stg_warehouse_events_history", "model.dbt_snowflake_monitoring.stg_warehouse_events_history"], "model.dbt_snowflake_monitoring.dbt_queries": ["model.dbt_snowflake_monitoring.query_history_enriched"], "model.dbt_snowflake_monitoring.query_direct_object_access": ["model.dbt_snowflake_monitoring.stg_access_history"], "model.dbt_snowflake_monitoring.query_base_object_access": ["model.dbt_snowflake_monitoring.stg_access_history"], "model.dbt_snowflake_monitoring.warehouse_credits_map": [], "model.dbt_snowflake_monitoring.daily_rates": ["model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view", "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view", "model.dbt_snowflake_monitoring.stg_rate_sheet_daily"], "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history"], "model.dbt_snowflake_monitoring.stg_remaining_balance_daily": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily"], "model.dbt_snowflake_monitoring.stg_serverless_task_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history"], "model.dbt_snowflake_monitoring.stg_query_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.query_history"], "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily"], "model.dbt_snowflake_monitoring.stg_access_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.access_history"], "model.dbt_snowflake_monitoring.stg_rate_sheet_daily": ["source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily"], "model.dbt_snowflake_monitoring.stg_database_storage_usage_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history"], "model.dbt_snowflake_monitoring.stg_metering_daily_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history"], "model.dbt_snowflake_monitoring.stg_warehouse_metering_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history"], "model.dbt_snowflake_monitoring.stg_warehouse_events_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_events_history"], "model.dbt_snowflake_monitoring.stg_metering_history": ["source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history"], "model.dbt_artifacts.fct_dbt__test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.fct_dbt__snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.dim_dbt__tests": ["model.dbt_artifacts.stg_dbt__tests"], "model.dbt_artifacts.dim_dbt__snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.fct_dbt__seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.fct_dbt__model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.dim_dbt__current_models": ["model.dbt_artifacts.stg_dbt__model_executions", "model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.dim_dbt__exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.dim_dbt__models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.dim_dbt__sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.dim_dbt__seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.fct_dbt__invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.snapshot_executions": [], "model.dbt_artifacts.test_executions": [], "model.dbt_artifacts.exposures": [], "model.dbt_artifacts.models": [], "model.dbt_artifacts.seeds": [], "model.dbt_artifacts.sources": [], "model.dbt_artifacts.tests": [], "model.dbt_artifacts.snapshots": [], "model.dbt_artifacts.seed_executions": [], "model.dbt_artifacts.model_executions": [], "model.dbt_artifacts.invocations": [], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.invocations"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.model_executions"], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.seed_executions"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.snapshots"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.tests"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.exposures"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.snapshot_executions"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.test_executions"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.seeds"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.models"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.sources"], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.dbt_gx_demo.not_null_processed_customer_info_C_CUSTOMER_SK.c589f7a5e1": ["model.dbt_gx_demo.processed_customer_info"], "test.dbt_gx_demo.not_null_processed_customer_info_C_CUSTOMER_ID.32f12b07f6": ["model.dbt_gx_demo.processed_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_customer_info_LOAD_DATE_TIMESTAMP__Day__1000.eb9534213f": ["model.dbt_gx_demo.processed_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_compound_columns_to_be_unique_processed_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID.5417155236": ["model.dbt_gx_demo.processed_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_inventory_LOAD_DATE_TIMESTAMP__Day__1000.5ef7906344": ["model.dbt_gx_demo.processed_inventory"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_orders_LOAD_DATE_TIMESTAMP__Day__1000.7a702e56d1": ["model.dbt_gx_demo.processed_orders"], "test.dbt_gx_demo.dbt_expectations_expect_table_column_count_to_be_between_processed_orders_40__1.368c3d992b": ["model.dbt_gx_demo.processed_orders"], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_processed_orders_ORDERKEY__LINENUMBER.5800f50161": ["model.dbt_gx_demo.processed_orders"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_transactions_LOAD_DATE_TIMESTAMP__Day__1000.cd4f9ab805": ["model.dbt_gx_demo.processed_transactions"], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_processed_transactions_ORDER_ID__CUSTOMER_ID.83e85ab518": ["model.dbt_gx_demo.processed_transactions"], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_match_set_processed_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP.c56ca7a83e": ["model.dbt_gx_demo.processed_transactions"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_ETL_CREATE_DATE__Day__1000.b7e1c7ee16": ["model.dbt_gx_demo.processed_netflix_best_movie"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_processed_netflix_best_movie_ETL_CREATE_DATE.4829a91995": ["model.dbt_gx_demo.processed_netflix_best_movie"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_by_year_ETL_CREATE_DATE__Day__1000.d17868dafd": ["model.dbt_gx_demo.processed_netflix_best_movie_by_year"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_ETL_CREATE_DATE__Day__1000.7723ec0182": ["model.dbt_gx_demo.processed_netflix_best_show"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_by_year_ETL_CREATE_DATE__Day__1000.35adf63971": ["model.dbt_gx_demo.processed_netflix_best_show_by_year"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_credits_ETL_CREATE_DATE__Day__1000.d11d6cdc93": ["model.dbt_gx_demo.processed_netflix_credits"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_movie_ETL_CREATE_DATE__Day__1000.464c2d3dc8": ["model.dbt_gx_demo.processed_netflix_dataset_movie"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_rating_ETL_CREATE_DATE__Day__1000.41ca4c4576": ["model.dbt_gx_demo.processed_netflix_dataset_rating"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_originals_ETL_CREATE_DATE__Day__1000.ac411acdc5": ["model.dbt_gx_demo.processed_netflix_originals"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_titles_ETL_CREATE_DATE__Day__1000.ffccfa3162": ["model.dbt_gx_demo.processed_netflix_titles"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_airline_info_LOAD_DATE_TIMESTAMP__Day__1000.fbd94a9637": ["model.dbt_gx_demo.processed_airline_info"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_airport_info_LOAD_DATE_TIMESTAMP__Day__1000.4c006f08c0": ["model.dbt_gx_demo.processed_airport_info"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_flight_info_LOAD_DATE_TIMESTAMP__day__1000.7c22666d07": ["model.dbt_gx_demo.processed_flight_info"], "test.dbt_gx_demo.not_null_stg_customer_info_C_CUSTOMER_SK.31f6d35e10": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_SK__number.49440b7b40": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.not_null_stg_customer_info_C_CUSTOMER_ID.0bb8cad22a": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_ID__varchar.6f28245cfc": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.accepted_values_stg_customer_info_C_SALUTATION__Dr___Mrs___Sir__Miss__Ms___Mr_.f5fe5d765b": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_SALUTATION__varchar.36ab62d139": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_FIRST_NAME__varchar.1e2d371be4": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LAST_NAME__varchar.e6699594fc": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_DAY__number.1b448c94c9": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_YEAR__number.828757e1a4": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_EMAIL_ADDRESS__varchar.1aa45c55e7": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LOGIN__varchar.a3e38b2f93": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ADDRESS_ID__varchar.28ad6784ea": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_NUMBER__varchar.aaa7bb813f": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_TYPE__varchar.0f6b1230b3": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_SUITE_NUMBER__varchar.50dcf81140": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_CITY__varchar.cf0d5b183f": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTY__varchar.93c3ddd700": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STATE__varchar.32cc390077": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ZIP__varchar.3a541943e4": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTRY__varchar.981b2b63d3": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_GMT_OFFSET__number.bf8bafe9f6": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_LOCATION_TYPE__varchar.90702ffa32": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_GENDER__varchar.6273cc4354": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.not_null_stg_customer_info_CD_MARITAL_STATUS.963dbbc827": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.accepted_values_stg_customer_info_CD_MARITAL_STATUS__S__D__W__U__M.dbaae4f8dd": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_MARITAL_STATUS__varchar.cf56ac23ad": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_EDUCATION_STATUS__varchar.9576a02d5e": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_PURCHASE_ESTIMATE__number.fc040e3eec": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_CREDIT_RATING__varchar.d147a744cd": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_DEP_COUNT__number.a360689910": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_stg_customer_info_LOAD_DATE_TIMESTAMP__day__100.3ff4929afc": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_LOAD_DATE_TIMESTAMP__timestamp_ltz.de1153a3d0": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_compound_columns_to_be_unique_stg_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID.818257fc11": ["model.dbt_gx_demo.stg_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_table_column_count_to_be_between_stg_orders_40__1.758b6f9a19": ["model.dbt_gx_demo.stg_orders"], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_stg_orders_ORDERKEY__LINENUMBER.47459b381c": ["model.dbt_gx_demo.stg_orders"], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_stg_transactions_ORDER_ID__CUSTOMER_ID.0e7eb63c1d": ["model.dbt_gx_demo.stg_transactions"], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_match_set_stg_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP.29cc7c5733": ["model.dbt_gx_demo.stg_transactions"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_stg_netflix_best_movie_ETL_CREATE_DATE.e52577701a": ["model.dbt_gx_demo.stg_netflix_best_movie"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_info_LOAD_DATE.f06bb4117a": ["model.dbt_gx_demo.hub_customer_info"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_info_RECORD_SOURCE.8f8f4f4943": ["model.dbt_gx_demo.hub_customer_info"], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_customer_CUSTOMER_PK.f4acb921f8": ["model.dbt_gx_demo.hub_customer"], "test.dbt_gx_demo.unique_hub_customer_CUSTOMER_PK.314091a1fe": ["model.dbt_gx_demo.hub_customer"], "test.dbt_gx_demo.not_null_hub_customer_CUSTOMER_PK.1d78ce28a2": ["model.dbt_gx_demo.hub_customer"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_LOAD_DATE.818fc77f99": ["model.dbt_gx_demo.hub_customer"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_RECORD_SOURCE.900d0dc7f1": ["model.dbt_gx_demo.hub_customer"], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_lineitem_LINEITEM_PK.6bde3e4c93": ["model.dbt_gx_demo.hub_lineitem"], "test.dbt_gx_demo.unique_hub_lineitem_LINEITEM_PK.97dc997d71": ["model.dbt_gx_demo.hub_lineitem"], "test.dbt_gx_demo.not_null_hub_lineitem_LINEITEM_PK.7fbaf72202": ["model.dbt_gx_demo.hub_lineitem"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_lineitem_LOAD_DATE.805bf794b1": ["model.dbt_gx_demo.hub_lineitem"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_lineitem_RECORD_SOURCE.cb12657b7f": ["model.dbt_gx_demo.hub_lineitem"], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_nation_NATION_PK.67febfdd15": ["model.dbt_gx_demo.hub_nation"], "test.dbt_gx_demo.unique_hub_nation_NATION_PK.cc2fd27451": ["model.dbt_gx_demo.hub_nation"], "test.dbt_gx_demo.not_null_hub_nation_NATION_PK.8b55844abf": ["model.dbt_gx_demo.hub_nation"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_nation_LOAD_DATE.41485c19cc": ["model.dbt_gx_demo.hub_nation"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_nation_RECORD_SOURCE.9417c98e3f": ["model.dbt_gx_demo.hub_nation"], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_order_ORDER_PK.cdf0c9ca53": ["model.dbt_gx_demo.hub_order"], "test.dbt_gx_demo.unique_hub_order_ORDER_PK.dd56da982e": ["model.dbt_gx_demo.hub_order"], "test.dbt_gx_demo.not_null_hub_order_ORDER_PK.d767df4225": ["model.dbt_gx_demo.hub_order"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_order_LOAD_DATE.8a20a1bf8d": ["model.dbt_gx_demo.hub_order"], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_order_RECORD_SOURCE.20b1a3e20a": ["model.dbt_gx_demo.hub_order"], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_part_PART_PK.0926df92b7": ["model.dbt_gx_demo.hub_part"], "test.dbt_gx_demo.unique_hub_part_PART_PK.38f30cc60e": ["model.dbt_gx_demo.hub_part"], "test.dbt_gx_demo.not_null_hub_part_PART_PK.fd5ead72ff": ["model.dbt_gx_demo.hub_part"], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_region_REGION_PK.45bbc9debc": ["model.dbt_gx_demo.hub_region"], "test.dbt_gx_demo.unique_hub_region_REGION_PK.1623d63653": ["model.dbt_gx_demo.hub_region"], "test.dbt_gx_demo.not_null_hub_region_REGION_PK.da7bb5bc68": ["model.dbt_gx_demo.hub_region"], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_supplier_SUPPLIER_PK.464f36f4d8": ["model.dbt_gx_demo.hub_supplier"], "test.dbt_gx_demo.unique_hub_supplier_SUPPLIER_PK.9d6f593fff": ["model.dbt_gx_demo.hub_supplier"], "test.dbt_gx_demo.not_null_hub_supplier_SUPPLIER_PK.cb6bc2431c": ["model.dbt_gx_demo.hub_supplier"], "test.dbt_gx_demo.dbt_constraints_primary_key_sat_inv_inventory_details_INVENTORY_HASHDIFF.4b1886b64d": ["model.dbt_gx_demo.sat_inv_inventory_details"], "test.dbt_gx_demo.unique_sat_inv_inventory_details_INVENTORY_HASHDIFF.ca26536e5a": ["model.dbt_gx_demo.sat_inv_inventory_details"], "test.dbt_gx_demo.not_null_sat_inv_inventory_details_INVENTORY_HASHDIFF.a2f6004c48": ["model.dbt_gx_demo.sat_inv_inventory_details"], "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d": ["model.dbt_snowflake_monitoring.cost_per_query"], "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b": ["model.dbt_snowflake_monitoring.cost_per_query"], "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_SK.ce7b263533": ["source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO"], "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_ID.07f591b9c5": ["source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO"], "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS.e2cb8b9012": ["source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO"], "test.dbt_gx_demo.source_accepted_values_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS__S__D__W__U__M.063ab0c72f": ["source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO"], "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_INVENTORY_LOAD_DATE_TIMESTAMP__Day__100000.1e4be90f25": ["source.dbt_gx_demo.sales_demo.RAW_INVENTORY"], "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_ORDERS_LOAD_DATE_TIMESTAMP__Day__10000.6415ff9c9b": ["source.dbt_gx_demo.sales_demo.RAW_ORDERS"], "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_TRANSACTIONS_LOAD_DATE_TIMESTAMP__Day__10000.f998f521fa": ["source.dbt_gx_demo.sales_demo.RAW_TRANSACTIONS"], "source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO": [], "source.dbt_gx_demo.sales_demo.RAW_INVENTORY": [], "source.dbt_gx_demo.sales_demo.RAW_ORDERS": [], "source.dbt_gx_demo.sales_demo.RAW_TRANSACTIONS": [], "source.dbt_gx_demo.flight_demo.RAW_AIRPORT_INFO": [], "source.dbt_gx_demo.flight_demo.RAW_AIRLINE_INFO": [], "source.dbt_gx_demo.flight_demo.RAW_FLIGHT_INFO": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_MOVIE": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_MOVIE_BY_YEAR": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_SHOW": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_SHOW_BY_YEAR": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_DATASET_MOVIE": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_DATASET_RATING": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_ORIGINALS": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_CREDITS": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_TITLES": [], "source.dbt_gx_demo.tpch_sample.LINEITEM": [], "source.dbt_gx_demo.tpch_sample.CUSTOMER": [], "source.dbt_gx_demo.tpch_sample.ORDERS": [], "source.dbt_gx_demo.tpch_sample.PARTSUPP": [], "source.dbt_gx_demo.tpch_sample.SUPPLIER": [], "source.dbt_gx_demo.tpch_sample.PART": [], "source.dbt_gx_demo.tpch_sample.NATION": [], "source.dbt_gx_demo.tpch_sample.REGION": [], "source.dbt_gx_demo.tpcds_sample.CUSTOMER": [], "source.dbt_gx_demo.tpcds_sample.CUSTOMER_ADDRESS": [], "source.dbt_gx_demo.tpcds_sample.CUSTOMER_DEMOGRAPHICS": [], "source.dbt_gx_demo.tpcds_sample.HOUSEHOLD_DEMOGRAPHICS": [], "source.dbt_gx_demo.DEMO.AIRPORT": [], "source.dbt_gx_demo.DEMO.AIRLINE": [], "source.dbt_gx_demo.DEMO.FLIGHT": [], "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE": [], "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE_BY_YEAR": [], "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW": [], "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW_BY_YEAR": [], "source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_MOVIE": [], "source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_RATING": [], "source.dbt_gx_demo.NETFLIX.NETFLIX_ORIGINALS": [], "source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_CREDITS": [], "source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_TITLES": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.access_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.query_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_events_history": [], "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history": [], "source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily": [], "source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily": [], "source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily": []}, "child_map": {"model.dbt_gx_demo.metricflow_time_spine": [], "model.dbt_gx_demo.processed_orders": ["model.dbt_gx_demo.stg_orders", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_orders_LOAD_DATE_TIMESTAMP__Day__1000.7a702e56d1", "test.dbt_gx_demo.dbt_expectations_expect_table_column_count_to_be_between_processed_orders_40__1.368c3d992b", "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_processed_orders_ORDERKEY__LINENUMBER.5800f50161"], "model.dbt_gx_demo.processed_customer_info": ["model.dbt_gx_demo.stg_customer_info", "test.dbt_gx_demo.dbt_expectations_expect_compound_columns_to_be_unique_processed_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID.5417155236", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_customer_info_LOAD_DATE_TIMESTAMP__Day__1000.eb9534213f", "test.dbt_gx_demo.not_null_processed_customer_info_C_CUSTOMER_ID.32f12b07f6", "test.dbt_gx_demo.not_null_processed_customer_info_C_CUSTOMER_SK.c589f7a5e1"], "model.dbt_gx_demo.processed_transactions": ["model.dbt_gx_demo.stg_transactions", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_transactions_LOAD_DATE_TIMESTAMP__Day__1000.cd4f9ab805", "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_processed_transactions_ORDER_ID__CUSTOMER_ID.83e85ab518", "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_match_set_processed_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP.c56ca7a83e"], "model.dbt_gx_demo.processed_inventory": ["model.dbt_gx_demo.stg_inventory", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_inventory_LOAD_DATE_TIMESTAMP__Day__1000.5ef7906344"], "model.dbt_gx_demo.processed_airline_info": ["model.dbt_gx_demo.stg_airline_info", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_airline_info_LOAD_DATE_TIMESTAMP__Day__1000.fbd94a9637"], "model.dbt_gx_demo.processed_flight_info": ["model.dbt_gx_demo.stg_flight_info", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_flight_info_LOAD_DATE_TIMESTAMP__day__1000.7c22666d07"], "model.dbt_gx_demo.processed_airport_info": ["model.dbt_gx_demo.stg_airport_info", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_airport_info_LOAD_DATE_TIMESTAMP__Day__1000.4c006f08c0"], "model.dbt_gx_demo.processed_netflix_dataset_rating": ["model.dbt_gx_demo.stg_netflix_dataset_rating", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_rating_ETL_CREATE_DATE__Day__1000.41ca4c4576"], "model.dbt_gx_demo.processed_netflix_credits": ["model.dbt_gx_demo.stg_netflix_credits", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_credits_ETL_CREATE_DATE__Day__1000.d11d6cdc93"], "model.dbt_gx_demo.processed_netflix_best_show": ["model.dbt_gx_demo.stg_netflix_best_show", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_ETL_CREATE_DATE__Day__1000.7723ec0182"], "model.dbt_gx_demo.processed_netflix_best_show_by_year": ["model.dbt_gx_demo.stg_netflix_best_show_by_year", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_by_year_ETL_CREATE_DATE__Day__1000.35adf63971"], "model.dbt_gx_demo.processed_netflix_originals": ["model.dbt_gx_demo.stg_netflix_originals", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_originals_ETL_CREATE_DATE__Day__1000.ac411acdc5"], "model.dbt_gx_demo.processed_netflix_best_movie_by_year": ["test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_by_year_ETL_CREATE_DATE__Day__1000.d17868dafd"], "model.dbt_gx_demo.processed_netflix_titles": ["model.dbt_gx_demo.stg_netflix_titles", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_titles_ETL_CREATE_DATE__Day__1000.ffccfa3162"], "model.dbt_gx_demo.processed_netflix_dataset_movie": ["model.dbt_gx_demo.stg_netflix_dataset_movie", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_movie_ETL_CREATE_DATE__Day__1000.464c2d3dc8"], "model.dbt_gx_demo.processed_netflix_best_movie": ["model.dbt_gx_demo.stg_netflix_best_movie", "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_processed_netflix_best_movie_ETL_CREATE_DATE.4829a91995", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_ETL_CREATE_DATE__Day__1000.b7e1c7ee16"], "model.dbt_gx_demo.raw_transactions": ["model.dbt_gx_demo.processed_transactions", "model.dbt_gx_demo.v_stg_transactions"], "model.dbt_gx_demo.raw_customer_info": ["model.dbt_gx_demo.processed_customer_info", "model.dbt_gx_demo.v_stg_customer_info"], "model.dbt_gx_demo.raw_orders": ["model.dbt_gx_demo.get_order", "model.dbt_gx_demo.processed_orders", "model.dbt_gx_demo.raw_inventory", "model.dbt_gx_demo.v_stg_orders"], "model.dbt_gx_demo.raw_inventory": ["model.dbt_gx_demo.processed_inventory", "model.dbt_gx_demo.v_stg_inventory"], "model.dbt_gx_demo.raw_flight_info": ["model.dbt_gx_demo.processed_flight_info", "model.dbt_gx_demo.v_stg_flight_info"], "model.dbt_gx_demo.raw_airline_info": ["model.dbt_gx_demo.processed_airline_info", "model.dbt_gx_demo.v_stg_airline_info"], "model.dbt_gx_demo.raw_airport_info": ["model.dbt_gx_demo.processed_airport_info", "model.dbt_gx_demo.v_stg_airport_info"], "model.dbt_gx_demo.raw_netflix_best_show_by_year": ["model.dbt_gx_demo.processed_netflix_best_show_by_year"], "model.dbt_gx_demo.raw_netflix_originals": ["model.dbt_gx_demo.processed_netflix_originals"], "model.dbt_gx_demo.raw_netflix_dataset_rating": ["model.dbt_gx_demo.processed_netflix_dataset_rating"], "model.dbt_gx_demo.raw_netflix_credits": ["model.dbt_gx_demo.processed_netflix_credits"], "model.dbt_gx_demo.raw_netflix_best_show": ["model.dbt_gx_demo.processed_netflix_best_show"], "model.dbt_gx_demo.raw_netflix_titles": ["model.dbt_gx_demo.processed_netflix_titles"], "model.dbt_gx_demo.raw_netflix_dataset_movie": ["model.dbt_gx_demo.processed_netflix_dataset_movie"], "model.dbt_gx_demo.raw_netflix_best_movie": ["model.dbt_gx_demo.processed_netflix_best_movie"], "model.dbt_gx_demo.raw_netflix_best_movie_by_year": ["model.dbt_gx_demo.processed_netflix_best_movie_by_year"], "model.dbt_gx_demo.get_order": [], "model.dbt_gx_demo.failures": ["operation.dbt_gx_demo.dbt_gx_demo-on-run-end-0"], "model.dbt_gx_demo.stg_customer_info": ["test.dbt_gx_demo.accepted_values_stg_customer_info_CD_MARITAL_STATUS__S__D__W__U__M.dbaae4f8dd", "test.dbt_gx_demo.accepted_values_stg_customer_info_C_SALUTATION__Dr___Mrs___Sir__Miss__Ms___Mr_.f5fe5d765b", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ADDRESS_ID__varchar.28ad6784ea", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_CITY__varchar.cf0d5b183f", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTRY__varchar.981b2b63d3", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTY__varchar.93c3ddd700", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_GMT_OFFSET__number.bf8bafe9f6", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_LOCATION_TYPE__varchar.90702ffa32", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STATE__varchar.32cc390077", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_NUMBER__varchar.aaa7bb813f", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_TYPE__varchar.0f6b1230b3", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_SUITE_NUMBER__varchar.50dcf81140", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ZIP__varchar.3a541943e4", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_CREDIT_RATING__varchar.d147a744cd", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_DEP_COUNT__number.a360689910", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_EDUCATION_STATUS__varchar.9576a02d5e", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_GENDER__varchar.6273cc4354", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_MARITAL_STATUS__varchar.cf56ac23ad", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_PURCHASE_ESTIMATE__number.fc040e3eec", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_DAY__number.1b448c94c9", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_YEAR__number.828757e1a4", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_ID__varchar.6f28245cfc", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_SK__number.49440b7b40", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_EMAIL_ADDRESS__varchar.1aa45c55e7", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_FIRST_NAME__varchar.1e2d371be4", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LAST_NAME__varchar.e6699594fc", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LOGIN__varchar.a3e38b2f93", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_SALUTATION__varchar.36ab62d139", "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_LOAD_DATE_TIMESTAMP__timestamp_ltz.de1153a3d0", "test.dbt_gx_demo.dbt_expectations_expect_compound_columns_to_be_unique_stg_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID.818257fc11", "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_stg_customer_info_LOAD_DATE_TIMESTAMP__day__100.3ff4929afc", "test.dbt_gx_demo.not_null_stg_customer_info_CD_MARITAL_STATUS.963dbbc827", "test.dbt_gx_demo.not_null_stg_customer_info_C_CUSTOMER_ID.0bb8cad22a", "test.dbt_gx_demo.not_null_stg_customer_info_C_CUSTOMER_SK.31f6d35e10"], "model.dbt_gx_demo.stg_transactions": ["test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_stg_transactions_ORDER_ID__CUSTOMER_ID.0e7eb63c1d", "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_match_set_stg_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP.29cc7c5733"], "model.dbt_gx_demo.stg_orders": ["test.dbt_gx_demo.dbt_expectations_expect_table_column_count_to_be_between_stg_orders_40__1.758b6f9a19", "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_stg_orders_ORDERKEY__LINENUMBER.47459b381c"], "model.dbt_gx_demo.stg_inventory": [], "model.dbt_gx_demo.stg_flight_info": [], "model.dbt_gx_demo.stg_airline_info": ["analysis.dbt_gx_demo.codegen_demo_create_source"], "model.dbt_gx_demo.stg_airport_info": [], "model.dbt_gx_demo.stg_netflix_originals": [], "model.dbt_gx_demo.stg_netflix_best_show_by_year": [], "model.dbt_gx_demo.stg_netflix_credits": [], "model.dbt_gx_demo.stg_netflix_best_show": [], "model.dbt_gx_demo.stg_netflix_dataset_rating": [], "model.dbt_gx_demo.stg_netflix_best_movie": ["test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_stg_netflix_best_movie_ETL_CREATE_DATE.e52577701a"], "model.dbt_gx_demo.stg_netflix_titles": [], "model.dbt_gx_demo.stg_netflix_dataset_movie": [], "model.dbt_gx_demo.stg_netflix_best_movie_by_year": [], "model.dbt_gx_demo.v_stg_inventory": ["model.dbt_gx_demo.hub_nation", "model.dbt_gx_demo.hub_part", "model.dbt_gx_demo.hub_region", "model.dbt_gx_demo.hub_supplier", "model.dbt_gx_demo.link_inventory", "model.dbt_gx_demo.link_nation_region", "model.dbt_gx_demo.link_supplier_nation", "model.dbt_gx_demo.sat_inv_inventory_details", "model.dbt_gx_demo.sat_inv_part_details", "model.dbt_gx_demo.sat_inv_supp_nation_details", "model.dbt_gx_demo.sat_inv_supp_region_details", "model.dbt_gx_demo.sat_inv_supplier_details"], "model.dbt_gx_demo.v_stg_transactions": ["model.dbt_gx_demo.t_link_transactions"], "model.dbt_gx_demo.v_stg_customer_info": ["model.dbt_gx_demo.hub_customer", "model.dbt_gx_demo.hub_customer_info", "model.dbt_gx_demo.link_customer_address", "model.dbt_gx_demo.sat_customer_address"], "model.dbt_gx_demo.v_stg_orders": ["model.dbt_gx_demo.hub_customer", "model.dbt_gx_demo.hub_lineitem", "model.dbt_gx_demo.hub_nation", "model.dbt_gx_demo.hub_order", "model.dbt_gx_demo.hub_part", "model.dbt_gx_demo.hub_region", "model.dbt_gx_demo.hub_supplier", "model.dbt_gx_demo.link_customer_nation", "model.dbt_gx_demo.link_customer_order", "model.dbt_gx_demo.link_inventory_allocation", "model.dbt_gx_demo.link_nation_region", "model.dbt_gx_demo.link_order_lineitem", "model.dbt_gx_demo.sat_ma_order_lineitem_details", "model.dbt_gx_demo.sat_order_cust_nation_details", "model.dbt_gx_demo.sat_order_cust_region_details", "model.dbt_gx_demo.sat_order_customer_details", "model.dbt_gx_demo.sat_order_lineitem_details", "model.dbt_gx_demo.sat_order_order_details"], "model.dbt_gx_demo.v_stg_airport_info": ["model.dbt_gx_demo.hub_airport"], "model.dbt_gx_demo.v_stg_flight_info": ["model.dbt_gx_demo.hub_airline", "model.dbt_gx_demo.hub_airplane", "model.dbt_gx_demo.hub_airport", "model.dbt_gx_demo.hub_flight", "model.dbt_gx_demo.link_airport_airline_airplane_flight"], "model.dbt_gx_demo.v_stg_airline_info": ["model.dbt_gx_demo.hub_airline"], "model.dbt_gx_demo.t_link_transactions": [], "model.dbt_gx_demo.hub_supplier": ["test.dbt_gx_demo.dbt_constraints_primary_key_hub_supplier_SUPPLIER_PK.464f36f4d8", "test.dbt_gx_demo.not_null_hub_supplier_SUPPLIER_PK.cb6bc2431c", "test.dbt_gx_demo.unique_hub_supplier_SUPPLIER_PK.9d6f593fff"], "model.dbt_gx_demo.hub_region": ["test.dbt_gx_demo.dbt_constraints_primary_key_hub_region_REGION_PK.45bbc9debc", "test.dbt_gx_demo.not_null_hub_region_REGION_PK.da7bb5bc68", "test.dbt_gx_demo.unique_hub_region_REGION_PK.1623d63653"], "model.dbt_gx_demo.hub_order": ["test.dbt_gx_demo.dbt_constraints_primary_key_hub_order_ORDER_PK.cdf0c9ca53", "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_order_LOAD_DATE.8a20a1bf8d", "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_order_RECORD_SOURCE.20b1a3e20a", "test.dbt_gx_demo.not_null_hub_order_ORDER_PK.d767df4225", "test.dbt_gx_demo.unique_hub_order_ORDER_PK.dd56da982e"], "model.dbt_gx_demo.hub_customer": ["test.dbt_gx_demo.dbt_constraints_primary_key_hub_customer_CUSTOMER_PK.f4acb921f8", "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_LOAD_DATE.818fc77f99", "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_RECORD_SOURCE.900d0dc7f1", "test.dbt_gx_demo.not_null_hub_customer_CUSTOMER_PK.1d78ce28a2", "test.dbt_gx_demo.unique_hub_customer_CUSTOMER_PK.314091a1fe"], "model.dbt_gx_demo.hub_customer_info": ["test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_info_LOAD_DATE.f06bb4117a", "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_info_RECORD_SOURCE.8f8f4f4943"], "model.dbt_gx_demo.hub_nation": ["test.dbt_gx_demo.dbt_constraints_primary_key_hub_nation_NATION_PK.67febfdd15", "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_nation_LOAD_DATE.41485c19cc", "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_nation_RECORD_SOURCE.9417c98e3f", "test.dbt_gx_demo.not_null_hub_nation_NATION_PK.8b55844abf", "test.dbt_gx_demo.unique_hub_nation_NATION_PK.cc2fd27451"], "model.dbt_gx_demo.hub_lineitem": ["test.dbt_gx_demo.dbt_constraints_primary_key_hub_lineitem_LINEITEM_PK.6bde3e4c93", "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_lineitem_LOAD_DATE.805bf794b1", "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_lineitem_RECORD_SOURCE.cb12657b7f", "test.dbt_gx_demo.not_null_hub_lineitem_LINEITEM_PK.7fbaf72202", "test.dbt_gx_demo.unique_hub_lineitem_LINEITEM_PK.97dc997d71"], "model.dbt_gx_demo.hub_part": ["test.dbt_gx_demo.dbt_constraints_primary_key_hub_part_PART_PK.0926df92b7", "test.dbt_gx_demo.not_null_hub_part_PART_PK.fd5ead72ff", "test.dbt_gx_demo.unique_hub_part_PART_PK.38f30cc60e"], "model.dbt_gx_demo.hub_airline": [], "model.dbt_gx_demo.hub_airplane": [], "model.dbt_gx_demo.hub_flight": [], "model.dbt_gx_demo.hub_airport": [], "model.dbt_gx_demo.link_customer_order": [], "model.dbt_gx_demo.link_customer_address": [], "model.dbt_gx_demo.link_inventory_allocation": [], "model.dbt_gx_demo.link_inventory": [], "model.dbt_gx_demo.link_customer_nation": [], "model.dbt_gx_demo.link_order_lineitem": [], "model.dbt_gx_demo.link_nation_region": [], "model.dbt_gx_demo.link_supplier_nation": [], "model.dbt_gx_demo.link_airport_airline_airplane_flight": [], "model.dbt_gx_demo.sat_inv_inventory_details": ["test.dbt_gx_demo.dbt_constraints_primary_key_sat_inv_inventory_details_INVENTORY_HASHDIFF.4b1886b64d", "test.dbt_gx_demo.not_null_sat_inv_inventory_details_INVENTORY_HASHDIFF.a2f6004c48", "test.dbt_gx_demo.unique_sat_inv_inventory_details_INVENTORY_HASHDIFF.ca26536e5a"], "model.dbt_gx_demo.sat_order_cust_nation_details": [], "model.dbt_gx_demo.sat_customer_address": [], "model.dbt_gx_demo.sat_order_lineitem_details": [], "model.dbt_gx_demo.sat_inv_supplier_details": [], "model.dbt_gx_demo.sat_inv_supp_nation_details": [], "model.dbt_gx_demo.sat_inv_supp_region_details": [], "model.dbt_gx_demo.sat_order_order_details": [], "model.dbt_gx_demo.sat_ma_order_lineitem_details": [], "model.dbt_gx_demo.sat_inv_part_details": [], "model.dbt_gx_demo.sat_order_customer_details": [], "model.dbt_gx_demo.sat_order_cust_region_details": [], "analysis.dbt_gx_demo.codegen_demo_create_base_model": [], "analysis.dbt_gx_demo.codegen_demo_create_source": [], "operation.dbt_gx_demo.dbt_gx_demo-on-run-end-0": [], "operation.dbt_gx_demo.dbt_gx_demo-on-run-end-1": [], "model.dbt_snowflake_monitoring.warehouses_type2_dimension": [], "model.dbt_snowflake_monitoring.cost_per_query": ["model.dbt_snowflake_monitoring.query_history_enriched", "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b", "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d"], "model.dbt_snowflake_monitoring.hourly_spend": ["model.dbt_snowflake_monitoring.daily_spend"], "model.dbt_snowflake_monitoring.daily_spend": [], "model.dbt_snowflake_monitoring.query_history_enriched": ["model.dbt_snowflake_monitoring.dbt_queries"], "model.dbt_snowflake_monitoring.query_base_table_access": [], "model.dbt_snowflake_monitoring.query_direct_table_access": [], "model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view": ["model.dbt_snowflake_monitoring.daily_rates", "model.dbt_snowflake_monitoring.daily_rates"], "model.dbt_snowflake_monitoring.warehouse_cluster_status": [], "model.dbt_snowflake_monitoring.dbt_queries": [], "model.dbt_snowflake_monitoring.query_direct_object_access": ["model.dbt_snowflake_monitoring.query_direct_table_access"], "model.dbt_snowflake_monitoring.query_base_object_access": ["model.dbt_snowflake_monitoring.query_base_table_access"], "model.dbt_snowflake_monitoring.warehouse_credits_map": [], "model.dbt_snowflake_monitoring.daily_rates": ["model.dbt_snowflake_monitoring.cost_per_query", "model.dbt_snowflake_monitoring.cost_per_query", "model.dbt_snowflake_monitoring.cost_per_query", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_stage_storage_usage_history": ["model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_remaining_balance_daily": ["model.dbt_snowflake_monitoring.remaining_balance_daily_without_contract_view"], "model.dbt_snowflake_monitoring.stg_serverless_task_history": ["model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_query_history": ["model.dbt_snowflake_monitoring.cost_per_query", "model.dbt_snowflake_monitoring.query_history_enriched", "model.dbt_snowflake_monitoring.warehouses_type2_dimension", "model.dbt_snowflake_monitoring.warehouses_type2_dimension"], "model.dbt_snowflake_monitoring.stg_usage_in_currency_daily": ["model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_access_history": ["model.dbt_snowflake_monitoring.query_base_object_access", "model.dbt_snowflake_monitoring.query_direct_object_access"], "model.dbt_snowflake_monitoring.stg_rate_sheet_daily": ["model.dbt_snowflake_monitoring.daily_rates"], "model.dbt_snowflake_monitoring.stg_database_storage_usage_history": ["model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_metering_daily_history": ["model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_snowflake_monitoring.stg_warehouse_metering_history": ["model.dbt_snowflake_monitoring.cost_per_query", "model.dbt_snowflake_monitoring.cost_per_query"], "model.dbt_snowflake_monitoring.stg_warehouse_events_history": ["model.dbt_snowflake_monitoring.warehouse_cluster_status", "model.dbt_snowflake_monitoring.warehouse_cluster_status"], "model.dbt_snowflake_monitoring.stg_metering_history": ["model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend", "model.dbt_snowflake_monitoring.hourly_spend"], "model.dbt_artifacts.fct_dbt__test_executions": [], "model.dbt_artifacts.fct_dbt__snapshot_executions": [], "model.dbt_artifacts.dim_dbt__tests": [], "model.dbt_artifacts.dim_dbt__snapshots": [], "model.dbt_artifacts.fct_dbt__seed_executions": [], "model.dbt_artifacts.fct_dbt__model_executions": [], "model.dbt_artifacts.dim_dbt__current_models": [], "model.dbt_artifacts.dim_dbt__exposures": [], "model.dbt_artifacts.dim_dbt__models": [], "model.dbt_artifacts.dim_dbt__sources": [], "model.dbt_artifacts.dim_dbt__seeds": [], "model.dbt_artifacts.fct_dbt__invocations": [], "model.dbt_artifacts.snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.tests": ["model.dbt_artifacts.stg_dbt__tests"], "model.dbt_artifacts.snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.fct_dbt__invocations"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.fct_dbt__model_executions"], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.fct_dbt__seed_executions"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.dim_dbt__snapshots"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.dim_dbt__tests"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.dim_dbt__exposures"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.fct_dbt__snapshot_executions"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.fct_dbt__test_executions"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.dim_dbt__seeds"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.dim_dbt__models"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.dim_dbt__sources"], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.dbt_gx_demo.not_null_processed_customer_info_C_CUSTOMER_SK.c589f7a5e1": [], "test.dbt_gx_demo.not_null_processed_customer_info_C_CUSTOMER_ID.32f12b07f6": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_customer_info_LOAD_DATE_TIMESTAMP__Day__1000.eb9534213f": [], "test.dbt_gx_demo.dbt_expectations_expect_compound_columns_to_be_unique_processed_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID.5417155236": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_inventory_LOAD_DATE_TIMESTAMP__Day__1000.5ef7906344": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_orders_LOAD_DATE_TIMESTAMP__Day__1000.7a702e56d1": [], "test.dbt_gx_demo.dbt_expectations_expect_table_column_count_to_be_between_processed_orders_40__1.368c3d992b": [], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_processed_orders_ORDERKEY__LINENUMBER.5800f50161": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_transactions_LOAD_DATE_TIMESTAMP__Day__1000.cd4f9ab805": [], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_processed_transactions_ORDER_ID__CUSTOMER_ID.83e85ab518": [], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_match_set_processed_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP.c56ca7a83e": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_ETL_CREATE_DATE__Day__1000.b7e1c7ee16": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_processed_netflix_best_movie_ETL_CREATE_DATE.4829a91995": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_movie_by_year_ETL_CREATE_DATE__Day__1000.d17868dafd": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_ETL_CREATE_DATE__Day__1000.7723ec0182": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_best_show_by_year_ETL_CREATE_DATE__Day__1000.35adf63971": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_credits_ETL_CREATE_DATE__Day__1000.d11d6cdc93": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_movie_ETL_CREATE_DATE__Day__1000.464c2d3dc8": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_dataset_rating_ETL_CREATE_DATE__Day__1000.41ca4c4576": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_originals_ETL_CREATE_DATE__Day__1000.ac411acdc5": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_netflix_titles_ETL_CREATE_DATE__Day__1000.ffccfa3162": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_airline_info_LOAD_DATE_TIMESTAMP__Day__1000.fbd94a9637": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_airport_info_LOAD_DATE_TIMESTAMP__Day__1000.4c006f08c0": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_processed_flight_info_LOAD_DATE_TIMESTAMP__day__1000.7c22666d07": [], "test.dbt_gx_demo.not_null_stg_customer_info_C_CUSTOMER_SK.31f6d35e10": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_SK__number.49440b7b40": [], "test.dbt_gx_demo.not_null_stg_customer_info_C_CUSTOMER_ID.0bb8cad22a": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_CUSTOMER_ID__varchar.6f28245cfc": [], "test.dbt_gx_demo.accepted_values_stg_customer_info_C_SALUTATION__Dr___Mrs___Sir__Miss__Ms___Mr_.f5fe5d765b": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_SALUTATION__varchar.36ab62d139": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_FIRST_NAME__varchar.1e2d371be4": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LAST_NAME__varchar.e6699594fc": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_DAY__number.1b448c94c9": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_BIRTH_YEAR__number.828757e1a4": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_EMAIL_ADDRESS__varchar.1aa45c55e7": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_C_LOGIN__varchar.a3e38b2f93": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ADDRESS_ID__varchar.28ad6784ea": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_NUMBER__varchar.aaa7bb813f": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STREET_TYPE__varchar.0f6b1230b3": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_SUITE_NUMBER__varchar.50dcf81140": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_CITY__varchar.cf0d5b183f": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTY__varchar.93c3ddd700": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_STATE__varchar.32cc390077": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_ZIP__varchar.3a541943e4": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_COUNTRY__varchar.981b2b63d3": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_GMT_OFFSET__number.bf8bafe9f6": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CA_LOCATION_TYPE__varchar.90702ffa32": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_GENDER__varchar.6273cc4354": [], "test.dbt_gx_demo.not_null_stg_customer_info_CD_MARITAL_STATUS.963dbbc827": [], "test.dbt_gx_demo.accepted_values_stg_customer_info_CD_MARITAL_STATUS__S__D__W__U__M.dbaae4f8dd": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_MARITAL_STATUS__varchar.cf56ac23ad": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_EDUCATION_STATUS__varchar.9576a02d5e": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_PURCHASE_ESTIMATE__number.fc040e3eec": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_CREDIT_RATING__varchar.d147a744cd": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_CD_DEP_COUNT__number.a360689910": [], "test.dbt_gx_demo.dbt_expectations_expect_row_values_to_have_recent_data_stg_customer_info_LOAD_DATE_TIMESTAMP__day__100.3ff4929afc": [], "test.dbt_gx_demo.dbt_expectations_expect_column_values_to_be_of_type_stg_customer_info_LOAD_DATE_TIMESTAMP__timestamp_ltz.de1153a3d0": [], "test.dbt_gx_demo.dbt_expectations_expect_compound_columns_to_be_unique_stg_customer_info_C_CUSTOMER_SK__C_CUSTOMER_ID.818257fc11": [], "test.dbt_gx_demo.dbt_expectations_expect_table_column_count_to_be_between_stg_orders_40__1.758b6f9a19": [], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_stg_orders_ORDERKEY__LINENUMBER.47459b381c": [], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_contain_set_stg_transactions_ORDER_ID__CUSTOMER_ID.0e7eb63c1d": [], "test.dbt_gx_demo.dbt_expectations_expect_table_columns_to_match_set_stg_transactions_ORDER_ID__CUSTOMER_ID__ORDER_DATE__TRANSACTION_DATE__TRANSACTION_NUMBER__AMOUNT__TYPE__LOAD_DATE_TIMESTAMP.29cc7c5733": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_stg_netflix_best_movie_ETL_CREATE_DATE.e52577701a": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_info_LOAD_DATE.f06bb4117a": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_info_RECORD_SOURCE.8f8f4f4943": [], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_customer_CUSTOMER_PK.f4acb921f8": [], "test.dbt_gx_demo.unique_hub_customer_CUSTOMER_PK.314091a1fe": [], "test.dbt_gx_demo.not_null_hub_customer_CUSTOMER_PK.1d78ce28a2": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_LOAD_DATE.818fc77f99": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_customer_RECORD_SOURCE.900d0dc7f1": [], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_lineitem_LINEITEM_PK.6bde3e4c93": [], "test.dbt_gx_demo.unique_hub_lineitem_LINEITEM_PK.97dc997d71": [], "test.dbt_gx_demo.not_null_hub_lineitem_LINEITEM_PK.7fbaf72202": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_lineitem_LOAD_DATE.805bf794b1": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_lineitem_RECORD_SOURCE.cb12657b7f": [], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_nation_NATION_PK.67febfdd15": [], "test.dbt_gx_demo.unique_hub_nation_NATION_PK.cc2fd27451": [], "test.dbt_gx_demo.not_null_hub_nation_NATION_PK.8b55844abf": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_nation_LOAD_DATE.41485c19cc": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_nation_RECORD_SOURCE.9417c98e3f": [], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_order_ORDER_PK.cdf0c9ca53": [], "test.dbt_gx_demo.unique_hub_order_ORDER_PK.dd56da982e": [], "test.dbt_gx_demo.not_null_hub_order_ORDER_PK.d767df4225": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_order_LOAD_DATE.8a20a1bf8d": [], "test.dbt_gx_demo.dbt_expectations_expect_column_to_exist_hub_order_RECORD_SOURCE.20b1a3e20a": [], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_part_PART_PK.0926df92b7": [], "test.dbt_gx_demo.unique_hub_part_PART_PK.38f30cc60e": [], "test.dbt_gx_demo.not_null_hub_part_PART_PK.fd5ead72ff": [], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_region_REGION_PK.45bbc9debc": [], "test.dbt_gx_demo.unique_hub_region_REGION_PK.1623d63653": [], "test.dbt_gx_demo.not_null_hub_region_REGION_PK.da7bb5bc68": [], "test.dbt_gx_demo.dbt_constraints_primary_key_hub_supplier_SUPPLIER_PK.464f36f4d8": [], "test.dbt_gx_demo.unique_hub_supplier_SUPPLIER_PK.9d6f593fff": [], "test.dbt_gx_demo.not_null_hub_supplier_SUPPLIER_PK.cb6bc2431c": [], "test.dbt_gx_demo.dbt_constraints_primary_key_sat_inv_inventory_details_INVENTORY_HASHDIFF.4b1886b64d": [], "test.dbt_gx_demo.unique_sat_inv_inventory_details_INVENTORY_HASHDIFF.ca26536e5a": [], "test.dbt_gx_demo.not_null_sat_inv_inventory_details_INVENTORY_HASHDIFF.a2f6004c48": [], "test.dbt_snowflake_monitoring.unique_cost_per_query_query_id.23a096fe9d": [], "test.dbt_snowflake_monitoring.not_null_cost_per_query_query_id.8daae1881b": [], "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_SK.ce7b263533": [], "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_ID.07f591b9c5": [], "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS.e2cb8b9012": [], "test.dbt_gx_demo.source_accepted_values_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS__S__D__W__U__M.063ab0c72f": [], "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_INVENTORY_LOAD_DATE_TIMESTAMP__Day__100000.1e4be90f25": [], "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_ORDERS_LOAD_DATE_TIMESTAMP__Day__10000.6415ff9c9b": [], "test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_TRANSACTIONS_LOAD_DATE_TIMESTAMP__Day__10000.f998f521fa": [], "source.dbt_gx_demo.sales_demo.RAW_CUSTOMER_INFO": ["test.dbt_gx_demo.source_accepted_values_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS__S__D__W__U__M.063ab0c72f", "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_CD_MARITAL_STATUS.e2cb8b9012", "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_ID.07f591b9c5", "test.dbt_gx_demo.source_not_null_sales_demo_RAW_CUSTOMER_INFO_C_CUSTOMER_SK.ce7b263533"], "source.dbt_gx_demo.sales_demo.RAW_INVENTORY": ["test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_INVENTORY_LOAD_DATE_TIMESTAMP__Day__100000.1e4be90f25"], "source.dbt_gx_demo.sales_demo.RAW_ORDERS": ["test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_ORDERS_LOAD_DATE_TIMESTAMP__Day__10000.6415ff9c9b"], "source.dbt_gx_demo.sales_demo.RAW_TRANSACTIONS": ["test.dbt_gx_demo.dbt_expectations_source_expect_row_values_to_have_recent_data_sales_demo_RAW_TRANSACTIONS_LOAD_DATE_TIMESTAMP__Day__10000.f998f521fa"], "source.dbt_gx_demo.flight_demo.RAW_AIRPORT_INFO": [], "source.dbt_gx_demo.flight_demo.RAW_AIRLINE_INFO": [], "source.dbt_gx_demo.flight_demo.RAW_FLIGHT_INFO": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_MOVIE": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_MOVIE_BY_YEAR": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_SHOW": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_BEST_SHOW_BY_YEAR": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_DATASET_MOVIE": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_DATASET_RATING": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_ORIGINALS": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_CREDITS": [], "source.dbt_gx_demo.NETFLIX.RAW_NETFLIX_TITLES": [], "source.dbt_gx_demo.tpch_sample.LINEITEM": ["analysis.dbt_gx_demo.codegen_demo_create_base_model", "model.dbt_gx_demo.raw_orders"], "source.dbt_gx_demo.tpch_sample.CUSTOMER": ["model.dbt_gx_demo.raw_orders", "model.dbt_gx_demo.raw_transactions"], "source.dbt_gx_demo.tpch_sample.ORDERS": ["model.dbt_gx_demo.raw_orders", "model.dbt_gx_demo.raw_transactions"], "source.dbt_gx_demo.tpch_sample.PARTSUPP": ["model.dbt_gx_demo.raw_inventory"], "source.dbt_gx_demo.tpch_sample.SUPPLIER": ["model.dbt_gx_demo.raw_inventory", "model.dbt_gx_demo.raw_orders"], "source.dbt_gx_demo.tpch_sample.PART": ["model.dbt_gx_demo.raw_inventory", "model.dbt_gx_demo.raw_orders"], "source.dbt_gx_demo.tpch_sample.NATION": ["model.dbt_gx_demo.raw_inventory", "model.dbt_gx_demo.raw_orders", "model.dbt_gx_demo.raw_orders"], "source.dbt_gx_demo.tpch_sample.REGION": ["model.dbt_gx_demo.raw_inventory", "model.dbt_gx_demo.raw_orders", "model.dbt_gx_demo.raw_orders"], "source.dbt_gx_demo.tpcds_sample.CUSTOMER": ["model.dbt_gx_demo.raw_customer_info"], "source.dbt_gx_demo.tpcds_sample.CUSTOMER_ADDRESS": ["model.dbt_gx_demo.raw_customer_info"], "source.dbt_gx_demo.tpcds_sample.CUSTOMER_DEMOGRAPHICS": ["model.dbt_gx_demo.raw_customer_info"], "source.dbt_gx_demo.tpcds_sample.HOUSEHOLD_DEMOGRAPHICS": [], "source.dbt_gx_demo.DEMO.AIRPORT": ["model.dbt_gx_demo.raw_airport_info"], "source.dbt_gx_demo.DEMO.AIRLINE": ["model.dbt_gx_demo.raw_airline_info"], "source.dbt_gx_demo.DEMO.FLIGHT": ["model.dbt_gx_demo.raw_flight_info"], "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE": ["model.dbt_gx_demo.raw_netflix_best_movie"], "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_MOVIE_BY_YEAR": ["model.dbt_gx_demo.raw_netflix_best_movie_by_year", "model.dbt_gx_demo.stg_netflix_best_movie_by_year"], "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW": ["model.dbt_gx_demo.raw_netflix_best_show"], "source.dbt_gx_demo.NETFLIX.NETFLIX_BEST_SHOW_BY_YEAR": ["model.dbt_gx_demo.raw_netflix_best_show_by_year"], "source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_MOVIE": ["model.dbt_gx_demo.raw_netflix_dataset_movie"], "source.dbt_gx_demo.NETFLIX.NETFLIX_DATASET_RATING": ["model.dbt_gx_demo.raw_netflix_dataset_rating"], "source.dbt_gx_demo.NETFLIX.NETFLIX_ORIGINALS": ["model.dbt_gx_demo.raw_netflix_originals"], "source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_CREDITS": ["model.dbt_gx_demo.raw_netflix_credits"], "source.dbt_gx_demo.NETFLIX.NETFLIX_RAW_TITLES": ["model.dbt_gx_demo.raw_netflix_titles"], "source.dbt_snowflake_monitoring.snowflake_account_usage.access_history": ["model.dbt_snowflake_monitoring.stg_access_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.database_storage_usage_history": ["model.dbt_snowflake_monitoring.stg_database_storage_usage_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_daily_history": ["model.dbt_snowflake_monitoring.stg_metering_daily_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.metering_history": ["model.dbt_snowflake_monitoring.stg_metering_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.query_history": ["model.dbt_snowflake_monitoring.stg_query_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.serverless_task_history": ["model.dbt_snowflake_monitoring.stg_serverless_task_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.stage_storage_usage_history": ["model.dbt_snowflake_monitoring.stg_stage_storage_usage_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_events_history": ["model.dbt_snowflake_monitoring.stg_warehouse_events_history"], "source.dbt_snowflake_monitoring.snowflake_account_usage.warehouse_metering_history": ["model.dbt_snowflake_monitoring.stg_warehouse_metering_history"], "source.dbt_snowflake_monitoring.snowflake_organization_usage.rate_sheet_daily": ["model.dbt_snowflake_monitoring.stg_rate_sheet_daily"], "source.dbt_snowflake_monitoring.snowflake_organization_usage.remaining_balance_daily": ["model.dbt_snowflake_monitoring.stg_remaining_balance_daily"], "source.dbt_snowflake_monitoring.snowflake_organization_usage.usage_in_currency_daily": ["model.dbt_snowflake_monitoring.stg_usage_in_currency_daily"]}}